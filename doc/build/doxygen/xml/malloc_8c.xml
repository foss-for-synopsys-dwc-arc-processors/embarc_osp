<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="malloc_8c" kind="file">
    <compoundname>malloc.c</compoundname>
    <includes local="yes">embARC_toolchain.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="2701">
        <label>sys/mman.h</label>
      </node>
      <node id="2699">
        <label>stdlib.h</label>
      </node>
      <node id="2697">
        <label>errno.h</label>
      </node>
      <node id="2702">
        <label>fcntl.h</label>
      </node>
      <node id="2695">
        <label>sys/types.h</label>
      </node>
      <node id="2700">
        <label>string.h</label>
      </node>
      <node id="2693">
        <label>malloc.c</label>
        <link refid="malloc.c"/>
        <childnode refid="2694" relation="include">
        </childnode>
        <childnode refid="2695" relation="include">
        </childnode>
        <childnode refid="2696" relation="include">
        </childnode>
        <childnode refid="2697" relation="include">
        </childnode>
        <childnode refid="2698" relation="include">
        </childnode>
        <childnode refid="2699" relation="include">
        </childnode>
        <childnode refid="2700" relation="include">
        </childnode>
        <childnode refid="2701" relation="include">
        </childnode>
        <childnode refid="2702" relation="include">
        </childnode>
        <childnode refid="2703" relation="include">
        </childnode>
      </node>
      <node id="2703">
        <label>unistd.h</label>
      </node>
      <node id="2694">
        <label>embARC_toolchain.h</label>
      </node>
      <node id="2698">
        <label>time.h</label>
      </node>
      <node id="2696">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structmallinfo" prot="public">mallinfo</innerclass>
    <innerclass refid="structmalloc__chunk" prot="public">malloc_chunk</innerclass>
    <innerclass refid="structmalloc__tree__chunk" prot="public">malloc_tree_chunk</innerclass>
    <innerclass refid="structmalloc__segment" prot="public">malloc_segment</innerclass>
    <innerclass refid="structmalloc__state" prot="public">malloc_state</innerclass>
    <innerclass refid="structmalloc__params" prot="public">malloc_params</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="malloc_8c_1afc15a339eab4721df5fcd099004f1840" prot="public" static="no">
        <name>USE_LOCKS</name>
        <initializer>0 /* single core currently */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="525" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="525" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad8548e96f0d0f428a1b826ba096c3ecf" prot="public" static="no">
        <name>malloc_getpagesize</name>
        <initializer>(4096)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="533" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="533" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa27beecc92c596aab2bd668f0cba740a" prot="public" static="no">
        <name>DLMALLOC_VERSION</name>
        <initializer>20806</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="539" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a58ef5120047a35956d86ee00c2d364dc" prot="public" static="no">
        <name>DLMALLOC_EXPORT</name>
        <initializer>extern</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="543" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad6a20ec9394445398c2618b055acbcb1" prot="public" static="no">
        <name>MAX_SIZE_T</name>
        <initializer>(~(size_t)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="598" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="598" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2272cf5f1db0ea5dd0e89d1a3c5028f0" prot="public" static="no">
        <name>USE_SPIN_LOCKS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="617" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aeb595638a14befbd356f77f8ec2a5c0d" prot="public" static="no">
        <name>ONLY_MSPACES</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="621" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ab69b328d35c5a8e3bdc3463d3603e950" prot="public" static="no">
        <name>MSPACES</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="627" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="627" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a05897f13370acbdecbf31034f8bec0d5" prot="public" static="no">
        <name>MALLOC_ALIGNMENT</name>
        <initializer>((size_t)(2 * sizeof(void *)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="631" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1c2512fa5003ea9c05934d55c1196c1d" prot="public" static="no">
        <name>FOOTERS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="634" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a5376571bbf4cdc9782683635f366f89a" prot="public" static="no">
        <name>ABORT</name>
        <initializer>abort()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="637" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="637" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afc93c014764c05a1cbdef61482bc36f5" prot="public" static="no">
        <name>ABORT_ON_ASSERT_FAILURE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="640" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afac2a7b1a6efb14fc268051f90d0f1d3" prot="public" static="no">
        <name>PROCEED_ON_ERROR</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="643" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad21df8408a63deff2676218cfd5ebb1f" prot="public" static="no">
        <name>INSECURE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="647" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4a82252300d827ca28d4ab5ce089c41f" prot="public" static="no">
        <name>MALLOC_INSPECT_ALL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="650" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="650" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac24e9c0562704d17896d14869e748fcc" prot="public" static="no">
        <name>HAVE_MMAP</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="653" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6d5e91f5ad1b37dc59642cb2db028d0c" prot="public" static="no">
        <name>MMAP_CLEARS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="656" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4a3ec5cb9c1f5dc2638cb96342dc3d51" prot="public" static="no">
        <name>HAVE_MREMAP</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="663" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae5869ce6c79206810a98c59f60b9f9db" prot="public" static="no">
        <name>MALLOC_FAILURE_ACTION</name>
        <initializer>errno = ENOMEM;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="667" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9339a8172859ed6c7aed68f3ab65281c" prot="public" static="no">
        <name>HAVE_MORECORE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="673" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af84dec7bed092a94ed4501cae641695a" prot="public" static="no">
        <name>MORECORE_DEFAULT</name>
        <initializer>_sbrk</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="679" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad9f27b6ca99e4a63328136443a428b74" prot="public" static="no">
        <name>MORECORE_CONTIGUOUS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="681" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a0919191b14359403f853f75c6fcb5879" prot="public" static="no">
        <name>DEFAULT_GRANULARITY</name>
        <initializer>(0)  /* 0 means to compute in init_mparams */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="686" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aed027da2fe85e7618851151184d04f49" prot="public" static="no">
        <name>DEFAULT_TRIM_THRESHOLD</name>
        <initializer>((size_t)2U * (size_t)1024U * (size_t)1024U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="693" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3d78f5f17cc66ad4b567a39a55bb4837" prot="public" static="no">
        <name>DEFAULT_MMAP_THRESHOLD</name>
        <initializer>((size_t)256U * (size_t)1024U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="700" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af2e1098b71c84ef4c22b344dd9b3e272" prot="public" static="no">
        <name>MAX_RELEASE_CHECK_RATE</name>
        <initializer>4095</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="707" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a66da830b721a3ea3b57609ba4894da73" prot="public" static="no">
        <name>USE_BUILTIN_FFS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="713" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3071f613460817c78d1b8002d1093cc6" prot="public" static="no">
        <name>USE_DEV_RANDOM</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="716" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abdaef093c0ac7f4ffca5df2d2b2f0560" prot="public" static="no">
        <name>NO_MALLINFO</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="719" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a53688562ed3d2eda132ae91de874cd98" prot="public" static="no">
        <name>MALLINFO_FIELD_TYPE</name>
        <initializer>size_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="722" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa5a986d0460a969befdb7efd79ef049c" prot="public" static="no">
        <name>NO_MALLOC_STATS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="725" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6413d234d61f597fccc2aac39e33941c" prot="public" static="no">
        <name>NO_SEGMENT_TRAVERSAL</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="728" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae5e96ee9e20ef7cfcbbb690877fc9fb2" prot="public" static="no">
        <name>M_TRIM_THRESHOLD</name>
        <initializer>(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="738" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1ff5e3f74801d4cbb5e97ab2d3b8f2e3" prot="public" static="no">
        <name>M_GRANULARITY</name>
        <initializer>(-2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="739" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a0dd09b97e3eb71f8256b8bd441828175" prot="public" static="no">
        <name>M_MMAP_THRESHOLD</name>
        <initializer>(-3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="740" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afb79410754096e7b3bafb895720f11a7" prot="public" static="no">
        <name>_STRUCT_MALLINFO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="774" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a73031e8be1f35c837c74bee1d205a929" prot="public" static="no">
        <name>STRUCT_MALLINFO_DECLARED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="775" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1b173d22e57d9395897acbd8de62d505" prot="public" static="no">
        <name>NOINLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="810" column="16" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a724fb9f82013c782db5c3c12ea36aac8" prot="public" static="no">
        <name>FORCEINLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="821" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="821" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aeb507216612dc43759952dd835e7596d" prot="public" static="no">
        <name>dlcalloc</name>
        <initializer>calloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="829" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa2f5410ccf57ee1ae49df754b44be9e3" prot="public" static="no">
        <name>dlfree</name>
        <initializer>free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="830" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a86195c783178093d895874a07a15dce1" prot="public" static="no">
        <name>dlmalloc</name>
        <initializer>malloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="831" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a41b3d891bf7fa5e5ca08f7898b4fd9e8" prot="public" static="no">
        <name>dlmemalign</name>
        <initializer>memalign</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="832" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad6824f937bf9bdd2cccc9526746108a1" prot="public" static="no">
        <name>dlposix_memalign</name>
        <initializer>posix_memalign</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="833" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a0498e36f6b1a4293efe80b18b48e86b9" prot="public" static="no">
        <name>dlrealloc</name>
        <initializer>realloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="834" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a51b9709053b36636d2c57d9b342d4ef3" prot="public" static="no">
        <name>dlrealloc_in_place</name>
        <initializer>realloc_in_place</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="835" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af99ef0a6df3de021fcc2b48da5ced844" prot="public" static="no">
        <name>dlvalloc</name>
        <initializer>valloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="836" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9bfff55fd0c29554b7140954b38a54d4" prot="public" static="no">
        <name>dlpvalloc</name>
        <initializer>pvalloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="837" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abf412c713d3ec5ac7f33663fb22e26ca" prot="public" static="no">
        <name>dlmallinfo</name>
        <initializer><ref refid="structmallinfo" kindref="compound">mallinfo</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="838" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3dde31382dc8652ffb98335aecd248ab" prot="public" static="no">
        <name>dlmallopt</name>
        <initializer>mallopt</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="839" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a72a0e1e6edf9ef91c042680574560732" prot="public" static="no">
        <name>dlmalloc_trim</name>
        <initializer>malloc_trim</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="840" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af626033086675b4f2e7a8cafabc85ff9" prot="public" static="no">
        <name>dlmalloc_stats</name>
        <initializer>malloc_stats</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="841" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abdfd656c28f59dc708ce3dabfade2408" prot="public" static="no">
        <name>dlmalloc_usable_size</name>
        <initializer>malloc_usable_size</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="842" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae98e99f811abc5fcc542d1f0372e86b4" prot="public" static="no">
        <name>dlmalloc_footprint</name>
        <initializer>malloc_footprint</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="843" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a53ed39f9f5df6fda6aad36b40c76557e" prot="public" static="no">
        <name>dlmalloc_max_footprint</name>
        <initializer>malloc_max_footprint</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="844" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a42285edf4871e3adaab58e7e9ed08831" prot="public" static="no">
        <name>dlmalloc_footprint_limit</name>
        <initializer>malloc_footprint_limit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="845" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a11913f4b10361cf4224a561e727bace7" prot="public" static="no">
        <name>dlmalloc_set_footprint_limit</name>
        <initializer>malloc_set_footprint_limit</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="846" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abea659f429972334d253efab49b6c3b5" prot="public" static="no">
        <name>dlmalloc_inspect_all</name>
        <initializer>malloc_inspect_all</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="847" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a17816165d27e812d18ed032f9ced9ad4" prot="public" static="no">
        <name>dlindependent_calloc</name>
        <initializer>independent_calloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="848" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa4e5c5d50e0cd7dc44b2defcae6226d7" prot="public" static="no">
        <name>dlindependent_comalloc</name>
        <initializer>independent_comalloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="849" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6994d926acbbff21ac936e1e100ba801" prot="public" static="no">
        <name>dlbulk_free</name>
        <initializer>bulk_free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="850" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af576bf8ffa22a44e53018c67095ffbf0" prot="public" static="no">
        <name>assert</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1463" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad72dbcf6d0153db1b8d8a58001feed83" prot="public" static="no">
        <name>DEBUG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1465" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a011dc81eb6490491a8ae7288c0855e06" prot="public" static="no">
        <name>LOCK_AT_FORK</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1539" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1539" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2e3db94c3bfc87e3c7bcbee4973bab02" prot="public" static="no">
        <name>SIZE_T_SIZE</name>
        <initializer>(sizeof(size_t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1611" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9d769150c841cbb7512476c56aaf5617" prot="public" static="no">
        <name>SIZE_T_BITSIZE</name>
        <initializer>(sizeof(size_t) &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1612" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1612" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1acd3fa67eabd0de0d56e206fa3a416de9" prot="public" static="no">
        <name>SIZE_T_ZERO</name>
        <initializer>((size_t)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1616" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1a115588725fa912f1bcaca9f08fb658" prot="public" static="no">
        <name>SIZE_T_ONE</name>
        <initializer>((size_t)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1617" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a7e1ed65ca3ce9fcc21e329a7cea204d1" prot="public" static="no">
        <name>SIZE_T_TWO</name>
        <initializer>((size_t)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1618" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9233a87a400d8aaae1b22d1e3cdc42d8" prot="public" static="no">
        <name>SIZE_T_FOUR</name>
        <initializer>((size_t)4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1619" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aea099b8fb6bf6975c70b2945de5064d1" prot="public" static="no">
        <name>TWO_SIZE_T_SIZES</name>
        <initializer>(SIZE_T_SIZE&lt;&lt;1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1620" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2a1f1d667053b23e22043a3c7845eded" prot="public" static="no">
        <name>FOUR_SIZE_T_SIZES</name>
        <initializer>(SIZE_T_SIZE&lt;&lt;2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1621" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae711f3f963dc01f816b155795e4a7729" prot="public" static="no">
        <name>SIX_SIZE_T_SIZES</name>
        <initializer>(FOUR_SIZE_T_SIZES+TWO_SIZE_T_SIZES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1622" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac9bba1fcedab650619ef4d19073f9c73" prot="public" static="no">
        <name>HALF_MAX_SIZE_T</name>
        <initializer>(MAX_SIZE_T / 2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1623" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a46f5899c4a72acfdd20872d893679bb0" prot="public" static="no">
        <name>CHUNK_ALIGN_MASK</name>
        <initializer>(MALLOC_ALIGNMENT - SIZE_T_ONE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1626" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1626" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a02e34c4ed5784fb77e540dec9112cbfd" prot="public" static="no">
        <name>is_aligned</name>
        <param><defname>A</defname></param>
        <initializer>(((size_t)((A)) &amp; (CHUNK_ALIGN_MASK)) == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1629" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2e22ed02137eff655b87a572b974eb37" prot="public" static="no">
        <name>align_offset</name>
        <param><defname>A</defname></param>
        <initializer>((((size_t)(A) &amp; CHUNK_ALIGN_MASK) == 0)? 0 :\
  ((MALLOC_ALIGNMENT - ((size_t)(A) &amp; CHUNK_ALIGN_MASK)) &amp; CHUNK_ALIGN_MASK))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1632" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6f716771caf6f2af3b7ffb6b78091aaf" prot="public" static="no">
        <name>MFAIL</name>
        <initializer>((void*)(MAX_SIZE_T))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1646" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1646" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aea7448d636880994af54d52aa979e7bd" prot="public" static="no">
        <name>CMFAIL</name>
        <initializer>((char*)(MFAIL)) /* defined for convenience */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1647" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1647" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a976813970c83aebd611482673617e74d" prot="public" static="no">
        <name>MUNMAP_DEFAULT</name>
        <param><defname>a</defname></param>
        <param><defname>s</defname></param>
        <initializer>munmap((a), (s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1652" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1652" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ab3a1aea60d3139bc62769ccc05bfa21e" prot="public" static="no">
        <name>MMAP_PROT</name>
        <initializer>(PROT_READ|PROT_WRITE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1653" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad2d83ed2587a673f05e96fb46a11193e" prot="public" static="no">
        <name>MMAP_FLAGS</name>
        <initializer>(MAP_PRIVATE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1665" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2ffaf2bbf4640080a18b722339db2125" prot="public" static="no">
        <name>MMAP_DEFAULT</name>
        <param><defname>s</defname></param>
        <initializer>((dev_zero_fd &lt; 0) ? \
           (dev_zero_fd = open(&quot;/dev/zero&quot;, O_RDWR), \
            mmap(0, (s), MMAP_PROT, MMAP_FLAGS, dev_zero_fd, 0)) : \
            mmap(0, (s), MMAP_PROT, MMAP_FLAGS, dev_zero_fd, 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1667" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae2c771d260e4c8cc3a781e60de5cced7" prot="public" static="no">
        <name>DIRECT_MMAP_DEFAULT</name>
        <param><defname>s</defname></param>
        <initializer>MMAP_DEFAULT(s)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1673" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a215ecb242aa62fffb86fce8c6f3cac32" prot="public" static="no">
        <name>CALL_MORECORE</name>
        <param><defname>S</defname></param>
        <initializer>MORECORE_DEFAULT(S)</initializer>
        <briefdescription>
<para>Define CALL_MORECORE. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1727" column="17" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6792a808878980b064a53729e42a1b55" prot="public" static="no">
        <name>USE_MMAP_BIT</name>
        <initializer>(SIZE_T_ONE)</initializer>
        <briefdescription>
<para>Define CALL_MMAP/CALL_MUNMAP/CALL_DIRECT_MMAP. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1737" column="13" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2c63dd9bc221c7bba0b8a6b2772ecd81" prot="public" static="no">
        <name>CALL_MMAP</name>
        <param><defname>s</defname></param>
        <initializer>MMAP_DEFAULT(s)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1742" column="17" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a570315b155b7f2271c9370201cc24ef3" prot="public" static="no">
        <name>CALL_MUNMAP</name>
        <param><defname>a</defname></param>
        <param><defname>s</defname></param>
        <initializer>MUNMAP_DEFAULT((a), (s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1747" column="17" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a26980b7eab40770feedf42c2bd73c24f" prot="public" static="no">
        <name>CALL_DIRECT_MMAP</name>
        <param><defname>s</defname></param>
        <initializer>DIRECT_MMAP_DEFAULT(s)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1752" column="17" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afde1135b9abf86803f31a6b832ecf2a7" prot="public" static="no">
        <name>CALL_MREMAP</name>
        <param><defname>addr</defname></param>
        <param><defname>osz</defname></param>
        <param><defname>nsz</defname></param>
        <param><defname>mv</defname></param>
        <initializer>MFAIL</initializer>
        <briefdescription>
<para>Define CALL_MREMAP. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1775" column="13" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac7f41c328146bb45481fe3e0c20787d4" prot="public" static="no">
        <name>USE_NONCONTIGUOUS_BIT</name>
        <initializer>(4U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1779" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a57ab793cfa029220055825980f7e6edf" prot="public" static="no">
        <name>EXTERN_BIT</name>
        <initializer>(8U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1782" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a02a456408564b69d6f3de5f8fede4931" prot="public" static="no">
        <name>USE_LOCK_BIT</name>
        <initializer>(0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1816" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a61cf32dcdf0f1bcb268e3fe3f32b69dc" prot="public" static="no">
        <name>INITIAL_LOCK</name>
        <param><defname>l</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1817" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1acf7ea24a3875d0b5dbcba8a863a5e2d0" prot="public" static="no">
        <name>DESTROY_LOCK</name>
        <param><defname>l</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1818" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa3c43629ddadadeb43d75494062e5342" prot="public" static="no">
        <name>ACQUIRE_MALLOC_GLOBAL_LOCK</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1819" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2f3df62568086e570fba515b493fb8f4" prot="public" static="no">
        <name>RELEASE_MALLOC_GLOBAL_LOCK</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1820" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af3cedaeb11325fd3f4b08e92107be0d2" prot="public" static="no">
        <name>MCHUNK_SIZE</name>
        <initializer>(sizeof(<ref refid="structmalloc__chunk" kindref="compound">mchunk</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2211" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad99e48752cd2b170bdaf90b5a5bbf072" prot="public" static="no">
        <name>CHUNK_OVERHEAD</name>
        <initializer>(SIZE_T_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2216" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a7a63444ac4059044f199801725fac79f" prot="public" static="no">
        <name>MMAP_CHUNK_OVERHEAD</name>
        <initializer>(TWO_SIZE_T_SIZES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2220" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ada2e72cef4eb947e8f406502aec6e888" prot="public" static="no">
        <name>MMAP_FOOT_PAD</name>
        <initializer>(FOUR_SIZE_T_SIZES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2222" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abf35d28195f0f301fe63d0ea867f4379" prot="public" static="no">
        <name>MIN_CHUNK_SIZE</name>
        <initializer>((MCHUNK_SIZE + CHUNK_ALIGN_MASK) &amp; ~CHUNK_ALIGN_MASK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2225" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1accb5f8e767e1e6ca196937cd24f8a1e2" prot="public" static="no">
        <name>chunk2mem</name>
        <param><defname>p</defname></param>
        <initializer>((void*)((char*)(p)       + TWO_SIZE_T_SIZES))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2229" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4603903faa99536698009c9b64bc1ab9" prot="public" static="no">
        <name>mem2chunk</name>
        <param><defname>mem</defname></param>
        <initializer>((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)((char*)(mem) - TWO_SIZE_T_SIZES))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2230" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8c0e37f0d02dc9393501b1dc9b9951fd" prot="public" static="no">
        <name>align_as_chunk</name>
        <param><defname>A</defname></param>
        <initializer>(<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)((A) + align_offset(chunk2mem(A)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2232" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a79dc55ceff5acfd97aabd01db632a266" prot="public" static="no">
        <name>MAX_REQUEST</name>
        <initializer>((-MIN_CHUNK_SIZE) &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2235" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8c13c7ec4d73f12f94e9ce9486672cd1" prot="public" static="no">
        <name>MIN_REQUEST</name>
        <initializer>(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2236" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abc9ba9df02632268a7b15ef992a94035" prot="public" static="no">
        <name>pad_request</name>
        <param><defname>req</defname></param>
        <initializer>(((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) &amp; ~CHUNK_ALIGN_MASK)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2239" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ab5e11e7a52d0c430ee39bfbf1113253a" prot="public" static="no">
        <name>request2size</name>
        <param><defname>req</defname></param>
        <initializer>(((req) &lt; MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2243" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa41e697181baeec7157ff5f0f6ae747a" prot="public" static="no">
        <name>PINUSE_BIT</name>
        <initializer>(SIZE_T_ONE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2257" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8f8153cc167dd042af6840f7130b9721" prot="public" static="no">
        <name>CINUSE_BIT</name>
        <initializer>(SIZE_T_TWO)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2258" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a17fe36f581907d842fa2055e9f462f1e" prot="public" static="no">
        <name>FLAG4_BIT</name>
        <initializer>(SIZE_T_FOUR)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2259" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a80bcec0b805b07f53640caa5a11a513d" prot="public" static="no">
        <name>INUSE_BITS</name>
        <initializer>(PINUSE_BIT|CINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2260" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1adc6adc464a32997a5da502b124c6c8d8" prot="public" static="no">
        <name>FLAG_BITS</name>
        <initializer>(PINUSE_BIT|CINUSE_BIT|FLAG4_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2261" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a14d64540da114c6390ce2501849706bb" prot="public" static="no">
        <name>FENCEPOST_HEAD</name>
        <initializer>(INUSE_BITS|SIZE_T_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2264" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a01d65bf1aca48739daba1789e75731d4" prot="public" static="no">
        <name>cinuse</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head &amp; CINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2267" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a7d865edc2d2e8b7a33b3eb02ee22c2e7" prot="public" static="no">
        <name>pinuse</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head &amp; PINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2268" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a7e839e521ce180dcdde674ddbfdda535" prot="public" static="no">
        <name>flag4inuse</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head &amp; FLAG4_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2269" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a731e3667ac73997bac2c62f9c4478e11" prot="public" static="no">
        <name>is_inuse</name>
        <param><defname>p</defname></param>
        <initializer>(((p)-&gt;head &amp; INUSE_BITS) != PINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2270" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3597aedd2e73f2b6616f82e2838292ec" prot="public" static="no">
        <name>is_mmapped</name>
        <param><defname>p</defname></param>
        <initializer>(((p)-&gt;head &amp; INUSE_BITS) == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2271" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a0bd05b2720a9f79a0c066086c4f7e2fa" prot="public" static="no">
        <name>chunksize</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head &amp; ~(FLAG_BITS))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2273" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad32c3519a274d707cedb0345f2ebf129" prot="public" static="no">
        <name>clear_pinuse</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head &amp;= ~PINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2275" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ab59038f70c8449bc2efdec7d99e1a372" prot="public" static="no">
        <name>set_flag4</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head |= FLAG4_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2276" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa850a392adbf484a1431ad1f959cbfc5" prot="public" static="no">
        <name>clear_flag4</name>
        <param><defname>p</defname></param>
        <initializer>((p)-&gt;head &amp;= ~FLAG4_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2277" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2222e8c19fc975b86342ea505eeed358" prot="public" static="no">
        <name>chunk_plus_offset</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)(((char*)(p)) + (s)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2280" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a26cb551063ab1a46db7bd51be271afdd" prot="public" static="no">
        <name>chunk_minus_offset</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)(((char*)(p)) - (s)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2281" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a891ae6952dcc03f81e75b91666400f51" prot="public" static="no">
        <name>next_chunk</name>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)( ((char*)(p)) + ((p)-&gt;head &amp; ~FLAG_BITS)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2284" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aee72e7631ab6012eb488e4ad9863d431" prot="public" static="no">
        <name>prev_chunk</name>
        <param><defname>p</defname></param>
        <initializer>((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)( ((char*)(p)) - ((p)-&gt;prev_foot) ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2285" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a62c85451d286c94329b31175ff6aa991" prot="public" static="no">
        <name>next_pinuse</name>
        <param><defname>p</defname></param>
        <initializer>((next_chunk(p)-&gt;head) &amp; PINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2288" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a7567ed8861f166c8935e08d92c611bed" prot="public" static="no">
        <name>get_foot</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>(((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)((char*)(p) + (s)))-&gt;prev_foot)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2291" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8429bbf864f878eca1011ec97969535b" prot="public" static="no">
        <name>set_foot</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>(((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)((char*)(p) + (s)))-&gt;prev_foot = (s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2292" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a18bad8f70449009a982f57c6e8107d29" prot="public" static="no">
        <name>set_size_and_pinuse_of_free_chunk</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>((p)-&gt;head = (s|PINUSE_BIT), set_foot(p, s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2295" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4533a463f685015d5b56192fc5f42ba7" prot="public" static="no">
        <name>set_free_with_pinuse</name>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <param><defname>n</defname></param>
        <initializer>(clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2299" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad7d2c199c11feafd3ae7f91aa1ee2c85" prot="public" static="no">
        <name>overhead_for</name>
        <param><defname>p</defname></param>
        <initializer>(is_mmapped(p)? MMAP_CHUNK_OVERHEAD : CHUNK_OVERHEAD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2303" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa961cd887ed571eadb6f6148d0d09e48" prot="public" static="no">
        <name>calloc_must_clear</name>
        <param><defname>p</defname></param>
        <initializer>(!is_mmapped(p))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2308" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a62a561657f44853b51a022b878471921" prot="public" static="no">
        <name>leftmost_child</name>
        <param><defname>t</defname></param>
        <initializer>((t)-&gt;child[0] != 0? (t)-&gt;child[0] : (t)-&gt;child[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2421" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9a31e5267bf40dcb9992d77209c35427" prot="public" static="no">
        <name>is_mmapped_segment</name>
        <param><defname>S</defname></param>
        <initializer>((S)-&gt;sflags &amp; USE_MMAP_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2487" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4c59e261d6424fcb626e521881dde00f" prot="public" static="no">
        <name>is_extern_segment</name>
        <param><defname>S</defname></param>
        <initializer>((S)-&gt;sflags &amp; EXTERN_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2488" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afe898942dfe9b3557981d0dc935fddde" prot="public" static="no">
        <name>NSMALLBINS</name>
        <initializer>(32U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2581" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a187fe34f71c63b486f6d79ac51117061" prot="public" static="no">
        <name>NTREEBINS</name>
        <initializer>(32U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2582" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a35c7b74e5fe8c45a869115cc6e154fe9" prot="public" static="no">
        <name>SMALLBIN_SHIFT</name>
        <initializer>(3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2583" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a033008a0cb72328dd6ced48e7f639874" prot="public" static="no">
        <name>SMALLBIN_WIDTH</name>
        <initializer>(SIZE_T_ONE &lt;&lt; SMALLBIN_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2584" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a84cfe33e7f07c4b874fe1a82ba327c2e" prot="public" static="no">
        <name>TREEBIN_SHIFT</name>
        <initializer>(8U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2585" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac7cc8b0e715687eccf92f4bd1528b129" prot="public" static="no">
        <name>MIN_LARGE_SIZE</name>
        <initializer>(SIZE_T_ONE &lt;&lt; TREEBIN_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2586" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a5f1a8ee1b6c92973fc7fd9d8603b709d" prot="public" static="no">
        <name>MAX_SMALL_SIZE</name>
        <initializer>(MIN_LARGE_SIZE - SIZE_T_ONE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2587" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a74e041ce14d5a19644a4ada6ba9584dc" prot="public" static="no">
        <name>MAX_SMALL_REQUEST</name>
        <initializer>(MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2588" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2588" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3344f5638240b82a2128c71d6073a9b3" prot="public" static="no">
        <name>ensure_initialization</name>
        <param></param>
        <initializer>(void)(mparams.magic != 0 || init_mparams())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2638" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2638" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8223ecd78e9937dc1fc43a49deec1554" prot="public" static="no">
        <name>gm</name>
        <initializer>(&amp;_gm_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2644" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1abf6941f282e0b4e708de251c482eaeed" prot="public" static="no">
        <name>is_global</name>
        <param><defname>M</defname></param>
        <initializer>((M) == &amp;_gm_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2645" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2645" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1af3b001bbc18e175f99b0c8644d63dd4d" prot="public" static="no">
        <name>is_initialized</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;top != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2649" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2649" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a7c7ff8add3d9f12d4af529f9f43d7644" prot="public" static="no">
        <name>use_lock</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags &amp;   USE_LOCK_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2655" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2655" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa7eff565061029c1af31eecb25dca0be" prot="public" static="no">
        <name>enable_lock</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags |=  USE_LOCK_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2656" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a349dcd06c8dcf826a592f4d9a7b2949c" prot="public" static="no">
        <name>disable_lock</name>
        <param><defname>M</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2660" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1acab9406dcc7caedf7a63038e271d45a5" prot="public" static="no">
        <name>use_mmap</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags &amp;   USE_MMAP_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2663" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2f290b320a0eac1ac56491a51cbed8df" prot="public" static="no">
        <name>enable_mmap</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags |=  USE_MMAP_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2664" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a73914fa402851f1661c5f8026003be64" prot="public" static="no">
        <name>disable_mmap</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags &amp;= ~USE_MMAP_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2666" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6cbe613595e5001cbb1b85de17ce1c27" prot="public" static="no">
        <name>use_noncontiguous</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags &amp;   USE_NONCONTIGUOUS_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2671" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1c844cd4da4c0805c2b2e8424513f1fd" prot="public" static="no">
        <name>disable_contiguous</name>
        <param><defname>M</defname></param>
        <initializer>((M)-&gt;mflags |=  USE_NONCONTIGUOUS_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2672" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aae06e664473337b87ba3d95609fef288" prot="public" static="no">
        <name>set_lock</name>
        <param><defname>M</defname></param>
        <param><defname>L</defname></param>
        <initializer>((M)-&gt;mflags = (L)?\
  ((M)-&gt;mflags | USE_LOCK_BIT) :\
  ((M)-&gt;mflags &amp; ~USE_LOCK_BIT))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2674" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a26099b7c631584ea0a7df48d5663b316" prot="public" static="no">
        <name>page_align</name>
        <param><defname>S</defname></param>
        <initializer>(((S) + (mparams.page_size - SIZE_T_ONE)) &amp; ~(mparams.page_size - SIZE_T_ONE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2680" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a47800d7a9fdf871d0afdce3d5cd3af50" prot="public" static="no">
        <name>granularity_align</name>
        <param><defname>S</defname></param>
        <initializer>(((S) + (mparams.granularity - SIZE_T_ONE))\
   &amp; ~(mparams.granularity - SIZE_T_ONE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2684" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac00dfdac316c41741d390ec3a5616fff" prot="public" static="no">
        <name>mmap_align</name>
        <param><defname>S</defname></param>
        <initializer>page_align(S)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2693" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac40b2081de834d5d7e140d79592cd4df" prot="public" static="no">
        <name>SYS_ALLOC_PADDING</name>
        <initializer>(TOP_FOOT_SIZE + MALLOC_ALIGNMENT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2697" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a07ca81810ed532d2c932a26984f16fcd" prot="public" static="no">
        <name>is_page_aligned</name>
        <param><defname>S</defname></param>
        <initializer>(((size_t)(S) &amp; (mparams.page_size - SIZE_T_ONE)) == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2699" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aef1cfe43fae84cc03ab977f8512f0a11" prot="public" static="no">
        <name>is_granularity_aligned</name>
        <param><defname>S</defname></param>
        <initializer>(((size_t)(S) &amp; (mparams.granularity - SIZE_T_ONE)) == 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2701" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3616a6ae475e54f73816dfa69d1483e8" prot="public" static="no">
        <name>segment_holds</name>
        <param><defname>S</defname></param>
        <param><defname>A</defname></param>
        <initializer>((char*)(A) &gt;= S-&gt;base &amp;&amp; (char*)(A) &lt; S-&gt;base + S-&gt;size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2705" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8fcca0fe7fd7176c642cb7eaca01e3c8" prot="public" static="no">
        <name>should_trim</name>
        <param><defname>M</defname></param>
        <param><defname>s</defname></param>
        <initializer>((s) &gt; (M)-&gt;trim_check)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2731" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3b8c23c29e153672fb62406384791948" prot="public" static="no">
        <name>TOP_FOOT_SIZE</name>
        <initializer>(align_offset(chunk2mem(0))+pad_request(sizeof(struct <ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref>))+MIN_CHUNK_SIZE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2741" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9abf67cb3bc9027f0b44bab676e05f09" prot="public" static="no">
        <name>PREACTION</name>
        <param><defname>M</defname></param>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2759" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2759" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a8c176fdaf0d14b883ba250c8a569b88e" prot="public" static="no">
        <name>POSTACTION</name>
        <param><defname>M</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2763" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1acb20d711da475d4c59ef88569579b4d4" prot="public" static="no">
        <name>CORRUPTION_ERROR_ACTION</name>
        <param><defname>m</defname></param>
        <initializer>ABORT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2790" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ab207e868102874ef0dee095572e35597" prot="public" static="no">
        <name>USAGE_ERROR_ACTION</name>
        <param><defname>m</defname></param>
        <param><defname>p</defname></param>
        <initializer>ABORT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2794" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2794" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4ee253420495ac1a115acad3a7e2045c" prot="public" static="no">
        <name>check_free_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2804" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4a10639890e0474f257429c8aec650bb" prot="public" static="no">
        <name>check_inuse_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2805" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae26652400ab077acf28998ca58aa7bf1" prot="public" static="no">
        <name>check_malloced_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <param><defname>N</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2806" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2806" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ab4a8a939c748e7bf809ebf9cde15f974" prot="public" static="no">
        <name>check_mmapped_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2807" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afa00ceb10e333a5edffe0c4a429207b0" prot="public" static="no">
        <name>check_malloc_state</name>
        <param><defname>M</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2808" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9da830f14086f890cc55fc4172a02eb6" prot="public" static="no">
        <name>check_top_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2809" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aadc2cdd1444477c387fc30e64f061432" prot="public" static="no">
        <name>is_small</name>
        <param><defname>s</defname></param>
        <initializer>(((s) &gt;&gt; SMALLBIN_SHIFT) &lt; NSMALLBINS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2835" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1f3d4249e522c896509b7999860090ea" prot="public" static="no">
        <name>small_index</name>
        <param><defname>s</defname></param>
        <initializer>(bindex_t)((s)  &gt;&gt; SMALLBIN_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2836" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a377939ca061c1b170053c2927af26cdc" prot="public" static="no">
        <name>small_index2size</name>
        <param><defname>i</defname></param>
        <initializer>((i)  &lt;&lt; SMALLBIN_SHIFT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2837" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a06f22f4c7be02a90000e46f2e7eb873b" prot="public" static="no">
        <name>MIN_SMALL_INDEX</name>
        <initializer>(small_index(MIN_CHUNK_SIZE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2838" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a862c7dc1f319911e1f06b9d99485cc54" prot="public" static="no">
        <name>smallbin_at</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((<ref refid="structmalloc__chunk" kindref="compound">sbinptr</ref>)((char*)&amp;((M)-&gt;smallbins[(i)&lt;&lt;1])))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2841" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a9890e7becae3c880548653acb11ef261" prot="public" static="no">
        <name>treebin_at</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>(&amp;((M)-&gt;treebins[i]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2842" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a057276ef94e26754cae354fd9f56bcef" prot="public" static="no">
        <name>compute_tree_index</name>
        <param><defname>S</defname></param>
        <param><defname>I</defname></param>
        <initializer>{\
  size_t X = S &gt;&gt; TREEBIN_SHIFT;\
  if (X == 0)\
    I = 0;\
  else if (X &gt; 0xFFFF)\
    I = NTREEBINS-1;\
  else {\
    unsigned int Y = (unsigned int)X;\
    unsigned int N = ((Y - 0x100) &gt;&gt; 16) &amp; 8;\
    unsigned int K = (((Y &lt;&lt;= N) - 0x1000) &gt;&gt; 16) &amp; 4;\
    N += K;\
    N += K = (((Y &lt;&lt;= K) - 0x4000) &gt;&gt; 16) &amp; 2;\
    K = 14 - N + ((Y &lt;&lt;= K) &gt;&gt; 15);\
    I = (K &lt;&lt; 1) + ((S &gt;&gt; (K + (TREEBIN_SHIFT-1)) &amp; 1));\
  }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2889" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1add9cdad127078283b5143927a1610427" prot="public" static="no">
        <name>bit_for_tree_index</name>
        <param><defname>i</defname></param>
        <initializer>(i == NTREEBINS-1)? (SIZE_T_BITSIZE-1) : (((i) &gt;&gt; 1) + TREEBIN_SHIFT - 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2909" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2909" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a64356087190cdd50fc15488628a603ce" prot="public" static="no">
        <name>leftshift_for_tree_index</name>
        <param><defname>i</defname></param>
        <initializer>((i == NTREEBINS-1)? 0 : \
    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) &gt;&gt; 1) + TREEBIN_SHIFT - 2)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2913" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2913" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a5ab894e6672002a76fde663e4abda3bc" prot="public" static="no">
        <name>minsize_for_tree_index</name>
        <param><defname>i</defname></param>
        <initializer>((SIZE_T_ONE &lt;&lt; (((i) &gt;&gt; 1) + TREEBIN_SHIFT)) |  \
   (((size_t)((i) &amp; SIZE_T_ONE)) &lt;&lt; (((i) &gt;&gt; 1) + TREEBIN_SHIFT - 1)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2918" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aef388580685989725034bdcb7c5543bf" prot="public" static="no">
        <name>idx2bit</name>
        <param><defname>i</defname></param>
        <initializer>((binmap_t)(1) &lt;&lt; (i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2926" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1add2106bac689c78a86e8dc2b7ba9e533" prot="public" static="no">
        <name>mark_smallmap</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((M)-&gt;smallmap |=  idx2bit(i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2929" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a5429f913012abf9059d0bd93940c9e0e" prot="public" static="no">
        <name>clear_smallmap</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((M)-&gt;smallmap &amp;= ~idx2bit(i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2930" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a545357ca2a355288874c27ea94eca166" prot="public" static="no">
        <name>smallmap_is_marked</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((M)-&gt;smallmap &amp;   idx2bit(i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2931" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2931" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aa4cee82f9e5d26a5118b2e743c7fd1a2" prot="public" static="no">
        <name>mark_treemap</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((M)-&gt;treemap  |=  idx2bit(i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2933" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2933" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6c003dab5a3337bde0315d6a58c1a9cd" prot="public" static="no">
        <name>clear_treemap</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((M)-&gt;treemap  &amp;= ~idx2bit(i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2934" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a0a5f672f882ef6645bcc97b6d0e30d7d" prot="public" static="no">
        <name>treemap_is_marked</name>
        <param><defname>M</defname></param>
        <param><defname>i</defname></param>
        <initializer>((M)-&gt;treemap  &amp;   idx2bit(i))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2935" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2935" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a63b9c45d67753a9da2be543ca879c261" prot="public" static="no">
        <name>least_bit</name>
        <param><defname>x</defname></param>
        <initializer>((x) &amp; -(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2938" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2938" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a24d6f7ffb2d8e91878f8b6c06b803c5e" prot="public" static="no">
        <name>left_bits</name>
        <param><defname>x</defname></param>
        <initializer>((x&lt;&lt;1) | -(x&lt;&lt;1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2941" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ace4a96b1b78fcc4d93372fb9336f899f" prot="public" static="no">
        <name>same_or_left_bits</name>
        <param><defname>x</defname></param>
        <initializer>((x) | -(x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2944" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2944" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac8199000024d5b45dbf79400df381dfc" prot="public" static="no">
        <name>compute_bit2idx</name>
        <param><defname>X</defname></param>
        <param><defname>I</defname></param>
        <initializer>{\
  unsigned int Y = X - 1;\
  unsigned int K = Y &gt;&gt; (16-4) &amp; 16;\
  unsigned int N = K;        Y &gt;&gt;= K;\
  N += K = Y &gt;&gt; (8-3) &amp;  8;  Y &gt;&gt;= K;\
  N += K = Y &gt;&gt; (4-2) &amp;  4;  Y &gt;&gt;= K;\
  N += K = Y &gt;&gt; (2-1) &amp;  2;  Y &gt;&gt;= K;\
  N += K = Y &gt;&gt; (1-0) &amp;  1;  Y &gt;&gt;= K;\
  I = (bindex_t)(N + Y);\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2976" column="10" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2976" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a162ea143ef987e2bc98d5e4b69f7bff6" prot="public" static="no">
        <name>ok_address</name>
        <param><defname>M</defname></param>
        <param><defname>a</defname></param>
        <initializer>((char*)(a) &gt;= (M)-&gt;least_addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3020" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3020" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a57b2c8e49aeb87c3cb1922648ef9ad3c" prot="public" static="no">
        <name>ok_next</name>
        <param><defname>p</defname></param>
        <param><defname>n</defname></param>
        <initializer>((char*)(p) &lt; (char*)(n))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3022" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3022" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a27bd04a29396a4164edab26cb11e543c" prot="public" static="no">
        <name>ok_inuse</name>
        <param><defname>p</defname></param>
        <initializer>is_inuse(p)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3024" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3024" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aded4345a9d79e45d438506d86f550cd6" prot="public" static="no">
        <name>ok_pinuse</name>
        <param><defname>p</defname></param>
        <initializer>pinuse(p)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3026" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3026" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a92a34445b3f1e6050ad4ffb2f6dd8297" prot="public" static="no">
        <name>ok_magic</name>
        <param><defname>M</defname></param>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3039" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1afe7e6535ba41a91be580eb2bba5890e2" prot="public" static="no">
        <name>RTCHECK</name>
        <param><defname>e</defname></param>
        <initializer>(e)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3047" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ae33f10cb02fb28aa399e3a7ff644a3a6" prot="public" static="no">
        <name>mark_inuse_foot</name>
        <param><defname>M</defname></param>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3057" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1e4f613ffb89c72f5686586939b13cf6" prot="public" static="no">
        <name>set_inuse</name>
        <param><defname>M</defname></param>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>((p)-&gt;head = (((p)-&gt;head &amp; PINUSE_BIT)|s|CINUSE_BIT),\
  ((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)(((char*)(p)) + (s)))-&gt;head |= PINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3062" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6b0498b45088d3b87e6b2daed2f6fa92" prot="public" static="no">
        <name>set_inuse_and_pinuse</name>
        <param><defname>M</defname></param>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>((p)-&gt;head = (s|PINUSE_BIT|CINUSE_BIT),\
  ((<ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>)(((char*)(p)) + (s)))-&gt;head |= PINUSE_BIT)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3067" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a076ff214648e7d19ddaa7a4d963aae4a" prot="public" static="no">
        <name>set_size_and_pinuse_of_inuse_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>p</defname></param>
        <param><defname>s</defname></param>
        <initializer>((p)-&gt;head = (s|PINUSE_BIT|CINUSE_BIT))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3072" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3072" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1adb28fc94857fe6fd0d13a790c1866284" prot="public" static="no">
        <name>insert_small_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <param><defname>S</defname></param>
        <initializer>{\
  bindex_t I  = small_index(S);\
  <ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref> B = smallbin_at(M, I);\
  <ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref> F = B;\
  assert(S &gt;= MIN_CHUNK_SIZE);\
  if (!smallmap_is_marked(M, I))\
    mark_smallmap(M, I);\
  else if (RTCHECK(ok_address(M, B-&gt;fd)))\
    F = B-&gt;fd;\
  else {\
    CORRUPTION_ERROR_ACTION(M);\
  }\
  B-&gt;fd = P;\
  F-&gt;bk = P;\
  P-&gt;fd = F;\
  P-&gt;bk = B;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3578" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a6681f6fb034ce0fcee30f1df143fcefc" prot="public" static="no">
        <name>unlink_small_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <param><defname>S</defname></param>
        <initializer>{\
  <ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref> F = P-&gt;fd;\
  <ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref> B = P-&gt;bk;\
  bindex_t I = small_index(S);\
  assert(P != B);\
  assert(P != F);\
  assert(chunksize(P) == small_index2size(I));\
  if (RTCHECK(F == smallbin_at(M,I) || (ok_address(M, F) &amp;&amp; F-&gt;bk == P))) { \
    if (B == F) {\
      clear_smallmap(M, I);\
    }\
    else if (RTCHECK(B == smallbin_at(M,I) ||\
                     (ok_address(M, B) &amp;&amp; B-&gt;fd == P))) {\
      F-&gt;bk = B;\
      B-&gt;fd = F;\
    }\
    else {\
      CORRUPTION_ERROR_ACTION(M);\
    }\
  }\
  else {\
    CORRUPTION_ERROR_ACTION(M);\
  }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3597" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a4710edd84badb715ced379a5a7000b61" prot="public" static="no">
        <name>unlink_first_small_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>B</defname></param>
        <param><defname>P</defname></param>
        <param><defname>I</defname></param>
        <initializer>{\
  <ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref> F = P-&gt;fd;\
  assert(P != B);\
  assert(P != F);\
  assert(chunksize(P) == small_index2size(I));\
  if (B == F) {\
    clear_smallmap(M, I);\
  }\
  else if (RTCHECK(ok_address(M, F) &amp;&amp; F-&gt;bk == P)) {\
    F-&gt;bk = B;\
    B-&gt;fd = F;\
  }\
  else {\
    CORRUPTION_ERROR_ACTION(M);\
  }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3623" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a374c640361e6a18551c63f548079ad05" prot="public" static="no">
        <name>replace_dv</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <param><defname>S</defname></param>
        <initializer>{\
  size_t DVS = M-&gt;dvsize;\
  assert(is_small(DVS));\
  if (DVS != 0) {\
    <ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref> DV = M-&gt;dv;\
    insert_small_chunk(M, DV, DVS);\
  }\
  M-&gt;dvsize = S;\
  M-&gt;dv = P;\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3642" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ac38ba865e6c3bf916fcdcb6bfa8be00d" prot="public" static="no">
        <name>insert_large_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>X</defname></param>
        <param><defname>S</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3656" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3656" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a2af36a6897c8bac0fd68a329cf3b43c9" prot="public" static="no">
        <name>unlink_large_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>X</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3724" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1aec697f44cce422498bc01b7c19114b5a" prot="public" static="no">
        <name>insert_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <param><defname>S</defname></param>
        <initializer>if (is_small(S)) insert_small_chunk(M, P, S)\
  else { <ref refid="structmalloc__tree__chunk" kindref="compound">tchunkptr</ref> TP = (<ref refid="structmalloc__tree__chunk" kindref="compound">tchunkptr</ref>)(P); insert_large_chunk(M, TP, S); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3797" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1ad3e9aeaeefa7e2fc61f84cafffc6a13a" prot="public" static="no">
        <name>unlink_chunk</name>
        <param><defname>M</defname></param>
        <param><defname>P</defname></param>
        <param><defname>S</defname></param>
        <initializer>if (is_small(S)) unlink_small_chunk(M, P, S)\
  else { <ref refid="structmalloc__tree__chunk" kindref="compound">tchunkptr</ref> TP = (<ref refid="structmalloc__tree__chunk" kindref="compound">tchunkptr</ref>)(P); unlink_large_chunk(M, TP); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3801" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a5444a4a9f6894b7afd5d0a461a7cdb02" prot="public" static="no">
        <name>internal_malloc</name>
        <param><defname>m</defname></param>
        <param><defname>b</defname></param>
        <initializer>dlmalloc(b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3818" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a1f1a36ca1107db0b1d82c07db766e29c" prot="public" static="no">
        <name>internal_free</name>
        <param><defname>m</defname></param>
        <param><defname>mem</defname></param>
        <initializer>dlfree(mem)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3819" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3819" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="malloc_8c_1a3615cd1bfae88d6e9fbf531d1259a3a6" prot="public" static="no">
        <name>fm</name>
        <initializer>gm</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4706" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="malloc_8c_1a6412caf3aa493b17e390b53cef6fcca7" prot="public" static="no">
        <type>struct <ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref></type>
        <definition>typedef struct malloc_chunk mchunk</definition>
        <argsstring></argsstring>
        <name>mchunk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1666" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1aab2c188a259d6c4bd443ed712a92714c" prot="public" static="no">
        <type>struct <ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref> *</type>
        <definition>typedef struct malloc_chunk* mchunkptr</definition>
        <argsstring></argsstring>
        <name>mchunkptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2203" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1ac42f888c90017483ad23708b9a346798" prot="public" static="no">
        <type>struct <ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref> *</type>
        <definition>typedef struct malloc_chunk* sbinptr</definition>
        <argsstring></argsstring>
        <name>sbinptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2204" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1a4c04048d19db75c080e5f0ab19d45f8f" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int bindex_t</definition>
        <argsstring></argsstring>
        <name>bindex_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2205" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1a2714ff4b4994bc59cce3c3dce1e60c27" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int binmap_t</definition>
        <argsstring></argsstring>
        <name>binmap_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2206" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1a98d45780d5103f1a6b54a549a3d12de2" prot="public" static="no">
        <type>unsigned int</type>
        <definition>typedef unsigned int flag_t</definition>
        <argsstring></argsstring>
        <name>flag_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2207" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1a1639705241e61df2983f58d6a2e15d5f" prot="public" static="no">
        <type>struct <ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref></type>
        <definition>typedef struct malloc_tree_chunk tchunk</definition>
        <argsstring></argsstring>
        <name>tchunk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2207" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1addd456ccc8fb838310e92a3f394fc1b1" prot="public" static="no">
        <type>struct <ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref> *</type>
        <definition>typedef struct malloc_tree_chunk* tchunkptr</definition>
        <argsstring></argsstring>
        <name>tchunkptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2417" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1a1a975f80818075b2e6dc1e778144d14a" prot="public" static="no">
        <type>struct <ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref> *</type>
        <definition>typedef struct malloc_tree_chunk* tbinptr</definition>
        <argsstring></argsstring>
        <name>tbinptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2418" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1aefb4243356502f3504318b435638ba57" prot="public" static="no">
        <type>struct <ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref></type>
        <definition>typedef struct malloc_segment msegment</definition>
        <argsstring></argsstring>
        <name>msegment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2418" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1ac0c775e46c84cccbf60059dedd717fa5" prot="public" static="no">
        <type>struct <ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref> *</type>
        <definition>typedef struct malloc_segment* msegmentptr</definition>
        <argsstring></argsstring>
        <name>msegmentptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2491" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="malloc_8c_1a77915996ce21724eda56ab99e2ce75e6" prot="public" static="no">
        <type>struct <ref refid="structmalloc__state" kindref="compound">malloc_state</ref> *</type>
        <definition>typedef struct malloc_state* mstate</definition>
        <argsstring></argsstring>
        <name>mstate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2615" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2615" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="malloc_8c_1aaff348c79e9c75716b227ad57c6ad45d" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int dev_zero_fd</definition>
        <argsstring></argsstring>
        <name>dev_zero_fd</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1666" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="1666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="malloc_8c_1ad910263e0987f4a44f28558c7a83d495" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structmalloc__params" kindref="compound">malloc_params</ref></type>
        <definition>struct malloc_params mparams</definition>
        <argsstring></argsstring>
        <name>mparams</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2615" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="malloc_8c_1a6210dbc9273f3fc1866d4c0394965fd9" prot="public" static="yes" mutable="no">
        <type>struct <ref refid="structmalloc__state" kindref="compound">malloc_state</ref></type>
        <definition>struct malloc_state _gm_</definition>
        <argsstring></argsstring>
        <name>_gm_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2615" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2643" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="malloc_8c_1a65b26e79e1c83ee0cdd1b80d365a0da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _sbrk</definition>
        <argsstring>(unsigned int size)</argsstring>
        <name>_sbrk</name>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocating Memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="527" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/embARC_sbrk.c" bodystart="53" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a018ffd885ac72f4cb8ac0f972f6b4900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlmalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlmalloc</name>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="867" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4552" bodyend="4686"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a1b80f9ee2d497077e4741029c8e23700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void</type>
        <definition>void dlfree</definition>
        <argsstring>(void *)</argsstring>
        <name>dlfree</name>
        <param>
          <type>void *</type>
          <defname>mem</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="876" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4690" bodyend="4797"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a557252c43fb14a209ead0e6dfe6216ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlcalloc</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>dlcalloc</name>
        <param>
          <type>size_t</type>
          <defname>n_elements</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>elem_size</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="883" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4799" bodyend="4812"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a79e7e77bbc6d5208678b007bf89aab61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlrealloc</definition>
        <argsstring>(void *, size_t)</argsstring>
        <name>dlrealloc</name>
        <param>
          <type>void *</type>
          <defname>oldmem</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="907" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5193" bodyend="5236"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1afc9bc229eecc960b0c2bfd9033b6e2e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlrealloc_in_place</definition>
        <argsstring>(void *, size_t)</argsstring>
        <name>dlrealloc_in_place</name>
        <param>
          <type>void *</type>
          <defname>oldmem</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="922" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5238" bodyend="5267"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a789f1726140c8d0ef5b54d893d806262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlmemalign</definition>
        <argsstring>(size_t, size_t)</argsstring>
        <name>dlmemalign</name>
        <param>
          <type>size_t</type>
          <defname>alignment</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="936" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5269" bodyend="5274"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a61f04155b5dceea889ba3cef64968684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT int</type>
        <definition>int dlposix_memalign</definition>
        <argsstring>(void **, size_t, size_t)</argsstring>
        <name>dlposix_memalign</name>
        <param>
          <type>void **</type>
          <defname>pp</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>alignment</defname>
        </param>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="946" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5276" bodyend="5297"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ab3764c29825f2f5caf6bb138e6f2dc12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlvalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlvalloc</name>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="953" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5299" bodyend="5304"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a5fa93d3a16f6cd853ca26b8796112770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT int</type>
        <definition>int dlmallopt</definition>
        <argsstring>(int, int)</argsstring>
        <name>dlmallopt</name>
        <param>
          <type>int</type>
          <defname>param_number</defname>
        </param>
        <param>
          <type>int</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="977" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5388" bodyend="5390"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ab254fd19d67cb42c54cb0d236a80bb0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT size_t</type>
        <definition>size_t dlmalloc_footprint</definition>
        <argsstring>(void)</argsstring>
        <name>dlmalloc_footprint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="988" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5352" bodyend="5354"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ae1ee334e0195d500922cec58609742b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT size_t</type>
        <definition>size_t dlmalloc_max_footprint</definition>
        <argsstring>(void)</argsstring>
        <name>dlmalloc_max_footprint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1001" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5356" bodyend="5358"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a35d74f85968f17004cd74d86421bd38e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT size_t</type>
        <definition>size_t dlmalloc_footprint_limit</definition>
        <argsstring>()</argsstring>
        <name>dlmalloc_footprint_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1012" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5360" bodyend="5363"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ae992d2a6834aeddac341b4ff6afba5b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT size_t</type>
        <definition>size_t dlmalloc_set_footprint_limit</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>dlmalloc_set_footprint_limit</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1026" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5365" bodyend="5374"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a60d26bed6f1edc458e3cf14ffd670e02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT struct <ref refid="structmallinfo" kindref="compound">mallinfo</ref></type>
        <definition>struct mallinfo dlmallinfo</definition>
        <argsstring>(void)</argsstring>
        <name>dlmallinfo</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1085" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5377" bodyend="5379"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ae695a06de23f6a235bf86d5c26a3a2f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void **</type>
        <definition>DLMALLOC_EXPORT void** dlindependent_calloc</definition>
        <argsstring>(size_t, size_t, void **)</argsstring>
        <name>dlindependent_calloc</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ae7625f77e93d2ab23ff7fb0215dd1eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void **</type>
        <definition>DLMALLOC_EXPORT void** dlindependent_comalloc</definition>
        <argsstring>(size_t, size_t *, void **)</argsstring>
        <name>dlindependent_comalloc</name>
        <param>
          <type>size_t</type>
        </param>
        <param>
          <type>size_t *</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a23be60f836a753261abb7405344df378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT size_t</type>
        <definition>DLMALLOC_EXPORT size_t dlbulk_free</definition>
        <argsstring>(void **, size_t n_elements)</argsstring>
        <name>dlbulk_free</name>
        <param>
          <type>void **</type>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ade3c6d7e2b557fe3af01a7f6979e9396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void *</type>
        <definition>void * dlpvalloc</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlpvalloc</name>
        <param>
          <type>size_t</type>
          <defname>bytes</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1213" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5306" bodyend="5311"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a0cb0780a1d244f7541f85d2ece3999fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT int</type>
        <definition>int dlmalloc_trim</definition>
        <argsstring>(size_t)</argsstring>
        <name>dlmalloc_trim</name>
        <param>
          <type>size_t</type>
          <defname>pad</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1236" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5342" bodyend="5350"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a7a3119e2d540f93ac410bbe64d51ce31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DLMALLOC_EXPORT void</type>
        <definition>DLMALLOC_EXPORT void dlmalloc_stats</definition>
        <argsstring>(void)</argsstring>
        <name>dlmalloc_stats</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a8923af8a1039983906f9617a57022e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dlmalloc_usable_size</definition>
        <argsstring>(void *)</argsstring>
        <name>dlmalloc_usable_size</name>
        <param>
          <type>void *</type>
          <defname>mem</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="1273" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5392" bodyend="5399"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1adc1656892fa59cbd2e3b60a2608dfefc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmalloc__segment" kindref="compound">msegmentptr</ref></type>
        <definition>static msegmentptr segment_holding</definition>
        <argsstring>(mstate m, char *addr)</argsstring>
        <name>segment_holding</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2709" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2709" bodyend="2717"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ab22b9d57eca306724cb8c4f928d0e824" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int has_segment_link</definition>
        <argsstring>(mstate m, msegmentptr ss)</argsstring>
        <name>has_segment_link</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmalloc__segment" kindref="compound">msegmentptr</ref></type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="2720" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="2720" bodyend="2728"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1aaee95454245a8becbb13ef85e5590aed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int init_mparams</definition>
        <argsstring>(void)</argsstring>
        <name>init_mparams</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3110" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3110" bodyend="3197"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a99e26c45fc3b7bd05c627138d0d103fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int change_mparam</definition>
        <argsstring>(int param_number, int value)</argsstring>
        <name>change_mparam</name>
        <param>
          <type>int</type>
          <declname>param_number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3200" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3200" bodyend="3221"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ad8ac5f52dd1f21d88799cfd5befa0b99" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structmallinfo" kindref="compound">mallinfo</ref></type>
        <definition>static struct mallinfo internal_mallinfo</definition>
        <argsstring>(mstate m)</argsstring>
        <name>internal_mallinfo</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3200" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3495" bodyend="3532"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1af720f169cd9332df50dfdd080b548120" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void internal_malloc_stats</definition>
        <argsstring>(mstate m)</argsstring>
        <name>internal_malloc_stats</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3536" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3536" bodyend="3565"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a7fd01599d9d4726f71caf55b03e959ce" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* mmap_alloc</definition>
        <argsstring>(mstate m, size_t nb)</argsstring>
        <name>mmap_alloc</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3834" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3834" bodyend="3863"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a614d873251d4d24875c099b0fdf89c8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref></type>
        <definition>static mchunkptr mmap_resize</definition>
        <argsstring>(mstate m, mchunkptr oldp, size_t nb, int flags)</argsstring>
        <name>mmap_resize</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref></type>
          <declname>oldp</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3866" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3866" bodyend="3898"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a09ce4644252dfd54eb489e77d0adfd20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_top</definition>
        <argsstring>(mstate m, mchunkptr p, size_t psize)</argsstring>
        <name>init_top</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>psize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3904" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3904" bodyend="3916"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a5609388ac4c1fc24595689b52c6698b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void init_bins</definition>
        <argsstring>(mstate m)</argsstring>
        <name>init_bins</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3919" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3919" bodyend="3926"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a79639440a484b16134373be86179551e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* prepend_alloc</definition>
        <argsstring>(mstate m, char *newbase, char *oldbase, size_t nb)</argsstring>
        <name>prepend_alloc</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>newbase</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>oldbase</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3948" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3948" bodyend="3987"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1aecee517bb2a61c5b79a745f3e0b4aa86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void add_segment</definition>
        <argsstring>(mstate m, char *tbase, size_t tsize, flag_t mmapped)</argsstring>
        <name>add_segment</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>tbase</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tsize</declname>
        </param>
        <param>
          <type>flag_t</type>
          <declname>mmapped</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="3990" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="3990" bodyend="4040"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a8bb55b23b1f7e313756913fedf9d3a98" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* sys_alloc</definition>
        <argsstring>(mstate m, size_t nb)</argsstring>
        <name>sys_alloc</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4045" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4045" bodyend="4251"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a949111e5f127c26e3b9f11bf26c8038a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t release_unused_segments</definition>
        <argsstring>(mstate m)</argsstring>
        <name>release_unused_segments</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4256" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4256" bodyend="4301"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a3de256edbbbbd4018cd3563f55ee50ab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int sys_trim</definition>
        <argsstring>(mstate m, size_t pad)</argsstring>
        <name>sys_trim</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4303" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4303" bodyend="4366"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a2d20e33b2d417733503759c0594f882d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void dispose_chunk</definition>
        <argsstring>(mstate m, mchunkptr p, size_t psize)</argsstring>
        <name>dispose_chunk</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>psize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4371" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4371" bodyend="4437"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1abf258db4e259e134cd82ea7f2b0fcdab" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* tmalloc_large</definition>
        <argsstring>(mstate m, size_t nb)</argsstring>
        <name>tmalloc_large</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4442" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4442" bodyend="4510"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a776acc0ff029b46fedaa4945188ffe25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* tmalloc_small</definition>
        <argsstring>(mstate m, size_t nb)</argsstring>
        <name>tmalloc_small</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4513" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4513" bodyend="4548"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1af8adec320537d6e63bc68e76633a1f0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref></type>
        <definition>static mchunkptr try_realloc_chunk</definition>
        <argsstring>(mstate m, mchunkptr p, size_t nb, int can_move)</argsstring>
        <name>try_realloc_chunk</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>can_move</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4819" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4819" bodyend="4896"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1ad58d56198e0e2a3e26692bb2041017f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* internal_memalign</definition>
        <argsstring>(mstate m, size_t alignment, size_t bytes)</argsstring>
        <name>internal_memalign</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4898" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4898" bodyend="4970"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a1eb4663e92a1701e431dace86a5ed287" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>static void** ialloc</definition>
        <argsstring>(mstate m, size_t n_elements, size_t *sizes, int opts, void *chunks[])</argsstring>
        <name>ialloc</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n_elements</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>sizes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opts</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>chunks</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="4979" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="4979" bodyend="5096"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1aa2888b3de06df35c3b18b31b1e15fe8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t internal_bulk_free</definition>
        <argsstring>(mstate m, void *array[], size_t nelem)</argsstring>
        <name>internal_bulk_free</name>
        <param>
          <type><ref refid="structmalloc__state" kindref="compound">mstate</ref></type>
          <declname>m</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>array</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="5105" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5105" bodyend="5145"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a435fb5832028815c1fa843e938590269" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** dlindependent_calloc</definition>
        <argsstring>(size_t n_elements, size_t elem_size, void *chunks[])</argsstring>
        <name>dlindependent_calloc</name>
        <param>
          <type>size_t</type>
          <declname>n_elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elem_size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>chunks</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="5313" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5313" bodyend="5317"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1acd1aa5efe158a3884ea0c8de51efaa6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void **</type>
        <definition>void** dlindependent_comalloc</definition>
        <argsstring>(size_t n_elements, size_t sizes[], void *chunks[])</argsstring>
        <name>dlindependent_comalloc</name>
        <param>
          <type>size_t</type>
          <declname>n_elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizes</declname>
          <array>[]</array>
        </param>
        <param>
          <type>void *</type>
          <declname>chunks</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="5319" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5319" bodyend="5322"/>
      </memberdef>
      <memberdef kind="function" id="malloc_8c_1a8e02204694aaa24ccc23b1cd2c403b7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dlbulk_free</definition>
        <argsstring>(void *array[], size_t nelem)</argsstring>
        <name>dlbulk_free</name>
        <param>
          <type>void *</type>
          <declname>array</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>nelem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" line="5324" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c" bodystart="5324" bodyend="5326"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__GNU__</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>a<sp/>version<sp/>(aka<sp/>dlmalloc)<sp/>of<sp/>malloc/free/realloc<sp/>written<sp/>by</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/>Doug<sp/>Lea<sp/>and<sp/>released<sp/>to<sp/>the<sp/>public<sp/>domain,<sp/>as<sp/>explained<sp/>at</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>http://creativecommons.org/publicdomain/zero/1.0/<sp/>Send<sp/>questions,</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>comments,<sp/>complaints,<sp/>performance<sp/>data,<sp/>etc<sp/>to<sp/>dl@cs.oswego.edu</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>Version<sp/>2.8.6<sp/>Wed<sp/>Aug<sp/>29<sp/>06:57:58<sp/>2012<sp/><sp/>Doug<sp/>Lea</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>Note:<sp/>There<sp/>may<sp/>be<sp/>an<sp/>updated<sp/>version<sp/>of<sp/>this<sp/>malloc<sp/>obtainable<sp/>at</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ftp://gee.cs.oswego.edu/pub/misc/malloc.c</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Check<sp/>before<sp/>installing!</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>Quickstart</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>This<sp/>library<sp/>is<sp/>all<sp/>in<sp/>one<sp/>file<sp/>to<sp/>simplify<sp/>the<sp/>most<sp/>common<sp/>usage:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>ftp<sp/>it,<sp/>compile<sp/>it<sp/>(-O3),<sp/>and<sp/>link<sp/>it<sp/>into<sp/>another<sp/>program.<sp/>All<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>the<sp/>compile-time<sp/>options<sp/>default<sp/>to<sp/>reasonable<sp/>values<sp/>for<sp/>use<sp/>on</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/>most<sp/>platforms.<sp/><sp/>You<sp/>might<sp/>later<sp/>want<sp/>to<sp/>step<sp/>through<sp/>various</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>compile-time<sp/>and<sp/>dynamic<sp/>tuning<sp/>options.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>For<sp/>convenience,<sp/>an<sp/>include<sp/>file<sp/>for<sp/>code<sp/>using<sp/>this<sp/>malloc<sp/>is<sp/>at:</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>ftp://gee.cs.oswego.edu/pub/misc/malloc-2.8.6.h</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>You<sp/>don&apos;t<sp/>really<sp/>need<sp/>this<sp/>.h<sp/>file<sp/>unless<sp/>you<sp/>call<sp/>functions<sp/>not</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>defined<sp/>in<sp/>your<sp/>system<sp/>include<sp/>files.<sp/><sp/>The<sp/>.h<sp/>file<sp/>contains<sp/>only<sp/>the</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>excerpts<sp/>from<sp/>this<sp/>file<sp/>needed<sp/>for<sp/>using<sp/>this<sp/>malloc<sp/>on<sp/>ANSI<sp/>C/C++</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>systems,<sp/>so<sp/>long<sp/>as<sp/>you<sp/>haven&apos;t<sp/>changed<sp/>compile-time<sp/>options<sp/>about</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/>naming<sp/>and<sp/>tuning<sp/>parameters.<sp/><sp/>If<sp/>you<sp/>do,<sp/>then<sp/>you<sp/>can<sp/>create<sp/>your</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/>own<sp/>malloc.h<sp/>that<sp/>does<sp/>include<sp/>all<sp/>settings<sp/>by<sp/>cutting<sp/>at<sp/>the<sp/>point</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/>indicated<sp/>below.<sp/>Note<sp/>that<sp/>you<sp/>may<sp/>already<sp/>by<sp/>default<sp/>be<sp/>using<sp/>a<sp/>C</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/>library<sp/>containing<sp/>a<sp/>malloc<sp/>that<sp/>is<sp/>based<sp/>on<sp/>some<sp/>version<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/>malloc<sp/>(for<sp/>example<sp/>in<sp/>linux).<sp/>You<sp/>might<sp/>still<sp/>want<sp/>to<sp/>use<sp/>the<sp/>one</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>in<sp/>this<sp/>file<sp/>to<sp/>customize<sp/>settings<sp/>or<sp/>to<sp/>avoid<sp/>overheads<sp/>associated</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>with<sp/>library<sp/>versions.</highlight></codeline>
<codeline lineno="34"><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment">*<sp/>Vital<sp/>statistics:</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>Supported<sp/>pointer/size_t<sp/>representation:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>4<sp/>or<sp/>8<sp/>bytes</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>MUST<sp/>be<sp/>an<sp/>unsigned<sp/>type<sp/>of<sp/>the<sp/>same<sp/>width<sp/>as</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointers.<sp/>(If<sp/>you<sp/>are<sp/>using<sp/>an<sp/>ancient<sp/>system<sp/>that<sp/>declares</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>as<sp/>a<sp/>signed<sp/>type,<sp/>or<sp/>need<sp/>it<sp/>to<sp/>be<sp/>a<sp/>different<sp/>width</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>than<sp/>pointers,<sp/>you<sp/>can<sp/>use<sp/>a<sp/>previous<sp/>release<sp/>of<sp/>this<sp/>malloc</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(e.g.<sp/>2.7.2)<sp/>supporting<sp/>these.)</highlight></codeline>
<codeline lineno="43"><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>Alignment:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>bytes<sp/>(minimum)</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>suffices<sp/>for<sp/>nearly<sp/>all<sp/>current<sp/>machines<sp/>and<sp/>C<sp/>compilers.</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>However,<sp/>you<sp/>can<sp/>define<sp/>MALLOC_ALIGNMENT<sp/>to<sp/>be<sp/>wider<sp/>than<sp/>this</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>necessary<sp/>(up<sp/>to<sp/>128bytes),<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>using<sp/>more<sp/>space.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>Minimum<sp/>overhead<sp/>per<sp/>allocated<sp/>chunk:<sp/><sp/><sp/>4<sp/>or<sp/><sp/>8<sp/>bytes<sp/>(if<sp/>4byte<sp/>sizes)</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/>or<sp/>16<sp/>bytes<sp/>(if<sp/>8byte<sp/>sizes)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Each<sp/>malloced<sp/>chunk<sp/>has<sp/>a<sp/>hidden<sp/>word<sp/>of<sp/>overhead<sp/>holding<sp/>size</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>status<sp/>information,<sp/>and<sp/>additional<sp/>cross-check<sp/>word</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>FOOTERS<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>Minimum<sp/>allocated<sp/>size:<sp/>4-byte<sp/>ptrs:<sp/><sp/>16<sp/>bytes<sp/><sp/><sp/><sp/>(including<sp/>overhead)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8-byte<sp/>ptrs:<sp/><sp/>32<sp/>bytes<sp/><sp/><sp/><sp/>(including<sp/>overhead)</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Even<sp/>a<sp/>request<sp/>for<sp/>zero<sp/>bytes<sp/>(i.e.,<sp/>malloc(0))<sp/>returns<sp/>a</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>something<sp/>of<sp/>the<sp/>minimum<sp/>allocatable<sp/>size.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>overhead<sp/>wastage<sp/>(i.e.,<sp/>number<sp/>of<sp/>extra<sp/>bytes</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>than<sp/>were<sp/>requested<sp/>in<sp/>malloc)<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>minimum<sp/>size,<sp/>except<sp/>for<sp/>requests<sp/>&gt;=<sp/>mmap_threshold<sp/>that</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>serviced<sp/>via<sp/>mmap(),<sp/>where<sp/>the<sp/>worst<sp/>case<sp/>wastage<sp/>is<sp/>about</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32<sp/>bytes<sp/>plus<sp/>the<sp/>remainder<sp/>from<sp/>a<sp/>system<sp/>page<sp/>(the<sp/>minimal</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmap<sp/>unit);<sp/>typically<sp/>4096<sp/>or<sp/>8192<sp/>bytes.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>Security:<sp/>static-safe;<sp/>optionally<sp/>more<sp/>or<sp/>less</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>&quot;security&quot;<sp/>of<sp/>malloc<sp/>refers<sp/>to<sp/>the<sp/>ability<sp/>of<sp/>malicious</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code<sp/>to<sp/>accentuate<sp/>the<sp/>effects<sp/>of<sp/>errors<sp/>(for<sp/>example,<sp/>freeing</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>that<sp/>is<sp/>not<sp/>currently<sp/>malloc&apos;ed<sp/>or<sp/>overwriting<sp/>past<sp/>the</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ends<sp/>of<sp/>chunks)<sp/>in<sp/>code<sp/>that<sp/>calls<sp/>malloc.<sp/><sp/>This<sp/>malloc</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>guarantees<sp/>not<sp/>to<sp/>modify<sp/>any<sp/>memory<sp/>locations<sp/>below<sp/>the<sp/>base<sp/>of</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap,<sp/>i.e.,<sp/>static<sp/>variables,<sp/>even<sp/>in<sp/>the<sp/>presence<sp/>of<sp/>usage</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors.<sp/><sp/>The<sp/>routines<sp/>additionally<sp/>detect<sp/>most<sp/>improper<sp/>frees</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>reallocs.<sp/><sp/>All<sp/>this<sp/>holds<sp/>as<sp/>long<sp/>as<sp/>the<sp/>static<sp/>bookkeeping</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>malloc<sp/>itself<sp/>is<sp/>not<sp/>corrupted<sp/>by<sp/>some<sp/>other<sp/>means.<sp/><sp/>This</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>only<sp/>one<sp/>aspect<sp/>of<sp/>security<sp/>--<sp/>these<sp/>checks<sp/>do<sp/>not,<sp/>and</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cannot,<sp/>detect<sp/>all<sp/>possible<sp/>programming<sp/>errors.</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>FOOTERS<sp/>is<sp/>defined<sp/>nonzero,<sp/>then<sp/>each<sp/>allocated<sp/>chunk</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>carries<sp/>an<sp/>additional<sp/>check<sp/>word<sp/>to<sp/>verify<sp/>that<sp/>it<sp/>was<sp/>malloced</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>its<sp/>space.<sp/><sp/>These<sp/>check<sp/>words<sp/>are<sp/>the<sp/>same<sp/>within<sp/>each</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execution<sp/>of<sp/>a<sp/>program<sp/>using<sp/>malloc,<sp/>but<sp/>differ<sp/>across</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executions,<sp/>so<sp/>externally<sp/>crafted<sp/>fake<sp/>chunks<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freed.<sp/>This<sp/>improves<sp/>security<sp/>by<sp/>rejecting<sp/>frees/reallocs<sp/>that</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>could<sp/>corrupt<sp/>heap<sp/>memory,<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>checks<sp/>preventing</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writes<sp/>to<sp/>statics<sp/>that<sp/>are<sp/>always<sp/>on.<sp/><sp/>This<sp/>may<sp/>further<sp/>improve</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>security<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>time<sp/>and<sp/>space<sp/>overhead.<sp/><sp/>(Note<sp/>that</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FOOTERS<sp/>may<sp/>also<sp/>be<sp/>worth<sp/>using<sp/>with<sp/>MSPACES.)</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>By<sp/>default<sp/>detected<sp/>errors<sp/>cause<sp/>the<sp/>program<sp/>to<sp/>abort<sp/>(calling</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;abort()&quot;).<sp/>You<sp/>can<sp/>override<sp/>this<sp/>to<sp/>instead<sp/>proceed<sp/>past</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>errors<sp/>by<sp/>defining<sp/>PROCEED_ON_ERROR.<sp/><sp/>In<sp/>this<sp/>case,<sp/>a<sp/>bad<sp/>free</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has<sp/>no<sp/>effect,<sp/>and<sp/>a<sp/>malloc<sp/>that<sp/>encounters<sp/>a<sp/>bad<sp/>address</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caused<sp/>by<sp/>user<sp/>overwrites<sp/>will<sp/>ignore<sp/>the<sp/>bad<sp/>address<sp/>by</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dropping<sp/>pointers<sp/>and<sp/>indices<sp/>to<sp/>all<sp/>known<sp/>memory.<sp/>This<sp/>may</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>appropriate<sp/>for<sp/>programs<sp/>that<sp/>should<sp/>continue<sp/>if<sp/>at<sp/>all</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>possible<sp/>in<sp/>the<sp/>face<sp/>of<sp/>programming<sp/>errors,<sp/>although<sp/>they<sp/>may</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run<sp/>out<sp/>of<sp/>memory<sp/>because<sp/>dropped<sp/>memory<sp/>is<sp/>never<sp/>reclaimed.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>you<sp/>don&apos;t<sp/>like<sp/>either<sp/>of<sp/>these<sp/>options,<sp/>you<sp/>can<sp/>define</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION<sp/>and<sp/>USAGE_ERROR_ACTION<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else.<sp/>And<sp/>if<sp/>if<sp/>you<sp/>are<sp/>sure<sp/>that<sp/>your<sp/>program<sp/>using<sp/>malloc<sp/>has</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>errors<sp/>or<sp/>vulnerabilities,<sp/>you<sp/>can<sp/>define<sp/>INSECURE<sp/>to<sp/>1,</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>might<sp/>(or<sp/>might<sp/>not)<sp/>provide<sp/>a<sp/>small<sp/>performance<sp/>improvement.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>is<sp/>also<sp/>possible<sp/>to<sp/>limit<sp/>the<sp/>maximum<sp/>total<sp/>allocatable</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space,<sp/>using<sp/>malloc_set_footprint_limit.<sp/>This<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>designed<sp/>as<sp/>a<sp/>security<sp/>feature<sp/>in<sp/>itself<sp/>(calls<sp/>to<sp/>set<sp/>limits</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>not<sp/>screened<sp/>or<sp/>privileged),<sp/>but<sp/>may<sp/>be<sp/>useful<sp/>as<sp/>one</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aspect<sp/>of<sp/>a<sp/>secure<sp/>implementation.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/>Thread-safety:<sp/>NOT<sp/>thread-safe<sp/>unless<sp/>USE_LOCKS<sp/>defined<sp/>non-zero</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>USE_LOCKS<sp/>is<sp/>defined,<sp/>each<sp/>public<sp/>call<sp/>to<sp/>malloc,<sp/>free,</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>etc<sp/>is<sp/>surrounded<sp/>with<sp/>a<sp/>lock.<sp/>By<sp/>default,<sp/>this<sp/>uses<sp/>a<sp/>plain</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread<sp/>mutex,<sp/>win32<sp/>critical<sp/>section,<sp/>or<sp/>a<sp/>spin-lock<sp/>if<sp/>if</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>available<sp/>for<sp/>the<sp/>platform<sp/>and<sp/>not<sp/>disabled<sp/>by<sp/>setting</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USE_SPIN_LOCKS=0.<sp/><sp/>However,<sp/>if<sp/>USE_RECURSIVE_LOCKS<sp/>is<sp/>defined,</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursive<sp/>versions<sp/>are<sp/>used<sp/>instead<sp/>(which<sp/>are<sp/>not<sp/>required<sp/>for</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>functionality<sp/>but<sp/>may<sp/>be<sp/>needed<sp/>in<sp/>layered<sp/>extensions).</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Using<sp/>a<sp/>global<sp/>lock<sp/>is<sp/>not<sp/>especially<sp/>fast,<sp/>and<sp/>can<sp/>be<sp/>a<sp/>major</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bottleneck.<sp/><sp/>It<sp/>is<sp/>designed<sp/>only<sp/>to<sp/>provide<sp/>minimal<sp/>protection</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>concurrent<sp/>environments,<sp/>and<sp/>to<sp/>provide<sp/>a<sp/>basis<sp/>for</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extensions.<sp/><sp/>If<sp/>you<sp/>are<sp/>using<sp/>malloc<sp/>in<sp/>a<sp/>concurrent<sp/>program,</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consider<sp/>instead<sp/>using<sp/>nedmalloc</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(http://www.nedprod.com/programs/portable/nedmalloc/)<sp/>or</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptmalloc<sp/>(See<sp/>http://www.malloc.de),<sp/>which<sp/>are<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>versions<sp/>of<sp/>this<sp/>malloc.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>System<sp/>requirements:<sp/>Any<sp/>combination<sp/>of<sp/>MORECORE<sp/>and/or<sp/>MMAP/MUNMAP</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>malloc<sp/>can<sp/>use<sp/>unix<sp/>sbrk<sp/>or<sp/>any<sp/>emulation<sp/>(invoked<sp/>using</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>CALL_MORECORE<sp/>macro)<sp/>and/or<sp/>mmap/munmap<sp/>or<sp/>any<sp/>emulation</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(invoked<sp/>using<sp/>CALL_MMAP/CALL_MUNMAP)<sp/>to<sp/>get<sp/>and<sp/>release<sp/>system</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory.<sp/><sp/>On<sp/>most<sp/>unix<sp/>systems,<sp/>it<sp/>tends<sp/>to<sp/>work<sp/>best<sp/>if<sp/>both</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MORECORE<sp/>and<sp/>MMAP<sp/>are<sp/>enabled.<sp/><sp/>On<sp/>Win32,<sp/>it<sp/>uses<sp/>emulations</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>based<sp/>on<sp/>VirtualAlloc.<sp/>It<sp/>also<sp/>uses<sp/>common<sp/>C<sp/>library<sp/>functions</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>like<sp/>memset.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/>Compliance:<sp/>I<sp/>believe<sp/>it<sp/>is<sp/>compliant<sp/>with<sp/>the<sp/>Single<sp/>Unix<sp/>Specification</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(See<sp/>http://www.unix.org).<sp/>Also<sp/>SVID/XPG,<sp/>ANSI<sp/>C,<sp/>and<sp/>probably</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>others<sp/>as<sp/>well.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">*<sp/>Overview<sp/>of<sp/>algorithms</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>not<sp/>the<sp/>fastest,<sp/>most<sp/>space-conserving,<sp/>most<sp/>portable,<sp/>or</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>most<sp/>tunable<sp/>malloc<sp/>ever<sp/>written.<sp/>However<sp/>it<sp/>is<sp/>among<sp/>the<sp/>fastest</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>while<sp/>also<sp/>being<sp/>among<sp/>the<sp/>most<sp/>space-conserving,<sp/>portable<sp/>and</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>tunable.<sp/><sp/>Consistent<sp/>balance<sp/>across<sp/>these<sp/>factors<sp/>results<sp/>in<sp/>a<sp/>good</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>general-purpose<sp/>allocator<sp/>for<sp/>malloc-intensive<sp/>programs.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>In<sp/>most<sp/>ways,<sp/>this<sp/>malloc<sp/>is<sp/>a<sp/>best-fit<sp/>allocator.<sp/>Generally,<sp/>it</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>chooses<sp/>the<sp/>best-fitting<sp/>existing<sp/>chunk<sp/>for<sp/>a<sp/>request,<sp/>with<sp/>ties</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>broken<sp/>in<sp/>approximately<sp/>least-recently-used<sp/>order.<sp/>(This<sp/>strategy</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>normally<sp/>maintains<sp/>low<sp/>fragmentation.)<sp/>However,<sp/>for<sp/>requests<sp/>less</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>than<sp/>256bytes,<sp/>it<sp/>deviates<sp/>from<sp/>best-fit<sp/>when<sp/>there<sp/>is<sp/>not<sp/>an</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>exactly<sp/>fitting<sp/>available<sp/>chunk<sp/>by<sp/>preferring<sp/>to<sp/>use<sp/>space<sp/>adjacent</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/>to<sp/>that<sp/>used<sp/>for<sp/>the<sp/>previous<sp/>small<sp/>request,<sp/>as<sp/>well<sp/>as<sp/>by<sp/>breaking</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>ties<sp/>in<sp/>approximately<sp/>most-recently-used<sp/>order.<sp/>(These<sp/>enhance</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>locality<sp/>of<sp/>series<sp/>of<sp/>small<sp/>allocations.)<sp/><sp/>And<sp/>for<sp/>very<sp/>large<sp/>requests</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>(&gt;=<sp/>256Kb<sp/>by<sp/>default),<sp/>it<sp/>relies<sp/>on<sp/>system<sp/>memory<sp/>mapping</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>facilities,<sp/>if<sp/>supported.<sp/><sp/>(This<sp/>helps<sp/>avoid<sp/>carrying<sp/>around<sp/>and</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>possibly<sp/>fragmenting<sp/>memory<sp/>used<sp/>only<sp/>for<sp/>large<sp/>chunks.)</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>All<sp/>operations<sp/>(except<sp/>malloc_stats<sp/>and<sp/>mallinfo)<sp/>have<sp/>execution</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>times<sp/>that<sp/>are<sp/>bounded<sp/>by<sp/>a<sp/>constant<sp/>factor<sp/>of<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>in</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/>a<sp/>size_t,<sp/>not<sp/>counting<sp/>any<sp/>clearing<sp/>in<sp/>calloc<sp/>or<sp/>copying<sp/>in<sp/>realloc,</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/>or<sp/>actions<sp/>surrounding<sp/>MORECORE<sp/>and<sp/>MMAP<sp/>that<sp/>have<sp/>times</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/>proportional<sp/>to<sp/>the<sp/>number<sp/>of<sp/>non-contiguous<sp/>regions<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>system<sp/>allocation<sp/>routines,<sp/>which<sp/>is<sp/>often<sp/>just<sp/>1.<sp/>In<sp/>real-time</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>applications,<sp/>you<sp/>can<sp/>optionally<sp/>suppress<sp/>segment<sp/>traversals<sp/>using</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>NO_SEGMENT_TRAVERSAL,<sp/>which<sp/>assures<sp/>bounded<sp/>execution<sp/>even<sp/>when</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>system<sp/>allocators<sp/>return<sp/>non-contiguous<sp/>spaces,<sp/>at<sp/>the<sp/>typical</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>expense<sp/>of<sp/>carrying<sp/>around<sp/>more<sp/>memory<sp/>and<sp/>increased<sp/>fragmentation.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"></highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/>The<sp/>implementation<sp/>is<sp/>not<sp/>very<sp/>modular<sp/>and<sp/>seriously<sp/>overuses</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/>macros.<sp/>Perhaps<sp/>someday<sp/>all<sp/>C<sp/>compilers<sp/>will<sp/>do<sp/>as<sp/>good<sp/>a<sp/>job</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/>inlining<sp/>modular<sp/>code<sp/>as<sp/>can<sp/>now<sp/>be<sp/>done<sp/>by<sp/>brute-force<sp/>expansion,</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/>but<sp/>now,<sp/>enough<sp/>of<sp/>them<sp/>seem<sp/>not<sp/>to.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>Some<sp/>compilers<sp/>issue<sp/>a<sp/>lot<sp/>of<sp/>warnings<sp/>about<sp/>code<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>dead/unreachable<sp/>only<sp/>on<sp/>some<sp/>platforms,<sp/>and<sp/>also<sp/>about<sp/>intentional</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>uses<sp/>of<sp/>negation<sp/>on<sp/>unsigned<sp/>types.<sp/>All<sp/>known<sp/>cases<sp/>of<sp/>each<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>ignored.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/>For<sp/>a<sp/>longer<sp/>but<sp/>out<sp/>of<sp/>date<sp/>high-level<sp/>description,<sp/>see</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>http://gee.cs.oswego.edu/dl/html/malloc.html</highlight></codeline>
<codeline lineno="187"><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">*<sp/>MSPACES</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>If<sp/>MSPACES<sp/>is<sp/>defined,<sp/>then<sp/>in<sp/>addition<sp/>to<sp/>malloc,<sp/>free,<sp/>etc.,</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/>this<sp/>file<sp/>also<sp/>defines<sp/>mspace_malloc,<sp/>mspace_free,<sp/>etc.<sp/>These</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/>are<sp/>versions<sp/>of<sp/>malloc<sp/>routines<sp/>that<sp/>take<sp/>an<sp/>&quot;mspace&quot;<sp/>argument</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>obtained<sp/>using<sp/>create_mspace,<sp/>to<sp/>control<sp/>all<sp/>internal<sp/>bookkeeping.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>If<sp/>ONLY_MSPACES<sp/>is<sp/>defined,<sp/>only<sp/>these<sp/>versions<sp/>are<sp/>compiled.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/>So<sp/>if<sp/>you<sp/>would<sp/>like<sp/>to<sp/>use<sp/>this<sp/>allocator<sp/>for<sp/>only<sp/>some<sp/>allocations,</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>and<sp/>your<sp/>system<sp/>malloc<sp/>for<sp/>others,<sp/>you<sp/>can<sp/>compile<sp/>with</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>ONLY_MSPACES<sp/>and<sp/>then<sp/>do<sp/>something<sp/>like...</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>mspace<sp/>mymspace<sp/>=<sp/>create_mspace(0,0);<sp/>//<sp/>for<sp/>example</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/><sp/><sp/>#define<sp/>mymalloc(bytes)<sp/><sp/>mspace_malloc(mymspace,<sp/>bytes)</highlight></codeline>
<codeline lineno="199"><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/>(Note:<sp/>If<sp/>you<sp/>only<sp/>need<sp/>one<sp/>instance<sp/>of<sp/>an<sp/>mspace,<sp/>you<sp/>can<sp/>instead</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>use<sp/>&quot;USE_DL_PREFIX&quot;<sp/>to<sp/>relabel<sp/>the<sp/>global<sp/>malloc.)</highlight></codeline>
<codeline lineno="202"><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>You<sp/>can<sp/>similarly<sp/>create<sp/>thread-local<sp/>allocators<sp/>by<sp/>storing</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>mspaces<sp/>as<sp/>thread-locals.<sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>__thread<sp/>mspace<sp/>tlms<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/><sp/><sp/>void*<sp/><sp/>tlmalloc(size_t<sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(tlms<sp/>==<sp/>0)<sp/>tlms<sp/>=<sp/>create_mspace(0,<sp/>0);</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>mspace_malloc(tlms,<sp/>bytes);</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/><sp/>tlfree(void*<sp/>mem)<sp/>{<sp/>mspace_free(tlms,<sp/>mem);<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>Unless<sp/>FOOTERS<sp/>is<sp/>defined,<sp/>each<sp/>mspace<sp/>is<sp/>completely<sp/>independent.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/>You<sp/>cannot<sp/>allocate<sp/>from<sp/>one<sp/>and<sp/>free<sp/>to<sp/>another<sp/>(although</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>conformance<sp/>is<sp/>only<sp/>weakly<sp/>checked,<sp/>so<sp/>usage<sp/>errors<sp/>are<sp/>not<sp/>always</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/>caught).<sp/>If<sp/>FOOTERS<sp/>is<sp/>defined,<sp/>then<sp/>each<sp/>chunk<sp/>carries<sp/>around<sp/>a<sp/>tag</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>indicating<sp/>its<sp/>originating<sp/>mspace,<sp/>and<sp/>frees<sp/>are<sp/>directed<sp/>to<sp/>their</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>originating<sp/>spaces.<sp/>Normally,<sp/>this<sp/>requires<sp/>use<sp/>of<sp/>locks.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>-------------------------<sp/><sp/>Compile-time<sp/>options<sp/>---------------------------</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment">Be<sp/>careful<sp/>in<sp/>setting<sp/>#define<sp/>values<sp/>for<sp/>numerical<sp/>constants<sp/>of<sp/>type</highlight></codeline>
<codeline lineno="222"><highlight class="comment">size_t.<sp/>On<sp/>some<sp/>systems,<sp/>literal<sp/>values<sp/>are<sp/>not<sp/>automatically<sp/>extended</highlight></codeline>
<codeline lineno="223"><highlight class="comment">to<sp/>size_t<sp/>precision<sp/>unless<sp/>they<sp/>are<sp/>explicitly<sp/>casted.<sp/>You<sp/>can<sp/>also</highlight></codeline>
<codeline lineno="224"><highlight class="comment">use<sp/>the<sp/>symbolic<sp/>values<sp/>MAX_SIZE_T,<sp/>SIZE_T_ONE,<sp/>etc<sp/>below.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">WIN32<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>defined<sp/>if<sp/>_WIN32<sp/>defined</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/>Defining<sp/>WIN32<sp/>sets<sp/>up<sp/>defaults<sp/>for<sp/>MS<sp/>environment<sp/>and<sp/>compilers.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>Otherwise<sp/>defaults<sp/>are<sp/>for<sp/>unix.<sp/>Beware<sp/>that<sp/>there<sp/>seem<sp/>to<sp/>be<sp/>some</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/>cases<sp/>where<sp/>this<sp/>malloc<sp/>might<sp/>not<sp/>be<sp/>a<sp/>pure<sp/>drop-in<sp/>replacement<sp/>for</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/>Win32<sp/>malloc:<sp/>Random-looking<sp/>failures<sp/>from<sp/>Win32<sp/>GDI<sp/>API&apos;s<sp/>(eg;</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>SetDIBits())<sp/>may<sp/>be<sp/>due<sp/>to<sp/>bugs<sp/>in<sp/>some<sp/>video<sp/>driver<sp/>implementations</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/>when<sp/>pixel<sp/>buffers<sp/>are<sp/>malloc()ed,<sp/>and<sp/>the<sp/>region<sp/>spans<sp/>more<sp/>than</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/>one<sp/>VirtualAlloc()ed<sp/>region.<sp/>Because<sp/>dlmalloc<sp/>uses<sp/>a<sp/>small<sp/>(64Kb)</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>default<sp/>granularity,<sp/>pixel<sp/>buffers<sp/>may<sp/>straddle<sp/>virtual<sp/>allocation</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>regions<sp/>more<sp/>often<sp/>than<sp/>when<sp/>using<sp/>the<sp/>Microsoft<sp/>allocator.<sp/><sp/>You<sp/>can</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/>avoid<sp/>this<sp/>by<sp/>using<sp/>VirtualAlloc()<sp/>and<sp/>VirtualFree()<sp/>for<sp/>all<sp/>pixel</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/>buffers<sp/>rather<sp/>than<sp/>using<sp/>malloc().<sp/><sp/>If<sp/>this<sp/>is<sp/>not<sp/>possible,</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/>recompile<sp/>this<sp/>malloc<sp/>with<sp/>a<sp/>larger<sp/>DEFAULT_GRANULARITY.<sp/>Note:</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/>in<sp/>cases<sp/>where<sp/>MSC<sp/>and<sp/>gcc<sp/>(cygwin)<sp/>are<sp/>known<sp/>to<sp/>differ<sp/>on<sp/>WIN32,</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/>conditions<sp/>use<sp/>_MSC_VER<sp/>to<sp/>distinguish<sp/>them.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment">DLMALLOC_EXPORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>extern</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>Defines<sp/>how<sp/>public<sp/>APIs<sp/>are<sp/>declared.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>export<sp/>via<sp/>a</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/>Windows<sp/>DLL,<sp/>you<sp/>might<sp/>define<sp/>this<sp/>as</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/>#define<sp/>DLMALLOC_EXPORT<sp/>extern<sp/><sp/>__declspec(dllexport)</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>If<sp/>you<sp/>want<sp/>a<sp/>POSIX<sp/>ELF<sp/>shared<sp/>object,<sp/>you<sp/>might<sp/>use</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>#define<sp/>DLMALLOC_EXPORT<sp/>extern<sp/>__attribute__((visibility(&quot;default&quot;)))</highlight></codeline>
<codeline lineno="248"><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment">MALLOC_ALIGNMENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>(size_t)(2<sp/>*<sp/>sizeof(void<sp/>*))</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>Controls<sp/>the<sp/>minimum<sp/>alignment<sp/>for<sp/>malloc&apos;ed<sp/>chunks.<sp/><sp/>It<sp/>must<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>power<sp/>of<sp/>two<sp/>and<sp/>at<sp/>least<sp/>8,<sp/>even<sp/>on<sp/>machines<sp/>for<sp/>which<sp/>smaller</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/>alignments<sp/>would<sp/>suffice.<sp/>It<sp/>may<sp/>be<sp/>defined<sp/>as<sp/>larger<sp/>than<sp/>this</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/>though.<sp/>Note<sp/>however<sp/>that<sp/>code<sp/>and<sp/>data<sp/>structures<sp/>are<sp/>optimized<sp/>for</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>the<sp/>case<sp/>of<sp/>8-byte<sp/>alignment.</highlight></codeline>
<codeline lineno="255"><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment">MSPACES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0<sp/>(false)</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/>If<sp/>true,<sp/>compile<sp/>in<sp/>support<sp/>for<sp/>independent<sp/>allocation<sp/>spaces.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>only<sp/>supported<sp/>if<sp/>HAVE_MMAP<sp/>is<sp/>true.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">ONLY_MSPACES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0<sp/>(false)</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/>If<sp/>true,<sp/>only<sp/>compile<sp/>in<sp/>mspace<sp/>versions,<sp/>not<sp/>regular<sp/>versions.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"></highlight></codeline>
<codeline lineno="263"><highlight class="comment">USE_LOCKS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0<sp/>(false)</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>Causes<sp/>each<sp/>call<sp/>to<sp/>each<sp/>public<sp/>routine<sp/>to<sp/>be<sp/>surrounded<sp/>with</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/>pthread<sp/>or<sp/>WIN32<sp/>mutex<sp/>lock/unlock.<sp/>(If<sp/>set<sp/>true,<sp/>this<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>overridden<sp/>on<sp/>a<sp/>per-mspace<sp/>basis<sp/>for<sp/>mspace<sp/>versions.)<sp/>If<sp/>set<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/>non-zero<sp/>value<sp/>other<sp/>than<sp/>1,<sp/>locks<sp/>are<sp/>used,<sp/>but<sp/>their</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>implementation<sp/>is<sp/>left<sp/>out,<sp/>so<sp/>lock<sp/>functions<sp/>must<sp/>be<sp/>supplied<sp/>manually,</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>as<sp/>described<sp/>below.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">USE_SPIN_LOCKS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>1<sp/>iff<sp/>USE_LOCKS<sp/>and<sp/>spin<sp/>locks<sp/>available</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>If<sp/>true,<sp/>uses<sp/>custom<sp/>spin<sp/>locks<sp/>for<sp/>locking.<sp/>This<sp/>is<sp/>currently</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/>supported<sp/>only<sp/>gcc<sp/>&gt;=<sp/>4.1,<sp/>older<sp/>gccs<sp/>on<sp/>x86<sp/>platforms,<sp/>and<sp/>recent</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>MS<sp/>compilers.<sp/><sp/>Otherwise,<sp/>posix<sp/>locks<sp/>or<sp/>win32<sp/>critical<sp/>sections<sp/>are</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/>used.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">USE_RECURSIVE_LOCKS<sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/>If<sp/>defined<sp/>nonzero,<sp/>uses<sp/>recursive<sp/>(aka<sp/>reentrant)<sp/>locks,<sp/>otherwise</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/>uses<sp/>plain<sp/>mutexes.<sp/>This<sp/>is<sp/>not<sp/>required<sp/>for<sp/>malloc<sp/>proper,<sp/>but<sp/>may</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/>be<sp/>needed<sp/>for<sp/>layered<sp/>allocators<sp/>such<sp/>as<sp/>nedmalloc.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">LOCK_AT_FORK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/>If<sp/>defined<sp/>nonzero,<sp/>performs<sp/>pthread_atfork<sp/>upon<sp/>initialization</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/>to<sp/>initialize<sp/>child<sp/>lock<sp/>while<sp/>holding<sp/>parent<sp/>lock.<sp/>The<sp/>implementation</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/>assumes<sp/>that<sp/>pthread<sp/>locks<sp/>(not<sp/>custom<sp/>locks)<sp/>are<sp/>being<sp/>used.<sp/>In<sp/>other</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/><sp/>cases,<sp/>you<sp/>may<sp/>need<sp/>to<sp/>customize<sp/>the<sp/>implementation.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"></highlight></codeline>
<codeline lineno="288"><highlight class="comment">FOOTERS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/>If<sp/>true,<sp/>provide<sp/>extra<sp/>checking<sp/>and<sp/>dispatching<sp/>by<sp/>placing</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/>information<sp/>in<sp/>the<sp/>footers<sp/>of<sp/>allocated<sp/>chunks.<sp/>This<sp/>adds</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>space<sp/>and<sp/>time<sp/>overhead.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment">INSECURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/>If<sp/>true,<sp/>omit<sp/>checks<sp/>for<sp/>usage<sp/>errors<sp/>and<sp/>heap<sp/>space<sp/>overwrites.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"></highlight></codeline>
<codeline lineno="296"><highlight class="comment">USE_DL_PREFIX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>NOT<sp/>defined</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>Causes<sp/>compiler<sp/>to<sp/>prefix<sp/>all<sp/>public<sp/>routines<sp/>with<sp/>the<sp/>string<sp/>&apos;dl&apos;.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/>This<sp/>can<sp/>be<sp/>useful<sp/>when<sp/>you<sp/>only<sp/>want<sp/>to<sp/>use<sp/>this<sp/>malloc<sp/>in<sp/>one<sp/>part</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/>of<sp/>a<sp/>program,<sp/>using<sp/>your<sp/>regular<sp/>system<sp/>malloc<sp/>elsewhere.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">MALLOC_INSPECT_ALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>NOT<sp/>defined</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>If<sp/>defined,<sp/>compiles<sp/>malloc_inspect_all<sp/>and<sp/>mspace_inspect_all,<sp/>that</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>perform<sp/>traversal<sp/>of<sp/>all<sp/>heap<sp/>space.<sp/><sp/>Unless<sp/>access<sp/>to<sp/>these</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>functions<sp/>is<sp/>otherwise<sp/>restricted,<sp/>you<sp/>probably<sp/>do<sp/>not<sp/>want<sp/>to</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>include<sp/>them<sp/>in<sp/>secure<sp/>implementations.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment">ABORT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>defined<sp/>as<sp/>abort()</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/>Defines<sp/>how<sp/>to<sp/>abort<sp/>on<sp/>failed<sp/>checks.<sp/><sp/>On<sp/>most<sp/>systems,<sp/>a<sp/>failed</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>check<sp/>cannot<sp/>die<sp/>with<sp/>an<sp/>&quot;assert&quot;<sp/>or<sp/>even<sp/>print<sp/>an<sp/>informative</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/>message,<sp/>because<sp/>the<sp/>underlying<sp/>print<sp/>routines<sp/>in<sp/>turn<sp/>call<sp/>malloc,</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/>which<sp/>will<sp/>fail<sp/>again.<sp/><sp/>Generally,<sp/>the<sp/>best<sp/>policy<sp/>is<sp/>to<sp/>simply<sp/>call</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/>abort().<sp/>It&apos;s<sp/>not<sp/>very<sp/>useful<sp/>to<sp/>do<sp/>more<sp/>than<sp/>this<sp/>because<sp/>many</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/>errors<sp/>due<sp/>to<sp/>overwriting<sp/>will<sp/>show<sp/>up<sp/>as<sp/>address<sp/>faults<sp/>(null,<sp/>odd</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/>addresses<sp/>etc)<sp/>rather<sp/>than<sp/>malloc-triggered<sp/>checks,<sp/>so<sp/>will<sp/>also</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/>abort.<sp/><sp/>Also,<sp/>most<sp/>compilers<sp/>know<sp/>that<sp/>abort()<sp/>does<sp/>not<sp/>return,<sp/>so</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>can<sp/>better<sp/>optimize<sp/>code<sp/>conditionally<sp/>calling<sp/>it.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">PROCEED_ON_ERROR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>defined<sp/>as<sp/>0<sp/>(false)</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>Controls<sp/>whether<sp/>detected<sp/>bad<sp/>addresses<sp/>cause<sp/>them<sp/>to<sp/>bypassed</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/>rather<sp/>than<sp/>aborting.<sp/>If<sp/>set,<sp/>detected<sp/>bad<sp/>arguments<sp/>to<sp/>free<sp/>and</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/>realloc<sp/>are<sp/>ignored.<sp/>And<sp/>all<sp/>bookkeeping<sp/>information<sp/>is<sp/>zeroed<sp/>out</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/>upon<sp/>a<sp/>detected<sp/>overwrite<sp/>of<sp/>freed<sp/>heap<sp/>space,<sp/>thus<sp/>losing<sp/>the</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/>ability<sp/>to<sp/>ever<sp/>return<sp/>it<sp/>from<sp/>malloc<sp/>again,<sp/>but<sp/>enabling<sp/>the</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/>application<sp/>to<sp/>proceed.<sp/>If<sp/>PROCEED_ON_ERROR<sp/>is<sp/>defined,<sp/>the</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/>static<sp/>variable<sp/>malloc_corruption_error_count<sp/>is<sp/>compiled<sp/>in</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/>and<sp/>can<sp/>be<sp/>examined<sp/>to<sp/>see<sp/>if<sp/>errors<sp/>have<sp/>occurred.<sp/>This<sp/>option</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/>generates<sp/>slower<sp/>code<sp/>than<sp/>the<sp/>default<sp/>abort<sp/>policy.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment">DEBUG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>NOT<sp/>defined</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>The<sp/>DEBUG<sp/>setting<sp/>is<sp/>mainly<sp/>intended<sp/>for<sp/>people<sp/>trying<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/>this<sp/>code<sp/>or<sp/>diagnose<sp/>problems<sp/>when<sp/>porting<sp/>to<sp/>new<sp/>platforms.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/>However,<sp/>it<sp/>may<sp/>also<sp/>be<sp/>able<sp/>to<sp/>better<sp/>isolate<sp/>user<sp/>errors<sp/>than<sp/>just</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/>using<sp/>runtime<sp/>checks.<sp/><sp/>The<sp/>assertions<sp/>in<sp/>the<sp/>check<sp/>routines<sp/>spell</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/>out<sp/>in<sp/>more<sp/>detail<sp/>the<sp/>assumptions<sp/>and<sp/>invariants<sp/>underlying<sp/>the</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/>algorithms.<sp/><sp/>The<sp/>checking<sp/>is<sp/>fairly<sp/>extensive,<sp/>and<sp/>will<sp/>slow<sp/>down</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/>execution<sp/>noticeably.<sp/>Calling<sp/>malloc_stats<sp/>or<sp/>mallinfo<sp/>with<sp/>DEBUG</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/>set<sp/>will<sp/>attempt<sp/>to<sp/>check<sp/>every<sp/>non-mmapped<sp/>allocated<sp/>and<sp/>free<sp/>chunk</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>course<sp/>of<sp/>computing<sp/>the<sp/>summaries.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment">ABORT_ON_ASSERT_FAILURE<sp/><sp/><sp/>default:<sp/>defined<sp/>as<sp/>1<sp/>(true)</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>Debugging<sp/>assertion<sp/>failures<sp/>can<sp/>be<sp/>nearly<sp/>impossible<sp/>if<sp/>your</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/>version<sp/>of<sp/>the<sp/>assert<sp/>macro<sp/>causes<sp/>malloc<sp/>to<sp/>be<sp/>called,<sp/>which<sp/>will</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>lead<sp/>to<sp/>a<sp/>cascade<sp/>of<sp/>further<sp/>failures,<sp/>blowing<sp/>the<sp/>runtime<sp/>stack.</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/>ABORT_ON_ASSERT_FAILURE<sp/>cause<sp/>assertions<sp/>failures<sp/>to<sp/>call<sp/>abort(),</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/>which<sp/>will<sp/>usually<sp/>make<sp/>debugging<sp/>easier.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">MALLOC_FAILURE_ACTION<sp/><sp/><sp/><sp/><sp/>default:<sp/>sets<sp/>errno<sp/>to<sp/>ENOMEM,<sp/>or<sp/>no-op<sp/>on<sp/>win32</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/>The<sp/>action<sp/>to<sp/>take<sp/>before<sp/>&quot;return<sp/>0&quot;<sp/>when<sp/>malloc<sp/>fails<sp/>to<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>return<sp/>memory<sp/>because<sp/>there<sp/>is<sp/>none<sp/>available.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment">HAVE_MORECORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>1<sp/>(true)<sp/>unless<sp/>win32<sp/>or<sp/>ONLY_MSPACES</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/>True<sp/>if<sp/>this<sp/>system<sp/>supports<sp/>sbrk<sp/>or<sp/>an<sp/>emulation<sp/>of<sp/>it.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight></codeline>
<codeline lineno="354"><highlight class="comment">MORECORE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>sbrk</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/><sp/>The<sp/>name<sp/>of<sp/>the<sp/>sbrk-style<sp/>system<sp/>routine<sp/>to<sp/>call<sp/>to<sp/>obtain<sp/>more</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/>memory.<sp/><sp/>See<sp/>below<sp/>for<sp/>guidance<sp/>on<sp/>writing<sp/>custom<sp/>MORECORE</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/><sp/>functions.<sp/>The<sp/>type<sp/>of<sp/>the<sp/>argument<sp/>to<sp/>sbrk/MORECORE<sp/>varies<sp/>across</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/>systems.<sp/><sp/>It<sp/>cannot<sp/>be<sp/>size_t,<sp/>because<sp/>it<sp/>supports<sp/>negative</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/><sp/>arguments,<sp/>so<sp/>it<sp/>is<sp/>normally<sp/>the<sp/>signed<sp/>type<sp/>of<sp/>the<sp/>same<sp/>width<sp/>as</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/><sp/>size_t<sp/>(sometimes<sp/>declared<sp/>as<sp/>&quot;intptr_t&quot;).<sp/><sp/>It<sp/>doesn&apos;t<sp/>much<sp/>matter</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/>though.<sp/>Internally,<sp/>we<sp/>only<sp/>call<sp/>it<sp/>with<sp/>arguments<sp/>less<sp/>than<sp/>half</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/><sp/>the<sp/>max<sp/>value<sp/>of<sp/>a<sp/>size_t,<sp/>which<sp/>should<sp/>work<sp/>across<sp/>all<sp/>reasonable</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/>possibilities,<sp/>although<sp/>sometimes<sp/>generating<sp/>compiler<sp/>warnings.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment">MORECORE_CONTIGUOUS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>1<sp/>(true)<sp/>if<sp/>HAVE_MORECORE</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/>If<sp/>true,<sp/>take<sp/>advantage<sp/>of<sp/>fact<sp/>that<sp/>consecutive<sp/>calls<sp/>to<sp/>MORECORE</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/>with<sp/>positive<sp/>arguments<sp/>always<sp/>return<sp/>contiguous<sp/>increasing</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/>addresses.<sp/><sp/>This<sp/>is<sp/>true<sp/>of<sp/>unix<sp/>sbrk.<sp/>It<sp/>does<sp/>not<sp/>hurt<sp/>too<sp/>much<sp/>to</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/>set<sp/>it<sp/>true<sp/>anyway,<sp/>since<sp/>malloc<sp/>copes<sp/>with<sp/>non-contiguities.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>Setting<sp/>it<sp/>false<sp/>when<sp/>definitely<sp/>non-contiguous<sp/>saves<sp/>time</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/>and<sp/>possibly<sp/>wasted<sp/>space<sp/>it<sp/>would<sp/>take<sp/>to<sp/>discover<sp/>this<sp/>though.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment">MORECORE_CANNOT_TRIM<sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>NOT<sp/>defined</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/>True<sp/>if<sp/>MORECORE<sp/>cannot<sp/>release<sp/>space<sp/>back<sp/>to<sp/>the<sp/>system<sp/>when<sp/>given</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/>negative<sp/>arguments.<sp/>This<sp/>is<sp/>generally<sp/>necessary<sp/>only<sp/>if<sp/>you<sp/>are</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/>using<sp/>a<sp/>hand-crafted<sp/>MORECORE<sp/>function<sp/>that<sp/>cannot<sp/>handle<sp/>negative</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/>arguments.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"></highlight></codeline>
<codeline lineno="379"><highlight class="comment">NO_SEGMENT_TRAVERSAL<sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>If<sp/>non-zero,<sp/>suppresses<sp/>traversals<sp/>of<sp/>memory<sp/>segments</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/>returned<sp/>by<sp/>either<sp/>MORECORE<sp/>or<sp/>CALL_MMAP.<sp/>This<sp/>disables</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/>merging<sp/>of<sp/>segments<sp/>that<sp/>are<sp/>contiguous,<sp/>and<sp/>selectively</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/>releasing<sp/>them<sp/>to<sp/>the<sp/>OS<sp/>if<sp/>unused,<sp/>but<sp/>bounds<sp/>execution<sp/>times.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"></highlight></codeline>
<codeline lineno="385"><highlight class="comment">HAVE_MMAP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>1<sp/>(true)</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>True<sp/>if<sp/>this<sp/>system<sp/>supports<sp/>mmap<sp/>or<sp/>an<sp/>emulation<sp/>of<sp/>it.<sp/><sp/>If<sp/>so,<sp/>and</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/>HAVE_MORECORE<sp/>is<sp/>not<sp/>true,<sp/>MMAP<sp/>is<sp/>used<sp/>for<sp/>all<sp/>system</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/>allocation.<sp/>If<sp/>set<sp/>and<sp/>HAVE_MORECORE<sp/>is<sp/>true<sp/>as<sp/>well,<sp/>MMAP<sp/>is</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/>primarily<sp/>used<sp/>to<sp/>directly<sp/>allocate<sp/>very<sp/>large<sp/>blocks.<sp/>It<sp/>is<sp/>also</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/>used<sp/>as<sp/>a<sp/>backup<sp/>strategy<sp/>in<sp/>cases<sp/>where<sp/>MORECORE<sp/>fails<sp/>to<sp/>provide</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/>space<sp/>from<sp/>system.<sp/>Note:<sp/>A<sp/>single<sp/>call<sp/>to<sp/>MUNMAP<sp/>is<sp/>assumed<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/>able<sp/>to<sp/>unmap<sp/>memory<sp/>that<sp/>may<sp/>have<sp/>be<sp/>allocated<sp/>using<sp/>multiple<sp/>calls</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/><sp/>to<sp/>MMAP,<sp/>so<sp/>long<sp/>as<sp/>they<sp/>are<sp/>adjacent.</highlight></codeline>
<codeline lineno="394"><highlight class="comment"></highlight></codeline>
<codeline lineno="395"><highlight class="comment">HAVE_MREMAP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>1<sp/>on<sp/>linux,<sp/>else<sp/>0</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/><sp/>If<sp/>true<sp/>realloc()<sp/>uses<sp/>mremap()<sp/>to<sp/>re-allocate<sp/>large<sp/>blocks<sp/>and</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>extend<sp/>or<sp/>shrink<sp/>allocation<sp/>spaces.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment">MMAP_CLEARS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>1<sp/>except<sp/>on<sp/>WINCE.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/>True<sp/>if<sp/>mmap<sp/>clears<sp/>memory<sp/>so<sp/>calloc<sp/>doesn&apos;t<sp/>need<sp/>to.<sp/>This<sp/>is<sp/>true</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>for<sp/>standard<sp/>unix<sp/>mmap<sp/>using<sp/>/dev/zero<sp/>and<sp/>on<sp/>WIN32<sp/>except<sp/>for<sp/>WINCE.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight></codeline>
<codeline lineno="403"><highlight class="comment">USE_BUILTIN_FFS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0<sp/>(i.e.,<sp/>not<sp/>used)</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>Causes<sp/>malloc<sp/>to<sp/>use<sp/>the<sp/>builtin<sp/>ffs()<sp/>function<sp/>to<sp/>compute<sp/>indices.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/>Some<sp/>compilers<sp/>may<sp/>recognize<sp/>and<sp/>intrinsify<sp/>ffs<sp/>to<sp/>be<sp/>faster<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/>supplied<sp/>C<sp/>version.<sp/>Also,<sp/>the<sp/>case<sp/>of<sp/>x86<sp/>using<sp/>gcc<sp/>is<sp/>special-cased</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>to<sp/>an<sp/>asm<sp/>instruction,<sp/>so<sp/>is<sp/>already<sp/>as<sp/>fast<sp/>as<sp/>it<sp/>can<sp/>be,<sp/>and<sp/>so</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/>this<sp/>setting<sp/>has<sp/>no<sp/>effect.<sp/>Similarly<sp/>for<sp/>Win32<sp/>under<sp/>recent<sp/>MS<sp/>compilers.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/><sp/>(On<sp/>most<sp/>x86s,<sp/>the<sp/>asm<sp/>version<sp/>is<sp/>only<sp/>slightly<sp/>faster<sp/>than<sp/>the<sp/>C<sp/>version.)</highlight></codeline>
<codeline lineno="410"><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment">malloc_getpagesize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>derive<sp/>from<sp/>system<sp/>includes,<sp/>or<sp/>4096.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>The<sp/>system<sp/>page<sp/>size.<sp/>To<sp/>the<sp/>extent<sp/>possible,<sp/>this<sp/>malloc<sp/>manages</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/>memory<sp/>from<sp/>the<sp/>system<sp/>in<sp/>page-size<sp/>units.<sp/><sp/>This<sp/>may<sp/>be<sp/>(and</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/><sp/>usually<sp/>is)<sp/>a<sp/>function<sp/>rather<sp/>than<sp/>a<sp/>constant.<sp/>This<sp/>is<sp/>ignored</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>if<sp/>WIN32,<sp/>where<sp/>page<sp/>size<sp/>is<sp/>determined<sp/>using<sp/>getSystemInfo<sp/>during</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/>initialization.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment">USE_DEV_RANDOM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0<sp/>(i.e.,<sp/>not<sp/>used)</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>Causes<sp/>malloc<sp/>to<sp/>use<sp/>/dev/random<sp/>to<sp/>initialize<sp/>secure<sp/>magic<sp/>seed<sp/>for</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/>stamping<sp/>footers.<sp/>Otherwise,<sp/>the<sp/>current<sp/>time<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment">NO_MALLINFO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>If<sp/>defined,<sp/>don&apos;t<sp/>compile<sp/>&quot;mallinfo&quot;.<sp/>This<sp/>can<sp/>be<sp/>a<sp/>simple<sp/>way</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/>of<sp/>dealing<sp/>with<sp/>mismatches<sp/>between<sp/>system<sp/>declarations<sp/>and</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>those<sp/>in<sp/>this<sp/>file.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"></highlight></codeline>
<codeline lineno="427"><highlight class="comment">MALLINFO_FIELD_TYPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>size_t</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/>The<sp/>type<sp/>of<sp/>the<sp/>fields<sp/>in<sp/>the<sp/>mallinfo<sp/>struct.<sp/>This<sp/>was<sp/>originally</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/>defined<sp/>as<sp/>&quot;int&quot;<sp/>in<sp/>SVID<sp/>etc,<sp/>but<sp/>is<sp/>more<sp/>usefully<sp/>defined<sp/>as</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/>size_t.<sp/>The<sp/>value<sp/>is<sp/>used<sp/>only<sp/>if<sp/><sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>is<sp/>not<sp/>set</highlight></codeline>
<codeline lineno="431"><highlight class="comment"></highlight></codeline>
<codeline lineno="432"><highlight class="comment">NO_MALLOC_STATS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>0</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>If<sp/>defined,<sp/>don&apos;t<sp/>compile<sp/>&quot;malloc_stats&quot;.<sp/>This<sp/>avoids<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>fprintf<sp/>and<sp/>bringing<sp/>in<sp/>stdio<sp/>dependencies<sp/>you<sp/>might<sp/>not<sp/>want.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"></highlight></codeline>
<codeline lineno="436"><highlight class="comment">REALLOC_ZERO_BYTES_FREES<sp/><sp/><sp/><sp/>default:<sp/>not<sp/>defined</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/>This<sp/>should<sp/>be<sp/>set<sp/>if<sp/>a<sp/>call<sp/>to<sp/>realloc<sp/>with<sp/>zero<sp/>bytes<sp/>should</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>be<sp/>the<sp/>same<sp/>as<sp/>a<sp/>call<sp/>to<sp/>free.<sp/>Some<sp/>people<sp/>think<sp/>it<sp/>should.<sp/>Otherwise,</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>since<sp/>this<sp/>malloc<sp/>returns<sp/>a<sp/>unique<sp/>pointer<sp/>for<sp/>malloc(0),<sp/>so<sp/>does</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>realloc(p,<sp/>0).</highlight></codeline>
<codeline lineno="441"><highlight class="comment"></highlight></codeline>
<codeline lineno="442"><highlight class="comment">LACKS_UNISTD_H,<sp/>LACKS_FCNTL_H,<sp/>LACKS_SYS_PARAM_H,<sp/>LACKS_SYS_MMAN_H</highlight></codeline>
<codeline lineno="443"><highlight class="comment">LACKS_STRINGS_H,<sp/>LACKS_STRING_H,<sp/>LACKS_SYS_TYPES_H,<sp/><sp/>LACKS_ERRNO_H</highlight></codeline>
<codeline lineno="444"><highlight class="comment">LACKS_STDLIB_H<sp/>LACKS_SCHED_H<sp/>LACKS_TIME_H<sp/><sp/>default:<sp/>NOT<sp/>defined<sp/>unless<sp/>on<sp/>WIN32</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>Define<sp/>these<sp/>if<sp/>your<sp/>system<sp/>does<sp/>not<sp/>have<sp/>these<sp/>header<sp/>files.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/>You<sp/>might<sp/>need<sp/>to<sp/>manually<sp/>insert<sp/>some<sp/>of<sp/>the<sp/>declarations<sp/>they<sp/>provide.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment">DEFAULT_GRANULARITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>page<sp/>size<sp/>if<sp/>MORECORE_CONTIGUOUS,</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system_info.dwAllocationGranularity<sp/>in<sp/>WIN32,</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otherwise<sp/>64K.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Also<sp/>settable<sp/>using<sp/>mallopt(M_GRANULARITY,<sp/>x)</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/>The<sp/>unit<sp/>for<sp/>allocating<sp/>and<sp/>deallocating<sp/>memory<sp/>from<sp/>the<sp/>system.<sp/><sp/>On</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>most<sp/>systems<sp/>with<sp/>contiguous<sp/>MORECORE,<sp/>there<sp/>is<sp/>no<sp/>reason<sp/>to</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>make<sp/>this<sp/>more<sp/>than<sp/>a<sp/>page.<sp/>However,<sp/>systems<sp/>with<sp/>MMAP<sp/>tend<sp/>to</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>either<sp/>require<sp/>or<sp/>encourage<sp/>larger<sp/>granularities.<sp/><sp/>You<sp/>can<sp/>increase</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>this<sp/>value<sp/>to<sp/>prevent<sp/>system<sp/>allocation<sp/>functions<sp/>to<sp/>be<sp/>called<sp/>so</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>often,<sp/>especially<sp/>if<sp/>they<sp/>are<sp/>slow.<sp/><sp/>The<sp/>value<sp/>must<sp/>be<sp/>at<sp/>least<sp/>one</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/>page<sp/>and<sp/>must<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.<sp/><sp/>Setting<sp/>to<sp/>0<sp/>causes<sp/>initialization</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>to<sp/>either<sp/>page<sp/>size<sp/>or<sp/>win32<sp/>region<sp/>size.<sp/><sp/>(Note:<sp/>In<sp/>previous</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/><sp/>versions<sp/>of<sp/>malloc,<sp/>the<sp/>equivalent<sp/>of<sp/>this<sp/>option<sp/>was<sp/>called</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/>&quot;TOP_PAD&quot;)</highlight></codeline>
<codeline lineno="462"><highlight class="comment"></highlight></codeline>
<codeline lineno="463"><highlight class="comment">DEFAULT_TRIM_THRESHOLD<sp/><sp/><sp/><sp/>default:<sp/>2MB</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Also<sp/>settable<sp/>using<sp/>mallopt(M_TRIM_THRESHOLD,<sp/>x)</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/>The<sp/>maximum<sp/>amount<sp/>of<sp/>unused<sp/>top-most<sp/>memory<sp/>to<sp/>keep<sp/>before</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/>releasing<sp/>via<sp/>malloc_trim<sp/>in<sp/>free().<sp/><sp/>Automatic<sp/>trimming<sp/>is<sp/>mainly</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/>useful<sp/>in<sp/>long-lived<sp/>programs<sp/>using<sp/>contiguous<sp/>MORECORE.<sp/><sp/>Because</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/>trimming<sp/>via<sp/>sbrk<sp/>can<sp/>be<sp/>slow<sp/>on<sp/>some<sp/>systems,<sp/>and<sp/>can<sp/>sometimes<sp/>be</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/><sp/>wasteful<sp/>(in<sp/>cases<sp/>where<sp/>programs<sp/>immediately<sp/>afterward<sp/>allocate</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/>more<sp/>large<sp/>chunks)<sp/>the<sp/>value<sp/>should<sp/>be<sp/>high<sp/>enough<sp/>so<sp/>that<sp/>your</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/>overall<sp/>system<sp/>performance<sp/>would<sp/>improve<sp/>by<sp/>releasing<sp/>this<sp/>much</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/>memory.<sp/><sp/>As<sp/>a<sp/>rough<sp/>guide,<sp/>you<sp/>might<sp/>set<sp/>to<sp/>a<sp/>value<sp/>close<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/>average<sp/>size<sp/>of<sp/>a<sp/>process<sp/>(program)<sp/>running<sp/>on<sp/>your<sp/>system.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/>Releasing<sp/>this<sp/>much<sp/>memory<sp/>would<sp/>allow<sp/>such<sp/>a<sp/>process<sp/>to<sp/>run<sp/>in</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>memory.<sp/><sp/>Generally,<sp/>it<sp/>is<sp/>worth<sp/>tuning<sp/>trim<sp/>thresholds<sp/>when<sp/>a</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/>program<sp/>undergoes<sp/>phases<sp/>where<sp/>several<sp/>large<sp/>chunks<sp/>are<sp/>allocated</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/>and<sp/>released<sp/>in<sp/>ways<sp/>that<sp/>can<sp/>reuse<sp/>each<sp/>other&apos;s<sp/>storage,<sp/>perhaps</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>mixed<sp/>with<sp/>phases<sp/>where<sp/>there<sp/>are<sp/>no<sp/>such<sp/>chunks<sp/>at<sp/>all.<sp/>The<sp/>trim</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/>value<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>page<sp/>size<sp/>to<sp/>have<sp/>any<sp/>useful<sp/>effect.<sp/><sp/>To</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>disable<sp/>trimming<sp/>completely,<sp/>you<sp/>can<sp/>set<sp/>to<sp/>MAX_SIZE_T.<sp/>Note<sp/>that<sp/>the<sp/>trick</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/>some<sp/>people<sp/>use<sp/>of<sp/>mallocing<sp/>a<sp/>huge<sp/>space<sp/>and<sp/>then<sp/>freeing<sp/>it<sp/>at</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/>program<sp/>startup,<sp/>in<sp/>an<sp/>attempt<sp/>to<sp/>reserve<sp/>system<sp/>memory,<sp/>doesn&apos;t</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/>have<sp/>the<sp/>intended<sp/>effect<sp/>under<sp/>automatic<sp/>trimming,<sp/>since<sp/>that<sp/>memory</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/>will<sp/>immediately<sp/>be<sp/>returned<sp/>to<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"></highlight></codeline>
<codeline lineno="486"><highlight class="comment">DEFAULT_MMAP_THRESHOLD<sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>256K</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Also<sp/>settable<sp/>using<sp/>mallopt(M_MMAP_THRESHOLD,<sp/>x)</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/>The<sp/>request<sp/>size<sp/>threshold<sp/>for<sp/>using<sp/>MMAP<sp/>to<sp/>directly<sp/>service<sp/>a</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>request.<sp/>Requests<sp/>of<sp/>at<sp/>least<sp/>this<sp/>size<sp/>that<sp/>cannot<sp/>be<sp/>allocated</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/><sp/>using<sp/>already-existing<sp/>space<sp/>will<sp/>be<sp/>serviced<sp/>via<sp/>mmap.<sp/><sp/>(If<sp/>enough</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/><sp/>normal<sp/>freed<sp/>space<sp/>already<sp/>exists<sp/>it<sp/>is<sp/>used<sp/>instead.)<sp/><sp/>Using<sp/>mmap</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>segregates<sp/>relatively<sp/>large<sp/>chunks<sp/>of<sp/>memory<sp/>so<sp/>that<sp/>they<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/>individually<sp/>obtained<sp/>and<sp/>released<sp/>from<sp/>the<sp/>host<sp/>system.<sp/>A<sp/>request</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/>serviced<sp/>through<sp/>mmap<sp/>is<sp/>never<sp/>reused<sp/>by<sp/>any<sp/>other<sp/>request<sp/>(at<sp/>least</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>not<sp/>directly;<sp/>the<sp/>system<sp/>may<sp/>just<sp/>so<sp/>happen<sp/>to<sp/>remap<sp/>successive</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/>requests<sp/>to<sp/>the<sp/>same<sp/>locations).<sp/><sp/>Segregating<sp/>space<sp/>in<sp/>this<sp/>way<sp/>has</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/>the<sp/>benefits<sp/>that:<sp/>Mmapped<sp/>space<sp/>can<sp/>always<sp/>be<sp/>individually<sp/>released</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/>back<sp/>to<sp/>the<sp/>system,<sp/>which<sp/>helps<sp/>keep<sp/>the<sp/>system<sp/>level<sp/>memory<sp/>demands</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/>of<sp/>a<sp/>long-lived<sp/>program<sp/>low.<sp/><sp/>Also,<sp/>mapped<sp/>memory<sp/>doesn&apos;t<sp/>become</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>`locked&apos;<sp/>between<sp/>other<sp/>chunks,<sp/>as<sp/>can<sp/>happen<sp/>with<sp/>normally<sp/>allocated</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/>chunks,<sp/>which<sp/>means<sp/>that<sp/>even<sp/>trimming<sp/>via<sp/>malloc_trim<sp/>would<sp/>not</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/>release<sp/>them.<sp/><sp/>However,<sp/>it<sp/>has<sp/>the<sp/>disadvantage<sp/>that<sp/>the<sp/>space</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/>cannot<sp/>be<sp/>reclaimed,<sp/>consolidated,<sp/>and<sp/>then<sp/>used<sp/>to<sp/>service<sp/>later</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/>requests,<sp/>as<sp/>happens<sp/>with<sp/>normal<sp/>chunks.<sp/><sp/>The<sp/>advantages<sp/>of<sp/>mmap</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>nearly<sp/>always<sp/>outweigh<sp/>disadvantages<sp/>for<sp/>&quot;large&quot;<sp/>chunks,<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/><sp/>value<sp/>of<sp/>&quot;large&quot;<sp/>may<sp/>vary<sp/>across<sp/>systems.<sp/><sp/>The<sp/>default<sp/>is<sp/>an</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/>empirically<sp/>derived<sp/>value<sp/>that<sp/>works<sp/>well<sp/>in<sp/>most<sp/>systems.<sp/>You<sp/>can</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/>disable<sp/>mmap<sp/>by<sp/>setting<sp/>to<sp/>MAX_SIZE_T.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"></highlight></codeline>
<codeline lineno="510"><highlight class="comment">MAX_RELEASE_CHECK_RATE<sp/><sp/><sp/>default:<sp/>4095<sp/>unless<sp/>not<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/><sp/>The<sp/>number<sp/>of<sp/>consolidated<sp/>frees<sp/>between<sp/>checks<sp/>to<sp/>release</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/>unused<sp/>segments<sp/>when<sp/>freeing.<sp/>When<sp/>using<sp/>non-contiguous<sp/>segments,</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/>especially<sp/>with<sp/>multiple<sp/>mspaces,<sp/>checking<sp/>only<sp/>for<sp/>topmost<sp/>space</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/><sp/>doesn&apos;t<sp/>always<sp/>suffice<sp/>to<sp/>trigger<sp/>trimming.<sp/>To<sp/>compensate<sp/>for<sp/>this,</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/>free()<sp/>will,<sp/>with<sp/>a<sp/>period<sp/>of<sp/>MAX_RELEASE_CHECK_RATE<sp/>(or<sp/>the</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/>current<sp/>number<sp/>of<sp/>segments,<sp/>if<sp/>greater)<sp/>try<sp/>to<sp/>release<sp/>unused</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/>segments<sp/>to<sp/>the<sp/>OS<sp/>when<sp/>freeing<sp/>chunks<sp/>that<sp/>result<sp/>in</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/>consolidation.<sp/>The<sp/>best<sp/>value<sp/>for<sp/>this<sp/>parameter<sp/>is<sp/>a<sp/>compromise</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/>between<sp/>slowing<sp/>down<sp/>frees<sp/>with<sp/>relatively<sp/>costly<sp/>checks<sp/>that</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>rarely<sp/>trigger<sp/>versus<sp/>holding<sp/>on<sp/>to<sp/>unused<sp/>memory.<sp/>To<sp/>effectively</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>disable,<sp/>set<sp/>to<sp/>MAX_SIZE_T.<sp/>This<sp/>may<sp/>lead<sp/>to<sp/>a<sp/>very<sp/>slight<sp/>speed</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/>improvement<sp/>at<sp/>the<sp/>expense<sp/>of<sp/>carrying<sp/>around<sp/>more<sp/>memory.</highlight></codeline>
<codeline lineno="523"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;embARC_toolchain.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_LOCKS<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>single<sp/>core<sp/>currently<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="526"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_sbrk(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>SMALL_MEMORY</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>malloc_getpagesize<sp/>(128)</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>malloc_getpagesize<sp/>(4096)</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Version<sp/>identifier<sp/>to<sp/>allow<sp/>people<sp/>to<sp/>support<sp/>multiple<sp/>versions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DLMALLOC_VERSION</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DLMALLOC_VERSION<sp/>20806</highlight></codeline>
<codeline lineno="540"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DLMALLOC_VERSION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="541"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DLMALLOC_EXPORT</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DLMALLOC_EXPORT<sp/>extern</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="547"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="548"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>WIN32<sp/>1</highlight></codeline>
<codeline lineno="549"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>_WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32_WCE</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_FCNTL_H</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>WIN32<sp/>1</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_WIN32_WCE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MMAP<sp/>1</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MORECORE<sp/>0</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_UNISTD_H</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_SYS_PARAM_H</highlight></codeline>
<codeline lineno="563"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_SYS_MMAN_H</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_STRING_H</highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_STRINGS_H</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_SYS_TYPES_H</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_ERRNO_H</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LACKS_SCHED_H</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLOC_FAILURE_ACTION</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MALLOC_FAILURE_ACTION</highlight></codeline>
<codeline lineno="571"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLOC_FAILURE_ACTION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MMAP_CLEARS</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32_WCE<sp/></highlight><highlight class="comment">/*<sp/>WINCE<sp/>reportedly<sp/>does<sp/>not<sp/>clear<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="574"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MMAP_CLEARS<sp/>0</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MMAP_CLEARS<sp/>1</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_WIN32_WCE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*MMAP_CLEARS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DARWIN)<sp/>||<sp/>defined(_DARWIN)</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Mac<sp/>OSX<sp/>docs<sp/>advise<sp/>not<sp/>to<sp/>use<sp/>sbrk;<sp/>it<sp/>seems<sp/>better<sp/>to<sp/>use<sp/>mmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MORECORE</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MORECORE<sp/>0</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MMAP<sp/>1</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>OSX<sp/>allocators<sp/>provide<sp/>16<sp/>byte<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLOC_ALIGNMENT</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MALLOC_ALIGNMENT<sp/>((size_t)16U)</highlight></codeline>
<codeline lineno="589"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="590"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="591"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>DARWIN<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_SYS_TYPES_H</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>size_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>LACKS_SYS_TYPES_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>maximum<sp/>possible<sp/>size_t<sp/>value<sp/>has<sp/>all<sp/>bits<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_SIZE_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(~(size_t)0)</highlight></codeline>
<codeline lineno="599"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_LOCKS<sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>true<sp/>if<sp/>spin<sp/>or<sp/>recursive<sp/>locks<sp/>set<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USE_LOCKS<sp/><sp/>((defined(USE_SPIN_LOCKS)<sp/>&amp;&amp;<sp/>USE_SPIN_LOCKS<sp/>!=<sp/>0)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(defined(USE_RECURSIVE_LOCKS)<sp/>&amp;&amp;<sp/>USE_RECURSIVE_LOCKS<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS<sp/></highlight><highlight class="comment">/*<sp/>Spin<sp/>locks<sp/>for<sp/>gcc<sp/>&gt;=<sp/>4.1,<sp/>older<sp/>gcc<sp/>on<sp/>x86,<sp/>MSC<sp/>&gt;=<sp/>1310<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>((defined(__GNUC__)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>1))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined(__i386__)<sp/>||<sp/>defined(__x86_64__)))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER&gt;=1310))</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_SPIN_LOCKS</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USE_SPIN_LOCKS<sp/>1</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_SPIN_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>USE_SPIN_LOCKS</highlight></codeline>
<codeline lineno="614"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#error<sp/>&quot;USE_SPIN_LOCKS<sp/>defined<sp/>without<sp/>implementation&quot;</highlight></codeline>
<codeline lineno="615"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>...<sp/>locks<sp/>available...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="616"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>!defined(USE_SPIN_LOCKS)</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USE_SPIN_LOCKS<sp/>0</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ONLY_MSPACES</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ONLY_MSPACES<sp/>0</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="623"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MSPACES</highlight></codeline>
<codeline lineno="624"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>ONLY_MSPACES</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MSPACES<sp/>1</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MSPACES<sp/>0</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLOC_ALIGNMENT</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MALLOC_ALIGNMENT<sp/>((size_t)(2<sp/>*<sp/>sizeof(void<sp/>*)))</highlight></codeline>
<codeline lineno="632"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MALLOC_ALIGNMENT<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="633"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>FOOTERS</highlight></codeline>
<codeline lineno="634"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FOOTERS<sp/>0</highlight></codeline>
<codeline lineno="635"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="636"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>ABORT</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ABORT<sp/><sp/>abort()</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ABORT<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>ABORT_ON_ASSERT_FAILURE</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ABORT_ON_ASSERT_FAILURE<sp/>1</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ABORT_ON_ASSERT_FAILURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="642"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>PROCEED_ON_ERROR</highlight></codeline>
<codeline lineno="643"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PROCEED_ON_ERROR<sp/>0</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>PROCEED_ON_ERROR<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INSECURE</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INSECURE<sp/>0</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>INSECURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="649"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLOC_INSPECT_ALL</highlight></codeline>
<codeline lineno="650"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MALLOC_INSPECT_ALL<sp/>0</highlight></codeline>
<codeline lineno="651"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MALLOC_INSPECT_ALL<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="652"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="653"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MMAP<sp/>1</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MMAP_CLEARS</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MMAP_CLEARS<sp/>1</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MMAP_CLEARS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MREMAP</highlight></codeline>
<codeline lineno="659"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>linux</highlight></codeline>
<codeline lineno="660"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MREMAP<sp/>1</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_GNU_SOURCE<sp/></highlight><highlight class="comment">/*<sp/>Turns<sp/>on<sp/>mremap()<sp/>definition<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>linux<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MREMAP<sp/>0</highlight></codeline>
<codeline lineno="664"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>linux<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MREMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="666"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLOC_FAILURE_ACTION</highlight></codeline>
<codeline lineno="667"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MALLOC_FAILURE_ACTION<sp/><sp/>errno<sp/>=<sp/>ENOMEM;</highlight></codeline>
<codeline lineno="668"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MALLOC_FAILURE_ACTION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="669"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>HAVE_MORECORE</highlight></codeline>
<codeline lineno="670"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>ONLY_MSPACES</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MORECORE<sp/>0</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HAVE_MORECORE<sp/>1</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="676"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!HAVE_MORECORE</highlight></codeline>
<codeline lineno="677"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MORECORE_CONTIGUOUS<sp/>0</highlight></codeline>
<codeline lineno="678"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>!HAVE_MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="679"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MORECORE_DEFAULT<sp/>_sbrk</highlight></codeline>
<codeline lineno="680"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MORECORE_CONTIGUOUS</highlight></codeline>
<codeline lineno="681"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MORECORE_CONTIGUOUS<sp/>1</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CONTIGUOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>DEFAULT_GRANULARITY</highlight></codeline>
<codeline lineno="685"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>(MORECORE_CONTIGUOUS<sp/>||<sp/>defined(WIN32))</highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_GRANULARITY<sp/>(0)<sp/><sp/></highlight><highlight class="comment">/*<sp/>0<sp/>means<sp/>to<sp/>compute<sp/>in<sp/>init_mparams<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CONTIGUOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_GRANULARITY<sp/>((size_t)64U<sp/>*<sp/>(size_t)1024U)</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CONTIGUOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>DEFAULT_GRANULARITY<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>DEFAULT_TRIM_THRESHOLD</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MORECORE_CANNOT_TRIM</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_TRIM_THRESHOLD<sp/>((size_t)2U<sp/>*<sp/>(size_t)1024U<sp/>*<sp/>(size_t)1024U)</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CANNOT_TRIM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_TRIM_THRESHOLD<sp/>MAX_SIZE_T</highlight></codeline>
<codeline lineno="696"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CANNOT_TRIM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="697"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>DEFAULT_TRIM_THRESHOLD<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>DEFAULT_MMAP_THRESHOLD</highlight></codeline>
<codeline lineno="699"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_MMAP_THRESHOLD<sp/>((size_t)256U<sp/>*<sp/>(size_t)1024U)</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEFAULT_MMAP_THRESHOLD<sp/>MAX_SIZE_T</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>DEFAULT_MMAP_THRESHOLD<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="705"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MAX_RELEASE_CHECK_RATE</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="707"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAX_RELEASE_CHECK_RATE<sp/>4095</highlight></codeline>
<codeline lineno="708"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAX_RELEASE_CHECK_RATE<sp/>MAX_SIZE_T</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MAX_RELEASE_CHECK_RATE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_BUILTIN_FFS</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USE_BUILTIN_FFS<sp/>0</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>USE_BUILTIN_FFS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_DEV_RANDOM</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USE_DEV_RANDOM<sp/>0</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>USE_DEV_RANDOM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="718"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_MALLINFO</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NO_MALLINFO<sp/>0</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="721"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>MALLINFO_FIELD_TYPE</highlight></codeline>
<codeline lineno="722"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MALLINFO_FIELD_TYPE<sp/>size_t</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>MALLINFO_FIELD_TYPE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="724"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_MALLOC_STATS</highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NO_MALLOC_STATS<sp/>0</highlight></codeline>
<codeline lineno="726"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>NO_MALLOC_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="727"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_SEGMENT_TRAVERSAL</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NO_SEGMENT_TRAVERSAL<sp/>0</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_SEGMENT_TRAVERSAL<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/>mallopt<sp/>tuning<sp/>options.<sp/><sp/>SVID/XPG<sp/>defines<sp/>four<sp/>standard<sp/>parameter</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/>numbers<sp/>for<sp/>mallopt,<sp/>normally<sp/>defined<sp/>in<sp/>malloc.h.<sp/><sp/>None<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/>are<sp/>used<sp/>in<sp/>this<sp/>malloc,<sp/>so<sp/>setting<sp/>them<sp/>has<sp/>no<sp/>effect.<sp/>But<sp/>this</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/>malloc<sp/>does<sp/>support<sp/>the<sp/>following<sp/>options.</highlight></codeline>
<codeline lineno="736"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>M_TRIM_THRESHOLD<sp/><sp/><sp/><sp/><sp/>(-1)</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>M_GRANULARITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-2)</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>M_MMAP_THRESHOLD<sp/><sp/><sp/><sp/><sp/>(-3)</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------<sp/>Mallinfo<sp/>declarations<sp/>------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight></codeline>
<codeline lineno="745"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/>This<sp/>version<sp/>of<sp/>malloc<sp/>supports<sp/>the<sp/>standard<sp/>SVID/XPG<sp/>mallinfo</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/>routine<sp/>that<sp/>returns<sp/>a<sp/>struct<sp/>containing<sp/>usage<sp/>properties<sp/>and</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/>statistics.<sp/>It<sp/>should<sp/>work<sp/>on<sp/>any<sp/>system<sp/>that<sp/>has<sp/>a</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/>/usr/include/malloc.h<sp/>defining<sp/>struct<sp/>mallinfo.<sp/><sp/>The<sp/>main</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/>declaration<sp/>needed<sp/>is<sp/>the<sp/>mallinfo<sp/>struct<sp/>that<sp/>is<sp/>returned<sp/>(by-copy)</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/>by<sp/>mallinfo().<sp/><sp/>The<sp/>malloinfo<sp/>struct<sp/>contains<sp/>a<sp/>bunch<sp/>of<sp/>fields<sp/>that</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/>are<sp/>not<sp/>even<sp/>meaningful<sp/>in<sp/>this<sp/>version<sp/>of<sp/>malloc.<sp/><sp/>These<sp/>fields<sp/>are</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/><sp/>are<sp/>instead<sp/>filled<sp/>by<sp/>mallinfo()<sp/>with<sp/>other<sp/>numbers<sp/>that<sp/>might<sp/>be<sp/>of</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/>interest.</highlight></codeline>
<codeline lineno="755"><highlight class="comment"></highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>should<sp/>be<sp/>set<sp/>if<sp/>you<sp/>have<sp/>a</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/>/usr/include/malloc.h<sp/>file<sp/>that<sp/>includes<sp/>a<sp/>declaration<sp/>of<sp/>struct</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/>mallinfo.<sp/><sp/>If<sp/>so,<sp/>it<sp/>is<sp/>included;<sp/>else<sp/>a<sp/>compliant<sp/>version<sp/>is</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/>declared<sp/>below.<sp/><sp/>These<sp/>must<sp/>be<sp/>precisely<sp/>the<sp/>same<sp/>for<sp/>mallinfo()<sp/>to</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/><sp/>work.<sp/><sp/>The<sp/>original<sp/>SVID<sp/>version<sp/>of<sp/>this<sp/>struct,<sp/>defined<sp/>on<sp/>most</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/>systems<sp/>with<sp/>mallinfo,<sp/>declares<sp/>all<sp/>fields<sp/>as<sp/>ints.<sp/>But<sp/>some<sp/>others</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/>define<sp/>as<sp/>unsigned<sp/>long.<sp/>If<sp/>your<sp/>system<sp/>defines<sp/>the<sp/>fields<sp/>using<sp/>a</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/>type<sp/>of<sp/>different<sp/>width<sp/>than<sp/>listed<sp/>here,<sp/>you<sp/>MUST<sp/>#include<sp/>your</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/>system<sp/>version<sp/>and<sp/>#define<sp/>HAVE_USR_INCLUDE_MALLOC_H.</highlight></codeline>
<codeline lineno="765"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_USR_INCLUDE_MALLOC_H</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;/usr/include/malloc.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>STRUCT_MALLINFO_DECLARED</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>HP-UX<sp/>(and<sp/>others?)<sp/>redefines<sp/>mallinfo<sp/>unless<sp/>_STRUCT_MALLINFO<sp/>is<sp/>defined<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_STRUCT_MALLINFO</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>STRUCT_MALLINFO_DECLARED<sp/>1</highlight></codeline>
<codeline lineno="776" refid="structmallinfo" refkind="compound"><highlight class="preprocessor"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>arena;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>non-mmapped<sp/>space<sp/>allocated<sp/>from<sp/>system<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>ordblks;<sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>free<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>smblks;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>hblks;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>hblkhd;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>space<sp/>in<sp/>mmapped<sp/>regions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>usmblks;<sp/><sp/></highlight><highlight class="comment">/*<sp/>maximum<sp/>total<sp/>allocated<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>fsmblks;<sp/><sp/></highlight><highlight class="comment">/*<sp/>always<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>uordblks;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>allocated<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>fordblks;<sp/></highlight><highlight class="comment">/*<sp/>total<sp/>free<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>MALLINFO_FIELD_TYPE<sp/>keepcost;<sp/></highlight><highlight class="comment">/*<sp/>releasable<sp/>(via<sp/>malloc_trim)<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal">};</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>STRUCT_MALLINFO_DECLARED<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_USR_INCLUDE_MALLOC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/>Try<sp/>to<sp/>persuade<sp/>compilers<sp/>to<sp/>inline.<sp/>The<sp/>most<sp/>critical<sp/>functions<sp/>for</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/>inlining<sp/>are<sp/>defined<sp/>as<sp/>macros,<sp/>so<sp/>these<sp/>aren&apos;t<sp/>used<sp/>for<sp/>them.</highlight></codeline>
<codeline lineno="795"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FORCEINLINE</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__GNUC__)</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FORCEINLINE<sp/>__inline<sp/>__attribute__<sp/>((always_inline))</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>FORCEINLINE<sp/>__forceinline</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>NOINLINE</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined(__GNUC__)</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>NOINLINE<sp/>__attribute__<sp/>((noinline))</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#elif<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>NOINLINE<sp/>__declspec(noinline)</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>NOINLINE</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FORCEINLINE</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#define<sp/>FORCEINLINE<sp/>inline</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>FORCEINLINE</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/>#define<sp/>FORCEINLINE</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>Declarations<sp/>of<sp/>public<sp/>routines<sp/>-------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_DL_PREFIX</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlcalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calloc</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlfree<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmemalign<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memalign</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlposix_memalign<sp/><sp/><sp/><sp/><sp/><sp/><sp/>posix_memalign</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlrealloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>realloc</highlight></codeline>
<codeline lineno="835"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlrealloc_in_place<sp/><sp/><sp/><sp/><sp/>realloc_in_place</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlvalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valloc</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlpvalloc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvalloc</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmallinfo<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mallinfo</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmallopt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mallopt</highlight></codeline>
<codeline lineno="840"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_trim<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc_trim</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_stats<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>malloc_stats</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_usable_size<sp/><sp/><sp/>malloc_usable_size</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_footprint<sp/><sp/><sp/><sp/><sp/>malloc_footprint</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_max_footprint<sp/>malloc_max_footprint</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_footprint_limit<sp/>malloc_footprint_limit</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_set_footprint_limit<sp/>malloc_set_footprint_limit</highlight></codeline>
<codeline lineno="847"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlmalloc_inspect_all<sp/><sp/><sp/>malloc_inspect_all</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlindependent_calloc<sp/><sp/><sp/>independent_calloc</highlight></codeline>
<codeline lineno="849"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlindependent_comalloc<sp/>independent_comalloc</highlight></codeline>
<codeline lineno="850"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>dlbulk_free<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk_free</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_DL_PREFIX<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/>malloc(size_t<sp/>n)</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>newly<sp/>allocated<sp/>chunk<sp/>of<sp/>at<sp/>least<sp/>n<sp/>bytes,<sp/>or</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/>null<sp/>if<sp/>no<sp/>space<sp/>is<sp/>available,<sp/>in<sp/>which<sp/>case<sp/>errno<sp/>is<sp/>set<sp/>to<sp/>ENOMEM</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/>on<sp/>ANSI<sp/>C<sp/>systems.</highlight></codeline>
<codeline lineno="858"><highlight class="comment"></highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/>If<sp/>n<sp/>is<sp/>zero,<sp/>malloc<sp/>returns<sp/>a<sp/>minimum-sized<sp/>chunk.<sp/>(The<sp/>minimum</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/>size<sp/>is<sp/>16<sp/>bytes<sp/>on<sp/>most<sp/>32bit<sp/>systems,<sp/>and<sp/>32<sp/>bytes<sp/>on<sp/>64bit</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/>systems.)<sp/><sp/>Note<sp/>that<sp/>size_t<sp/>is<sp/>an<sp/>unsigned<sp/>type,<sp/>so<sp/>calls<sp/>with</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/>arguments<sp/>that<sp/>would<sp/>be<sp/>negative<sp/>if<sp/>signed<sp/>are<sp/>interpreted<sp/>as</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/>requests<sp/>for<sp/>huge<sp/>amounts<sp/>of<sp/>space,<sp/>which<sp/>will<sp/>often<sp/>fail.<sp/>The</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/>maximum<sp/>supported<sp/>value<sp/>of<sp/>n<sp/>differs<sp/>across<sp/>systems,<sp/>but<sp/>is<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/>cases<sp/>less<sp/>than<sp/>the<sp/>maximum<sp/>representable<sp/>value<sp/>of<sp/>a<sp/>size_t.</highlight></codeline>
<codeline lineno="866"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlmalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/>free(void*<sp/>p)</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/>Releases<sp/>the<sp/>chunk<sp/>of<sp/>memory<sp/>pointed<sp/>to<sp/>by<sp/>p,<sp/>that<sp/>had<sp/>been<sp/>previously</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/>allocated<sp/>using<sp/>malloc<sp/>or<sp/>a<sp/>related<sp/>routine<sp/>such<sp/>as<sp/>realloc.</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/>It<sp/>has<sp/>no<sp/>effect<sp/>if<sp/>p<sp/>is<sp/>null.<sp/>If<sp/>p<sp/>was<sp/>not<sp/>malloced<sp/>or<sp/>already</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/>freed,<sp/>free(p)<sp/>will<sp/>by<sp/>default<sp/>cause<sp/>the<sp/>current<sp/>program<sp/>to<sp/>abort.</highlight></codeline>
<codeline lineno="875"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>dlfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/>calloc(size_t<sp/>n_elements,<sp/>size_t<sp/>element_size);</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>n_elements<sp/>*<sp/>element_size<sp/>bytes,<sp/>with<sp/>all<sp/>locations</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/>set<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="882"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlcalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/>realloc(void*<sp/>p,<sp/>size_t<sp/>n)</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>chunk<sp/>of<sp/>size<sp/>n<sp/>that<sp/>contains<sp/>the<sp/>same<sp/>data</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/>as<sp/>does<sp/>chunk<sp/>p<sp/>up<sp/>to<sp/>the<sp/>minimum<sp/>of<sp/>(n,<sp/>p&apos;s<sp/>size)<sp/>bytes,<sp/>or<sp/>null</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/>if<sp/>no<sp/>space<sp/>is<sp/>available.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"></highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/>The<sp/>returned<sp/>pointer<sp/>may<sp/>or<sp/>may<sp/>not<sp/>be<sp/>the<sp/>same<sp/>as<sp/>p.<sp/>The<sp/>algorithm</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/>prefers<sp/>extending<sp/>p<sp/>in<sp/>most<sp/>cases<sp/>when<sp/>possible,<sp/>otherwise<sp/>it</highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/>employs<sp/>the<sp/>equivalent<sp/>of<sp/>a<sp/>malloc-copy-free<sp/>sequence.</highlight></codeline>
<codeline lineno="894"><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/>If<sp/>p<sp/>is<sp/>null,<sp/>realloc<sp/>is<sp/>equivalent<sp/>to<sp/>malloc.</highlight></codeline>
<codeline lineno="896"><highlight class="comment"></highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/>If<sp/>space<sp/>is<sp/>not<sp/>available,<sp/>realloc<sp/>returns<sp/>null,<sp/>errno<sp/>is<sp/>set<sp/>(if<sp/>on</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/><sp/>ANSI)<sp/>and<sp/>p<sp/>is<sp/>NOT<sp/>freed.</highlight></codeline>
<codeline lineno="899"><highlight class="comment"></highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/>if<sp/>n<sp/>is<sp/>for<sp/>fewer<sp/>bytes<sp/>than<sp/>already<sp/>held<sp/>by<sp/>p,<sp/>the<sp/>newly<sp/>unused</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/><sp/>space<sp/>is<sp/>lopped<sp/>off<sp/>and<sp/>freed<sp/>if<sp/>possible.<sp/><sp/>realloc<sp/>with<sp/>a<sp/>size</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/>argument<sp/>of<sp/>zero<sp/>(re)allocates<sp/>a<sp/>minimum-sized<sp/>chunk.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"></highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/>The<sp/>old<sp/>unix<sp/>realloc<sp/>convention<sp/>of<sp/>allowing<sp/>the<sp/>last-free&apos;d<sp/>chunk</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/>to<sp/>be<sp/>used<sp/>as<sp/>an<sp/>argument<sp/>to<sp/>realloc<sp/>is<sp/>not<sp/>supported.</highlight></codeline>
<codeline lineno="906"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlrealloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/>realloc_in_place(void*<sp/>p,<sp/>size_t<sp/>n)</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/><sp/>Resizes<sp/>the<sp/>space<sp/>allocated<sp/>for<sp/>p<sp/>to<sp/>size<sp/>n,<sp/>only<sp/>if<sp/>this<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/>done<sp/>without<sp/>moving<sp/>p<sp/>(i.e.,<sp/>only<sp/>if<sp/>there<sp/>is<sp/>adjacent<sp/>space</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/>available<sp/>if<sp/>n<sp/>is<sp/>greater<sp/>than<sp/>p&apos;s<sp/>current<sp/>allocated<sp/>size,<sp/>or<sp/>n<sp/>is</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>p&apos;s<sp/>size).<sp/>This<sp/>may<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>plain</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/>realloc<sp/>if<sp/>an<sp/>alternative<sp/>allocation<sp/>strategy<sp/>is<sp/>needed<sp/>upon<sp/>failure</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/>to<sp/>expand<sp/>space;<sp/>for<sp/>example,<sp/>reallocation<sp/>of<sp/>a<sp/>buffer<sp/>that<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/>memory-aligned<sp/>or<sp/>cleared.<sp/>You<sp/>can<sp/>use<sp/>realloc_in_place<sp/>to<sp/>trigger</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/>these<sp/>alternatives<sp/>only<sp/>when<sp/>needed.</highlight></codeline>
<codeline lineno="919"><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/><sp/>Returns<sp/>p<sp/>if<sp/>successful;<sp/>otherwise<sp/>null.</highlight></codeline>
<codeline lineno="921"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlrealloc_in_place(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/>memalign(size_t<sp/>alignment,<sp/>size_t<sp/>n);</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/>Returns<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>newly<sp/>allocated<sp/>chunk<sp/>of<sp/>n<sp/>bytes,<sp/>aligned</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/>in<sp/>accord<sp/>with<sp/>the<sp/>alignment<sp/>argument.</highlight></codeline>
<codeline lineno="928"><highlight class="comment"></highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/><sp/>The<sp/>alignment<sp/>argument<sp/>should<sp/>be<sp/>a<sp/>power<sp/>of<sp/>two.<sp/>If<sp/>the<sp/>argument<sp/>is</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/>not<sp/>a<sp/>power<sp/>of<sp/>two,<sp/>the<sp/>nearest<sp/>greater<sp/>power<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/>8-byte<sp/>alignment<sp/>is<sp/>guaranteed<sp/>by<sp/>normal<sp/>malloc<sp/>calls,<sp/>so<sp/>don&apos;t</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/>bother<sp/>calling<sp/>memalign<sp/>with<sp/>an<sp/>argument<sp/>of<sp/>8<sp/>or<sp/>less.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"></highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/>Overreliance<sp/>on<sp/>memalign<sp/>is<sp/>a<sp/>sure<sp/>way<sp/>to<sp/>fragment<sp/>space.</highlight></codeline>
<codeline lineno="935"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlmemalign(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/><sp/>int<sp/>posix_memalign(void**<sp/>pp,<sp/>size_t<sp/>alignment,<sp/>size_t<sp/>n);</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/><sp/>Allocates<sp/>a<sp/>chunk<sp/>of<sp/>n<sp/>bytes,<sp/>aligned<sp/>in<sp/>accord<sp/>with<sp/>the<sp/>alignment</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/><sp/>argument.<sp/>Differs<sp/>from<sp/>memalign<sp/>only<sp/>in<sp/>that<sp/>it<sp/>(1)<sp/>assigns<sp/>the</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/>allocated<sp/>memory<sp/>to<sp/>*pp<sp/>rather<sp/>than<sp/>returning<sp/>it,<sp/>(2)<sp/>fails<sp/>and</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/><sp/>returns<sp/>EINVAL<sp/>if<sp/>the<sp/>alignment<sp/>is<sp/>not<sp/>a<sp/>power<sp/>of<sp/>two<sp/>(3)<sp/>fails<sp/>and</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/>returns<sp/>ENOMEM<sp/>if<sp/>memory<sp/>cannot<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="945"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlposix_memalign(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/><sp/>valloc(size_t<sp/>n);</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/><sp/>Equivalent<sp/>to<sp/>memalign(pagesize,<sp/>n),<sp/>where<sp/>pagesize<sp/>is<sp/>the<sp/>page</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/>size<sp/>of<sp/>the<sp/>system.<sp/>If<sp/>the<sp/>pagesize<sp/>is<sp/>unknown,<sp/>4096<sp/>is<sp/>used.</highlight></codeline>
<codeline lineno="952"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlvalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/>mallopt(int<sp/>parameter_number,<sp/>int<sp/>parameter_value)</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/>Sets<sp/>tunable<sp/>parameters<sp/>The<sp/>format<sp/>is<sp/>to<sp/>provide<sp/>a</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/>(parameter-number,<sp/>parameter-value)<sp/>pair.<sp/><sp/>mallopt<sp/>then<sp/>sets<sp/>the</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/>corresponding<sp/>parameter<sp/>to<sp/>the<sp/>argument<sp/>value<sp/>if<sp/>it<sp/>can<sp/>(i.e.,<sp/>so</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/>long<sp/>as<sp/>the<sp/>value<sp/>is<sp/>meaningful),<sp/>and<sp/>returns<sp/>1<sp/>if<sp/>successful<sp/>else</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/>0.<sp/><sp/>To<sp/>workaround<sp/>the<sp/>fact<sp/>that<sp/>mallopt<sp/>is<sp/>specified<sp/>to<sp/>use<sp/>int,</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/>not<sp/>size_t<sp/>parameters,<sp/>the<sp/>value<sp/>-1<sp/>is<sp/>specially<sp/>treated<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/>maximum<sp/>unsigned<sp/>size_t<sp/>value.</highlight></codeline>
<codeline lineno="964"><highlight class="comment"></highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/>SVID/XPG/ANSI<sp/>defines<sp/>four<sp/>standard<sp/>param<sp/>numbers<sp/>for<sp/>mallopt,</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/>normally<sp/>defined<sp/>in<sp/>malloc.h.<sp/><sp/>None<sp/>of<sp/>these<sp/>are<sp/>use<sp/>in<sp/>this<sp/>malloc,</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/>so<sp/>setting<sp/>them<sp/>has<sp/>no<sp/>effect.<sp/>But<sp/>this<sp/>malloc<sp/>also<sp/>supports<sp/>other</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/>options<sp/>in<sp/>mallopt.<sp/>See<sp/>below<sp/>for<sp/>details.<sp/><sp/>Briefly,<sp/>supported</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/>parameters<sp/>are<sp/>as<sp/>follows<sp/>(listed<sp/>defaults<sp/>are<sp/>for<sp/>&quot;typical&quot;</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/>configurations).</highlight></codeline>
<codeline lineno="971"><highlight class="comment"></highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/><sp/>Symbol<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>#<sp/><sp/>default<sp/><sp/><sp/><sp/>allowed<sp/>param<sp/>values</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/>M_TRIM_THRESHOLD<sp/><sp/><sp/><sp/><sp/>-1<sp/><sp/><sp/>2*1024*1024<sp/><sp/><sp/>any<sp/><sp/><sp/>(-1<sp/>disables)</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/><sp/>M_GRANULARITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-2<sp/><sp/><sp/><sp/><sp/>page<sp/>size<sp/><sp/><sp/>any<sp/>power<sp/>of<sp/>2<sp/>&gt;=<sp/>page<sp/>size</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/>M_MMAP_THRESHOLD<sp/><sp/><sp/><sp/><sp/>-3<sp/><sp/><sp/><sp/><sp/><sp/>256*1024<sp/><sp/><sp/>any<sp/><sp/><sp/>(or<sp/>0<sp/>if<sp/>no<sp/>MMAP<sp/>support)</highlight></codeline>
<codeline lineno="976"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlmallopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/>malloc_footprint();</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>obtained<sp/>from<sp/>the<sp/>system.<sp/><sp/>The<sp/>total</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/>number<sp/>of<sp/>bytes<sp/>allocated<sp/>by<sp/>malloc,<sp/>realloc<sp/>etc.,<sp/>is<sp/>less<sp/>than<sp/>this</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/>value.<sp/>Unlike<sp/>mallinfo,<sp/>this<sp/>function<sp/>returns<sp/>only<sp/>a<sp/>precomputed</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/>result,<sp/>so<sp/>can<sp/>be<sp/>called<sp/>frequently<sp/>to<sp/>monitor<sp/>memory<sp/>consumption.</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/><sp/>Even<sp/>if<sp/>locks<sp/>are<sp/>otherwise<sp/>defined,<sp/>this<sp/>function<sp/>does<sp/>not<sp/>use<sp/>them,</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/><sp/>so<sp/>results<sp/>might<sp/>not<sp/>be<sp/>up<sp/>to<sp/>date.</highlight></codeline>
<codeline lineno="987"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_footprint(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/>malloc_max_footprint();</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/>Returns<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>obtained<sp/>from<sp/>the<sp/>system.<sp/>This</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/>value<sp/>will<sp/>be<sp/>greater<sp/>than<sp/>current<sp/>footprint<sp/>if<sp/>deallocated<sp/>space</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/>has<sp/>been<sp/>reclaimed<sp/>by<sp/>the<sp/>system.<sp/>The<sp/>peak<sp/>number<sp/>of<sp/>bytes<sp/>allocated</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/><sp/>by<sp/>malloc,<sp/>realloc<sp/>etc.,<sp/>is<sp/>less<sp/>than<sp/>this<sp/>value.<sp/>Unlike<sp/>mallinfo,</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/>this<sp/>function<sp/>returns<sp/>only<sp/>a<sp/>precomputed<sp/>result,<sp/>so<sp/>can<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/><sp/>frequently<sp/>to<sp/>monitor<sp/>memory<sp/>consumption.<sp/><sp/>Even<sp/>if<sp/>locks<sp/>are</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/>otherwise<sp/>defined,<sp/>this<sp/>function<sp/>does<sp/>not<sp/>use<sp/>them,<sp/>so<sp/>results<sp/>might</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/>not<sp/>be<sp/>up<sp/>to<sp/>date.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_max_footprint(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/>malloc_footprint_limit();</highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>the<sp/>heap<sp/>is<sp/>allowed<sp/>to<sp/>obtain<sp/>from</highlight></codeline>
<codeline lineno="1006"><highlight class="comment"><sp/><sp/>the<sp/>system,<sp/>returning<sp/>the<sp/>last<sp/>value<sp/>returned<sp/>by</highlight></codeline>
<codeline lineno="1007"><highlight class="comment"><sp/><sp/>malloc_set_footprint_limit,<sp/>or<sp/>the<sp/>maximum<sp/>size_t<sp/>value<sp/>if</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/>never<sp/>set.<sp/>The<sp/>returned<sp/>value<sp/>reflects<sp/>a<sp/>permission.<sp/>There<sp/>is<sp/>no</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/>guarantee<sp/>that<sp/>this<sp/>number<sp/>of<sp/>bytes<sp/>can<sp/>actually<sp/>be<sp/>obtained<sp/>from</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="1011"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_footprint_limit();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/>malloc_set_footprint_limit();</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/>Sets<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>obtain<sp/>from<sp/>the<sp/>system,<sp/>causing</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/>failure<sp/>returns<sp/>from<sp/>malloc<sp/>and<sp/>related<sp/>functions<sp/>upon<sp/>attempts<sp/>to</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/><sp/>exceed<sp/>this<sp/>value.<sp/>The<sp/>argument<sp/>value<sp/>may<sp/>be<sp/>subject<sp/>to<sp/>page</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/>rounding<sp/>to<sp/>an<sp/>enforceable<sp/>limit;<sp/>this<sp/>actual<sp/>value<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/>Using<sp/>an<sp/>argument<sp/>of<sp/>the<sp/>maximum<sp/>possible<sp/>size_t<sp/>effectively</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/><sp/>disables<sp/>checks.<sp/>If<sp/>the<sp/>argument<sp/>is<sp/>less<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/><sp/>current<sp/>malloc_footprint,<sp/>then<sp/>all<sp/>future<sp/>allocations<sp/>that<sp/>require</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/><sp/>additional<sp/>system<sp/>memory<sp/>will<sp/>fail.<sp/>However,<sp/>invocation<sp/>cannot</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/><sp/>retroactively<sp/>deallocate<sp/>existing<sp/>used<sp/>memory.</highlight></codeline>
<codeline lineno="1025"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_set_footprint_limit(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MALLOC_INSPECT_ALL</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/>malloc_inspect_all(void(*handler)(void<sp/>*start,</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>*end,</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>used_bytes,</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>callback_arg),</highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void*<sp/>arg);</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/>Traverses<sp/>the<sp/>heap<sp/>and<sp/>calls<sp/>the<sp/>given<sp/>handler<sp/>for<sp/>each<sp/>managed</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/>region,<sp/>skipping<sp/>all<sp/>bytes<sp/>that<sp/>are<sp/>(or<sp/>may<sp/>be)<sp/>used<sp/>for<sp/>bookkeeping</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/>purposes.<sp/><sp/>Traversal<sp/>does<sp/>not<sp/>include<sp/>include<sp/>chunks<sp/>that<sp/>have<sp/>been</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/>directly<sp/>memory<sp/>mapped.<sp/>Each<sp/>reported<sp/>region<sp/>begins<sp/>at<sp/>the<sp/>start</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/>address,<sp/>and<sp/>continues<sp/>up<sp/>to<sp/>but<sp/>not<sp/>including<sp/>the<sp/>end<sp/>address.<sp/><sp/>The</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/>first<sp/>used_bytes<sp/>of<sp/>the<sp/>region<sp/>contain<sp/>allocated<sp/>data.<sp/>If</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/><sp/>used_bytes<sp/>is<sp/>zero,<sp/>the<sp/>region<sp/>is<sp/>unallocated.<sp/>The<sp/>handler<sp/>is</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/>invoked<sp/>with<sp/>the<sp/>given<sp/>callback<sp/>argument.<sp/>If<sp/>locks<sp/>are<sp/>defined,<sp/>they</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/>are<sp/>held<sp/>during<sp/>the<sp/>entire<sp/>traversal.<sp/>It<sp/>is<sp/>a<sp/>bad<sp/>idea<sp/>to<sp/>invoke</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/>other<sp/>malloc<sp/>functions<sp/>from<sp/>within<sp/>the<sp/>handler.</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/>For<sp/>example,<sp/>to<sp/>count<sp/>the<sp/>number<sp/>of<sp/>in-use<sp/>chunks<sp/>with<sp/>size<sp/>greater</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/>than<sp/>1000,<sp/>you<sp/>could<sp/>write:</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/>static<sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/>void<sp/>count_chunks(void*<sp/>start,<sp/>void*<sp/>end,<sp/>size_t<sp/>used,<sp/>void*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(used<sp/>&gt;=<sp/>1000)<sp/>++count;</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/><sp/>then:</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/><sp/><sp/>malloc_inspect_all(count_chunks,<sp/>NULL);</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"></highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/>malloc_inspect_all<sp/>is<sp/>compiled<sp/>only<sp/>if<sp/>MALLOC_INSPECT_ALL<sp/>is<sp/>defined.</highlight></codeline>
<codeline lineno="1056"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dlmalloc_inspect_all(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*handler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*),</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLOC_INSPECT_ALL<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1061"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/><sp/>mallinfo()</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/>Returns<sp/>(by<sp/>copy)<sp/>a<sp/>struct<sp/>containing<sp/>various<sp/>summary<sp/>statistics:</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"></highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/>arena:<sp/><sp/><sp/><sp/><sp/>current<sp/>total<sp/>non-mmapped<sp/>bytes<sp/>allocated<sp/>from<sp/>system</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/>ordblks:<sp/><sp/><sp/>the<sp/>number<sp/>of<sp/>free<sp/>chunks</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/><sp/>smblks:<sp/><sp/><sp/><sp/>always<sp/>zero.</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/>hblks:<sp/><sp/><sp/><sp/><sp/>current<sp/>number<sp/>of<sp/>mmapped<sp/>regions</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/>hblkhd:<sp/><sp/><sp/><sp/>total<sp/>bytes<sp/>held<sp/>in<sp/>mmapped<sp/>regions</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/><sp/>usmblks:<sp/><sp/><sp/>the<sp/>maximum<sp/>total<sp/>allocated<sp/>space.<sp/>This<sp/>will<sp/>be<sp/>greater</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>than<sp/>current<sp/>total<sp/>if<sp/>trimming<sp/>has<sp/>occurred.</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/>fsmblks:<sp/><sp/><sp/>always<sp/>zero</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/>uordblks:<sp/><sp/>current<sp/>total<sp/>allocated<sp/>space<sp/>(normal<sp/>or<sp/>mmapped)</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/>fordblks:<sp/><sp/>total<sp/>free<sp/>space</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/>keepcost:<sp/><sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>could<sp/>ideally<sp/>be<sp/>released</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>to<sp/>system<sp/>via<sp/>malloc_trim.<sp/>(&quot;ideally&quot;<sp/>means<sp/>that</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>ignores<sp/>page<sp/>restrictions<sp/>etc.)</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"></highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/>Because<sp/>these<sp/>fields<sp/>are<sp/>ints,<sp/>but<sp/>internal<sp/>bookkeeping<sp/>may</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/>be<sp/>kept<sp/>as<sp/>longs,<sp/>the<sp/>reported<sp/>values<sp/>may<sp/>wrap<sp/>around<sp/>zero<sp/>and</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/>thus<sp/>be<sp/>inaccurate.</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>dlmallinfo(void);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1087"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/>independent_calloc(size_t<sp/>n_elements,<sp/>size_t<sp/>element_size,<sp/>void*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"></highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/>independent_calloc<sp/>is<sp/>similar<sp/>to<sp/>calloc,<sp/>but<sp/>instead<sp/>of<sp/>returning<sp/>a</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"><sp/><sp/>single<sp/>cleared<sp/>space,<sp/>it<sp/>returns<sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>n_elements</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/>independent<sp/>elements<sp/>that<sp/>can<sp/>hold<sp/>contents<sp/>of<sp/>size<sp/>elem_size,<sp/>each</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/>of<sp/>which<sp/>starts<sp/>out<sp/>cleared,<sp/>and<sp/>can<sp/>be<sp/>independently<sp/>freed,</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/>realloc&apos;ed<sp/>etc.<sp/>The<sp/>elements<sp/>are<sp/>guaranteed<sp/>to<sp/>be<sp/>adjacently</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"><sp/><sp/>allocated<sp/>(this<sp/>is<sp/>not<sp/>guaranteed<sp/>to<sp/>occur<sp/>with<sp/>multiple<sp/>callocs<sp/>or</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/>mallocs),<sp/>which<sp/>may<sp/>also<sp/>improve<sp/>cache<sp/>locality<sp/>in<sp/>some</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/>applications.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"></highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/><sp/>The<sp/>&quot;chunks&quot;<sp/>argument<sp/>is<sp/>optional<sp/>(i.e.,<sp/>may<sp/>be<sp/>null,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/><sp/>probably<sp/>the<sp/>most<sp/>typical<sp/>usage).<sp/>If<sp/>it<sp/>is<sp/>null,<sp/>the<sp/>returned<sp/>array</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/>is<sp/>itself<sp/>dynamically<sp/>allocated<sp/>and<sp/>should<sp/>also<sp/>be<sp/>freed<sp/>when<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/><sp/>no<sp/>longer<sp/>needed.<sp/>Otherwise,<sp/>the<sp/>chunks<sp/>array<sp/>must<sp/>be<sp/>of<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/><sp/>n_elements<sp/>in<sp/>length.<sp/>It<sp/>is<sp/>filled<sp/>in<sp/>with<sp/>the<sp/>pointers<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/>chunks.</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"></highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/>In<sp/>either<sp/>case,<sp/>independent_calloc<sp/>returns<sp/>this<sp/>pointer<sp/>array,<sp/>or</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/>null<sp/>if<sp/>the<sp/>allocation<sp/>failed.<sp/><sp/>If<sp/>n_elements<sp/>is<sp/>zero<sp/>and<sp/>&quot;chunks&quot;</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/><sp/>is<sp/>null,<sp/>it<sp/>returns<sp/>a<sp/>chunk<sp/>representing<sp/>an<sp/>array<sp/>with<sp/>zero<sp/>elements</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/>(which<sp/>should<sp/>be<sp/>freed<sp/>if<sp/>not<sp/>wanted).</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"></highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/>Each<sp/>element<sp/>must<sp/>be<sp/>freed<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed.<sp/>This<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/>done<sp/>all<sp/>at<sp/>once<sp/>using<sp/>bulk_free.</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"></highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/>independent_calloc<sp/>simplifies<sp/>and<sp/>speeds<sp/>up<sp/>implementations<sp/>of<sp/>many</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/>kinds<sp/>of<sp/>pools.<sp/><sp/>It<sp/>may<sp/>also<sp/>be<sp/>useful<sp/>when<sp/>constructing<sp/>large<sp/>data</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/>structures<sp/>that<sp/>initially<sp/>have<sp/>a<sp/>fixed<sp/>number<sp/>of<sp/>fixed-sized<sp/>nodes,</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/>but<sp/>the<sp/>number<sp/>is<sp/>not<sp/>known<sp/>at<sp/>compile<sp/>time,<sp/>and<sp/>some<sp/>of<sp/>the<sp/>nodes</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/>may<sp/>later<sp/>need<sp/>to<sp/>be<sp/>freed.<sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"></highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/>struct<sp/>Node<sp/>{<sp/>int<sp/>item;<sp/>struct<sp/>Node*<sp/>next;<sp/>};</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"></highlight></codeline>
<codeline lineno="1123"><highlight class="comment"><sp/><sp/>struct<sp/>Node*<sp/>build_list()<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Node**<sp/>pool;</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>read_number_of_nodes_needed();</highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(n<sp/>&lt;=<sp/>0)<sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/><sp/>pool<sp/>=<sp/>(struct<sp/>Node**)(independent_calloc(n,<sp/>sizeof(struct<sp/>Node),<sp/>0);</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(pool<sp/>==<sp/>0)<sp/>die();</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>organize<sp/>into<sp/>a<sp/>linked<sp/>list...</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Node*<sp/>first<sp/>=<sp/>pool[0];</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n-1;<sp/>++i)</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pool[i]-&gt;next<sp/>=<sp/>pool[i+1];</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/>free(pool);<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>now<sp/>free<sp/>the<sp/>array<sp/>(or<sp/>not,<sp/>if<sp/>it<sp/>is<sp/>needed<sp/>later)</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>first;</highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>dlindependent_calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/>independent_comalloc(size_t<sp/>n_elements,<sp/>size_t<sp/>sizes[],<sp/>void*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"></highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/>independent_comalloc<sp/>allocates,<sp/>all<sp/>at<sp/>once,<sp/>a<sp/>set<sp/>of<sp/>n_elements</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/>chunks<sp/>with<sp/>sizes<sp/>indicated<sp/>in<sp/>the<sp/>&quot;sizes&quot;<sp/>array.<sp/><sp/><sp/><sp/>It<sp/>returns</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/>an<sp/>array<sp/>of<sp/>pointers<sp/>to<sp/>these<sp/>elements,<sp/>each<sp/>of<sp/>which<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/>independently<sp/>freed,<sp/>realloc&apos;ed<sp/>etc.<sp/>The<sp/>elements<sp/>are<sp/>guaranteed<sp/>to</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/>be<sp/>adjacently<sp/>allocated<sp/>(this<sp/>is<sp/>not<sp/>guaranteed<sp/>to<sp/>occur<sp/>with</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/>multiple<sp/>callocs<sp/>or<sp/>mallocs),<sp/>which<sp/>may<sp/>also<sp/>improve<sp/>cache<sp/>locality</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/>in<sp/>some<sp/>applications.</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"></highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/><sp/>The<sp/>&quot;chunks&quot;<sp/>argument<sp/>is<sp/>optional<sp/>(i.e.,<sp/>may<sp/>be<sp/>null).<sp/>If<sp/>it<sp/>is<sp/>null</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/>the<sp/>returned<sp/>array<sp/>is<sp/>itself<sp/>dynamically<sp/>allocated<sp/>and<sp/>should<sp/>also</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"><sp/><sp/>be<sp/>freed<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed.<sp/>Otherwise,<sp/>the<sp/>chunks<sp/>array</highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/>must<sp/>be<sp/>of<sp/>at<sp/>least<sp/>n_elements<sp/>in<sp/>length.<sp/>It<sp/>is<sp/>filled<sp/>in<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/>pointers<sp/>to<sp/>the<sp/>chunks.</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"></highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/>In<sp/>either<sp/>case,<sp/>independent_comalloc<sp/>returns<sp/>this<sp/>pointer<sp/>array,<sp/>or</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/>null<sp/>if<sp/>the<sp/>allocation<sp/>failed.<sp/><sp/>If<sp/>n_elements<sp/>is<sp/>zero<sp/>and<sp/>chunks<sp/>is</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/>null,<sp/>it<sp/>returns<sp/>a<sp/>chunk<sp/>representing<sp/>an<sp/>array<sp/>with<sp/>zero<sp/>elements</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/>(which<sp/>should<sp/>be<sp/>freed<sp/>if<sp/>not<sp/>wanted).</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"></highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/>Each<sp/>element<sp/>must<sp/>be<sp/>freed<sp/>when<sp/>it<sp/>is<sp/>no<sp/>longer<sp/>needed.<sp/>This<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/>done<sp/>all<sp/>at<sp/>once<sp/>using<sp/>bulk_free.</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"></highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/>independent_comallac<sp/>differs<sp/>from<sp/>independent_calloc<sp/>in<sp/>that<sp/>each</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/>element<sp/>may<sp/>have<sp/>a<sp/>different<sp/>size,<sp/>and<sp/>also<sp/>that<sp/>it<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/>automatically<sp/>clear<sp/>elements.</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"></highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/>independent_comalloc<sp/>can<sp/>be<sp/>used<sp/>to<sp/>speed<sp/>up<sp/>allocation<sp/>in<sp/>cases</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/>where<sp/>several<sp/>structs<sp/>or<sp/>objects<sp/>must<sp/>always<sp/>be<sp/>allocated<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/>same<sp/>time.<sp/><sp/>For<sp/>example:</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"></highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/>struct<sp/>Head<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/>struct<sp/>Foot<sp/>{<sp/>...<sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"></highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/>void<sp/>send_message(char*<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>msglen<sp/>=<sp/>strlen(msg);</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/><sp/><sp/><sp/>size_t<sp/>sizes[3]<sp/>=<sp/>{<sp/>sizeof(struct<sp/>Head),<sp/>msglen,<sp/>sizeof(struct<sp/>Foot)<sp/>};</highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/><sp/><sp/><sp/>void*<sp/>chunks[3];</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(independent_comalloc(3,<sp/>sizes,<sp/>chunks)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>die();</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Head*<sp/>head<sp/>=<sp/>(struct<sp/>Head*)(chunks[0]);</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/><sp/><sp/><sp/>char*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>body<sp/>=<sp/>(char*)(chunks[1]);</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/><sp/><sp/><sp/>struct<sp/>Foot*<sp/>foot<sp/>=<sp/>(struct<sp/>Foot*)(chunks[2]);</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"></highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/>In<sp/>general<sp/>though,<sp/>independent_comalloc<sp/>is<sp/>worth<sp/>using<sp/>only<sp/>for</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/><sp/>larger<sp/>values<sp/>of<sp/>n_elements.<sp/>For<sp/>small<sp/>values,<sp/>you<sp/>probably<sp/>won&apos;t</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/><sp/>detect<sp/>enough<sp/>difference<sp/>from<sp/>series<sp/>of<sp/>malloc<sp/>calls<sp/>to<sp/>bother.</highlight></codeline>
<codeline lineno="1190"><highlight class="comment"></highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/>Overuse<sp/>of<sp/>independent_comalloc<sp/>can<sp/>increase<sp/>overall<sp/>memory<sp/>usage,</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/>since<sp/>it<sp/>cannot<sp/>reuse<sp/>existing<sp/>noncontiguous<sp/>small<sp/>chunks<sp/>that</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/>might<sp/>be<sp/>available<sp/>for<sp/>some<sp/>of<sp/>the<sp/>elements.</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>dlindependent_comalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/>bulk_free(void*<sp/>array[],<sp/>size_t<sp/>n_elements)</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/>Frees<sp/>and<sp/>clears<sp/>(sets<sp/>to<sp/>null)<sp/>each<sp/>non-null<sp/>pointer<sp/>in<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/>array.<sp/><sp/>This<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>faster<sp/>than<sp/>freeing<sp/>them<sp/>one-by-one.</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/>If<sp/>footers<sp/>are<sp/>used,<sp/>pointers<sp/>that<sp/>have<sp/>been<sp/>allocated<sp/>in<sp/>different</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/>mspaces<sp/>are<sp/>not<sp/>freed<sp/>or<sp/>cleared,<sp/>and<sp/>the<sp/>count<sp/>of<sp/>all<sp/>such<sp/>pointers</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/>is<sp/>returned.<sp/><sp/>For<sp/>large<sp/>arrays<sp/>of<sp/>pointers<sp/>with<sp/>poor<sp/>locality,<sp/>it</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/>may<sp/>be<sp/>worthwhile<sp/>to<sp/>sort<sp/>this<sp/>array<sp/>before<sp/>calling<sp/>bulk_free.</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>dlbulk_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/>pvalloc(size_t<sp/>n);</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/>Equivalent<sp/>to<sp/>valloc(minimum-page-that-holds(n)),<sp/>that<sp/>is,</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/>round<sp/>up<sp/>n<sp/>to<sp/>nearest<sp/>pagesize.</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/>dlpvalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/>malloc_trim(size_t<sp/>pad);</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"></highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/>If<sp/>possible,<sp/>gives<sp/>memory<sp/>back<sp/>to<sp/>the<sp/>system<sp/>(via<sp/>negative<sp/>arguments</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/>to<sp/>sbrk)<sp/>if<sp/>there<sp/>is<sp/>unused<sp/>memory<sp/>at<sp/>the<sp/>`high&apos;<sp/>end<sp/>of<sp/>the<sp/>malloc</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/>pool<sp/>or<sp/>in<sp/>unused<sp/>MMAP<sp/>segments.<sp/>You<sp/>can<sp/>call<sp/>this<sp/>after<sp/>freeing</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/><sp/>large<sp/>blocks<sp/>of<sp/>memory<sp/>to<sp/>potentially<sp/>reduce<sp/>the<sp/>system-level<sp/>memory</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/>requirements<sp/>of<sp/>a<sp/>program.<sp/>However,<sp/>it<sp/>cannot<sp/>guarantee<sp/>to<sp/>reduce</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/>memory.<sp/>Under<sp/>some<sp/>allocation<sp/>patterns,<sp/>some<sp/>large<sp/>free<sp/>blocks<sp/>of</highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/>memory<sp/>will<sp/>be<sp/>locked<sp/>between<sp/>two<sp/>used<sp/>chunks,<sp/>so<sp/>they<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/>given<sp/>back<sp/>to<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"></highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/>The<sp/>`pad&apos;<sp/>argument<sp/>to<sp/>malloc_trim<sp/>represents<sp/>the<sp/>amount<sp/>of<sp/>free</highlight></codeline>
<codeline lineno="1228"><highlight class="comment"><sp/><sp/>trailing<sp/>space<sp/>to<sp/>leave<sp/>untrimmed.<sp/>If<sp/>this<sp/>argument<sp/>is<sp/>zero,<sp/>only</highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/>the<sp/>minimum<sp/>amount<sp/>of<sp/>memory<sp/>to<sp/>maintain<sp/>internal<sp/>data<sp/>structures</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/>will<sp/>be<sp/>left.<sp/>Non-zero<sp/>arguments<sp/>can<sp/>be<sp/>supplied<sp/>to<sp/>maintain<sp/>enough</highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/>trailing<sp/>space<sp/>to<sp/>service<sp/>future<sp/>expected<sp/>allocations<sp/>without<sp/>having</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"><sp/><sp/>to<sp/>re-obtain<sp/>memory<sp/>from<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="1233"><highlight class="comment"></highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/>Malloc_trim<sp/>returns<sp/>1<sp/>if<sp/>it<sp/>actually<sp/>released<sp/>any<sp/>memory,<sp/>else<sp/>0.</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>dlmalloc_trim(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/>malloc_stats();</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"><sp/><sp/>Prints<sp/>on<sp/>stderr<sp/>the<sp/>amount<sp/>of<sp/>space<sp/>obtained<sp/>from<sp/>the<sp/>system<sp/>(both</highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/>via<sp/>sbrk<sp/>and<sp/>mmap),<sp/>the<sp/>maximum<sp/>amount<sp/>(which<sp/>may<sp/>be<sp/>more<sp/>than</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"><sp/><sp/>current<sp/>if<sp/>malloc_trim<sp/>and/or<sp/>munmap<sp/>got<sp/>called),<sp/>and<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="1243"><highlight class="comment"><sp/><sp/>number<sp/>of<sp/>bytes<sp/>allocated<sp/>via<sp/>malloc<sp/>(or<sp/>realloc,<sp/>etc)<sp/>but<sp/>not<sp/>yet</highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/>freed.<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>allocated,<sp/>not<sp/>the</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/>number<sp/>requested.<sp/>It<sp/>will<sp/>be<sp/>larger<sp/>than<sp/>the<sp/>number<sp/>requested</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/>because<sp/>of<sp/>alignment<sp/>and<sp/>bookkeeping<sp/>overhead.<sp/>Because<sp/>it<sp/>includes</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"><sp/><sp/>alignment<sp/>wastage<sp/>as<sp/>being<sp/>in<sp/>use,<sp/>this<sp/>figure<sp/>may<sp/>be<sp/>greater<sp/>than</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/>zero<sp/>even<sp/>when<sp/>no<sp/>user-level<sp/>chunks<sp/>are<sp/>allocated.</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"></highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/>The<sp/>reported<sp/>current<sp/>and<sp/>maximum<sp/>system<sp/>memory<sp/>can<sp/>be<sp/>inaccurate<sp/>if</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"><sp/><sp/>a<sp/>program<sp/>makes<sp/>other<sp/>calls<sp/>to<sp/>system<sp/>memory<sp/>allocation<sp/>functions</highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/>(normally<sp/>sbrk)<sp/>outside<sp/>of<sp/>malloc.</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"></highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/><sp/>malloc_stats<sp/>prints<sp/>only<sp/>the<sp/>most<sp/>commonly<sp/>interesting<sp/>statistics.</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>can<sp/>be<sp/>obtained<sp/>by<sp/>calling<sp/>mallinfo.</highlight></codeline>
<codeline lineno="1256"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>dlmalloc_stats(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"><sp/><sp/>malloc_usable_size(void*<sp/>p);</highlight></codeline>
<codeline lineno="1261"><highlight class="comment"></highlight></codeline>
<codeline lineno="1262"><highlight class="comment"><sp/><sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>you<sp/>can<sp/>actually<sp/>use<sp/>in</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/><sp/>an<sp/>allocated<sp/>chunk,<sp/>which<sp/>may<sp/>be<sp/>more<sp/>than<sp/>you<sp/>requested<sp/>(although</highlight></codeline>
<codeline lineno="1264"><highlight class="comment"><sp/><sp/>often<sp/>not)<sp/>due<sp/>to<sp/>alignment<sp/>and<sp/>minimum<sp/>size<sp/>constraints.</highlight></codeline>
<codeline lineno="1265"><highlight class="comment"><sp/><sp/>You<sp/>can<sp/>use<sp/>this<sp/>many<sp/>bytes<sp/>without<sp/>worrying<sp/>about</highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/>overwriting<sp/>other<sp/>allocated<sp/>objects.<sp/>This<sp/>is<sp/>not<sp/>a<sp/>particularly<sp/>great</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/>programming<sp/>practice.<sp/>malloc_usable_size<sp/>can<sp/>be<sp/>more<sp/>useful<sp/>in</highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/>debugging<sp/>and<sp/>assertions,<sp/>for<sp/>example:</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"></highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/><sp/>p<sp/>=<sp/>malloc(n);</highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/><sp/>assert(malloc_usable_size(p)<sp/>&gt;=<sp/>256);</highlight></codeline>
<codeline lineno="1272"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_usable_size(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MSPACES</highlight></codeline>
<codeline lineno="1278"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/>mspace<sp/>is<sp/>an<sp/>opaque<sp/>type<sp/>representing<sp/>an<sp/>independent</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/>region<sp/>of<sp/>space<sp/>that<sp/>supports<sp/>mspace_malloc,<sp/>etc.</highlight></codeline>
<codeline lineno="1282"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/>create_mspace<sp/>creates<sp/>and<sp/>returns<sp/>a<sp/>new<sp/>independent<sp/>space<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/>given<sp/>initial<sp/>capacity,<sp/>or,<sp/>if<sp/>0,<sp/>the<sp/>default<sp/>granularity<sp/>size.<sp/><sp/>It</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/><sp/>returns<sp/>null<sp/>if<sp/>there<sp/>is<sp/>no<sp/>system<sp/>memory<sp/>available<sp/>to<sp/>create<sp/>the</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/><sp/>space.<sp/><sp/>If<sp/>argument<sp/>locked<sp/>is<sp/>non-zero,<sp/>the<sp/>space<sp/>uses<sp/>a<sp/>separate</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/><sp/>lock<sp/>to<sp/>control<sp/>access.<sp/>The<sp/>capacity<sp/>of<sp/>the<sp/>space<sp/>will<sp/>grow</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/>dynamically<sp/>as<sp/>needed<sp/>to<sp/>service<sp/>mspace_malloc<sp/>requests.<sp/><sp/>You<sp/>can</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/>control<sp/>the<sp/>sizes<sp/>of<sp/>incremental<sp/>increases<sp/>of<sp/>this<sp/>space<sp/>by</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/>compiling<sp/>with<sp/>a<sp/>different<sp/>DEFAULT_GRANULARITY<sp/>or<sp/>dynamically</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/><sp/>setting<sp/>with<sp/>mallopt(M_GRANULARITY,<sp/>value).</highlight></codeline>
<codeline lineno="1295"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal">DLMALLOC_EXPORT<sp/>mspace<sp/>create_mspace(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/>destroy_mspace<sp/>destroys<sp/>the<sp/>given<sp/>space,<sp/>and<sp/>attempts<sp/>to<sp/>return<sp/>all</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/>of<sp/>its<sp/>memory<sp/>back<sp/>to<sp/>the<sp/>system,<sp/>returning<sp/>the<sp/>total<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/>bytes<sp/>freed.<sp/>After<sp/>destruction,<sp/>the<sp/>results<sp/>of<sp/>access<sp/>to<sp/>all<sp/>memory</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/>used<sp/>by<sp/>the<sp/>space<sp/>become<sp/>undefined.</highlight></codeline>
<codeline lineno="1303"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destroy_mspace(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/><sp/>create_mspace_with_base<sp/>uses<sp/>the<sp/>memory<sp/>supplied<sp/>as<sp/>the<sp/>initial<sp/>base</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/>of<sp/>a<sp/>new<sp/>mspace.<sp/>Part<sp/>(less<sp/>than<sp/>128*sizeof(size_t)<sp/>bytes)<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/><sp/>space<sp/>is<sp/>used<sp/>for<sp/>bookkeeping,<sp/>so<sp/>the<sp/>capacity<sp/>must<sp/>be<sp/>at<sp/>least<sp/>this</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/><sp/>large.<sp/>(Otherwise<sp/>0<sp/>is<sp/>returned.)<sp/>When<sp/>this<sp/>initial<sp/>space<sp/>is</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/>exhausted,<sp/>additional<sp/>memory<sp/>will<sp/>be<sp/>obtained<sp/>from<sp/>the<sp/>system.</highlight></codeline>
<codeline lineno="1312"><highlight class="comment"><sp/><sp/>Destroying<sp/>this<sp/>space<sp/>will<sp/>deallocate<sp/>all<sp/>additionally<sp/>allocated</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/>space<sp/>(if<sp/>possible)<sp/>but<sp/>not<sp/>the<sp/>initial<sp/>base.</highlight></codeline>
<codeline lineno="1314"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal">DLMALLOC_EXPORT<sp/>mspace<sp/>create_mspace_with_base(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>base,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/>mspace_track_large_chunks<sp/>controls<sp/>whether<sp/>requests<sp/>for<sp/>large<sp/>chunks</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/>are<sp/>allocated<sp/>in<sp/>their<sp/>own<sp/>untracked<sp/>mmapped<sp/>regions,<sp/>separate<sp/>from</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/><sp/>others<sp/>in<sp/>this<sp/>mspace.<sp/>By<sp/>default<sp/>large<sp/>chunks<sp/>are<sp/>not<sp/>tracked,</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/>which<sp/>reduces<sp/>fragmentation.<sp/>However,<sp/>such<sp/>chunks<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/>necessarily<sp/>released<sp/>to<sp/>the<sp/>system<sp/>upon<sp/>destroy_mspace.<sp/><sp/>Enabling</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/>tracking<sp/>by<sp/>setting<sp/>to<sp/>true<sp/>may<sp/>increase<sp/>fragmentation,<sp/>but<sp/>avoids</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/>leakage<sp/>when<sp/>relying<sp/>on<sp/>destroy_mspace<sp/>to<sp/>release<sp/>all<sp/>memory</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/>allocated<sp/>using<sp/>this<sp/>space.<sp/><sp/>The<sp/>function<sp/>returns<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/>setting.</highlight></codeline>
<codeline lineno="1327"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_track_large_chunks(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"><sp/><sp/>mspace_malloc<sp/>behaves<sp/>as<sp/>malloc,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1334"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_malloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/>mspace_free<sp/>behaves<sp/>as<sp/>free,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"></highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/>If<sp/>compiled<sp/>with<sp/>FOOTERS==1,<sp/>mspace_free<sp/>is<sp/>not<sp/>actually<sp/>needed.</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"><sp/><sp/>free<sp/>may<sp/>be<sp/>called<sp/>instead<sp/>of<sp/>mspace_free<sp/>because<sp/>freed<sp/>chunks<sp/>from</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/>any<sp/>space<sp/>are<sp/>handled<sp/>by<sp/>their<sp/>originating<sp/>spaces.</highlight></codeline>
<codeline lineno="1344"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_free(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/>mspace_realloc<sp/>behaves<sp/>as<sp/>realloc,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"></highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/>If<sp/>compiled<sp/>with<sp/>FOOTERS==1,<sp/>mspace_realloc<sp/>is<sp/>not<sp/>actually</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/><sp/>needed.<sp/><sp/>realloc<sp/>may<sp/>be<sp/>called<sp/>instead<sp/>of<sp/>mspace_realloc<sp/>because</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/><sp/>realloced<sp/>chunks<sp/>from<sp/>any<sp/>space<sp/>are<sp/>handled<sp/>by<sp/>their<sp/>originating</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/><sp/>spaces.</highlight></codeline>
<codeline lineno="1355"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_realloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/><sp/>mspace_calloc<sp/>behaves<sp/>as<sp/>calloc,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1361"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_calloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1365"><highlight class="comment"><sp/><sp/>mspace_memalign<sp/>behaves<sp/>as<sp/>memalign,<sp/>but<sp/>operates<sp/>within</highlight></codeline>
<codeline lineno="1366"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1367"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_memalign(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/>mspace_independent_calloc<sp/>behaves<sp/>as<sp/>independent_calloc,<sp/>but</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/>operates<sp/>within<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1373"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>mspace_independent_calloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/>mspace_independent_comalloc<sp/>behaves<sp/>as<sp/>independent_comalloc,<sp/>but</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/><sp/>operates<sp/>within<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1380"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>mspace_independent_comalloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizes[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[]);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/>mspace_footprint()<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>obtained<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/>system<sp/>for<sp/>this<sp/>space.</highlight></codeline>
<codeline lineno="1387"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_footprint(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/><sp/>mspace_max_footprint()<sp/>returns<sp/>the<sp/>peak<sp/>number<sp/>of<sp/>bytes<sp/>obtained<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/>system<sp/>for<sp/>this<sp/>space.</highlight></codeline>
<codeline lineno="1393"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_max_footprint(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight></codeline>
<codeline lineno="1398"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/><sp/>mspace_mallinfo<sp/>behaves<sp/>as<sp/>mallinfo,<sp/>but<sp/>reports<sp/>properties<sp/>of</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1401"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>mspace_mallinfo(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1404"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/><sp/>malloc_usable_size(void*<sp/>p)<sp/>behaves<sp/>the<sp/>same<sp/>as<sp/>malloc_usable_size;</highlight></codeline>
<codeline lineno="1407"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_usable_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/><sp/>mspace_malloc_stats<sp/>behaves<sp/>as<sp/>malloc_stats,<sp/>but<sp/>reports</highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/>properties<sp/>of<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1413"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_malloc_stats(mspace<sp/>msp);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1417"><highlight class="comment"><sp/><sp/>mspace_trim<sp/>behaves<sp/>as<sp/>malloc_trim,<sp/>but</highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/>operates<sp/>within<sp/>the<sp/>given<sp/>space.</highlight></codeline>
<codeline lineno="1419"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_trim(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pad);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/>An<sp/>alias<sp/>for<sp/>mallopt.</highlight></codeline>
<codeline lineno="1424"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal">DLMALLOC_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_mallopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1428"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1430"><highlight class="preprocessor"></highlight><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1432"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/><sp/>========================================================================</highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/>To<sp/>make<sp/>a<sp/>fully<sp/>customizable<sp/>malloc.h<sp/>header<sp/>file,<sp/>cut<sp/>everything</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/><sp/>above<sp/>this<sp/>line,<sp/>put<sp/>into<sp/>file<sp/>malloc.h,<sp/>edit<sp/>to<sp/>suit,<sp/>and<sp/>#include<sp/>it</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/><sp/>on<sp/>the<sp/>next<sp/>line,<sp/>as<sp/>well<sp/>as<sp/>in<sp/>programs<sp/>that<sp/>use<sp/>this<sp/>malloc.</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/><sp/>========================================================================</highlight></codeline>
<codeline lineno="1439"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#include<sp/>&quot;malloc.h&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="comment">/*------------------------------<sp/>internal<sp/>#includes<sp/>----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="1446"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4146<sp/>)<sp/></highlight><highlight class="comment">/*<sp/>no<sp/>&quot;unsigned&quot;<sp/>warnings<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1447"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_MSC_VER<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1448"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLOC_STATS</highlight></codeline>
<codeline lineno="1449"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>printing<sp/>in<sp/>malloc_stats<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLOC_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_ERRNO_H</highlight></codeline>
<codeline lineno="1452"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>MALLOC_FAILURE_ACTION<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LACKS_ERRNO_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1454"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG</highlight></codeline>
<codeline lineno="1455"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>ABORT_ON_ASSERT_FAILURE</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>assert</highlight></codeline>
<codeline lineno="1457"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>assert(x)<sp/>if(!(x))<sp/>ABORT</highlight></codeline>
<codeline lineno="1458"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>ABORT_ON_ASSERT_FAILURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1459"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ABORT_ON_ASSERT_FAILURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1462"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>assert</highlight></codeline>
<codeline lineno="1463"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>assert(x)</highlight></codeline>
<codeline lineno="1464"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1465"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DEBUG<sp/>0</highlight></codeline>
<codeline lineno="1466"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1467"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!defined(WIN32)<sp/>&amp;&amp;<sp/>!defined(LACKS_TIME_H)</highlight></codeline>
<codeline lineno="1468"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>magic<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1470"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_STDLIB_H</highlight></codeline>
<codeline lineno="1471"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>abort()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LACKS_STDLIB_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1473"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_STRING_H</highlight></codeline>
<codeline lineno="1474"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>memset<sp/>etc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>LACKS_STRING_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1476"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>USE_BUILTIN_FFS</highlight></codeline>
<codeline lineno="1477"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_STRINGS_H</highlight></codeline>
<codeline lineno="1478"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;strings.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>ffs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LACKS_STRINGS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1480"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_BUILTIN_FFS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1481"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="1482"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_SYS_MMAN_H</highlight></codeline>
<codeline lineno="1483"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>On<sp/>some<sp/>versions<sp/>of<sp/>linux,<sp/>mremap<sp/>decl<sp/>in<sp/>mman.h<sp/>needs<sp/>__USE_GNU<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(linux)<sp/>&amp;&amp;<sp/>!defined(__USE_GNU))</highlight></codeline>
<codeline lineno="1485"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__USE_GNU<sp/>1</highlight></codeline>
<codeline lineno="1486"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>mmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>__USE_GNU</highlight></codeline>
<codeline lineno="1488"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1489"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>mmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>linux<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LACKS_SYS_MMAN_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1492"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_FCNTL_H</highlight></codeline>
<codeline lineno="1493"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LACKS_FCNTL_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1495"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1496"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>LACKS_UNISTD_H</highlight></codeline>
<codeline lineno="1497"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>sbrk,<sp/>sysconf<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>LACKS_UNISTD_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1499"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!defined(__FreeBSD__)<sp/>&amp;&amp;<sp/>!defined(__OpenBSD__)<sp/>&amp;&amp;<sp/>!defined(__NetBSD__)</highlight></codeline>
<codeline lineno="1500"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>sbrk(ptrdiff_t);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FreeBSD<sp/>etc<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1502"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LACKS_UNISTD_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1503"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Declarations<sp/>for<sp/>locking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS</highlight></codeline>
<codeline lineno="1506"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="1507"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__SVR4)<sp/>&amp;&amp;<sp/>defined<sp/>(__sun)<sp/><sp/></highlight><highlight class="comment">/*<sp/>solaris<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1508"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(LACKS_SCHED_H)</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;sched.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>solaris<sp/>or<sp/>LACKS_SCHED_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1512"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>(defined(USE_RECURSIVE_LOCKS)<sp/>&amp;&amp;<sp/>USE_RECURSIVE_LOCKS<sp/>!=<sp/>0)<sp/>||<sp/>!USE_SPIN_LOCKS</highlight></codeline>
<codeline lineno="1513"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_RECURSIVE_LOCKS<sp/>...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1515"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="1516"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>_M_AMD64</highlight></codeline>
<codeline lineno="1517"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>These<sp/>are<sp/>already<sp/>defined<sp/>on<sp/>AMD64<sp/>builds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1519"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1521"><highlight class="preprocessor"></highlight><highlight class="normal">LONG<sp/>__cdecl<sp/>_InterlockedCompareExchange(LONG<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*Dest,<sp/>LONG<sp/>Exchange,<sp/>LONG<sp/>Comp);</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">LONG<sp/>__cdecl<sp/>_InterlockedExchange(LONG<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>*Target,<sp/>LONG<sp/>Value);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1524"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1526"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_M_AMD64<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1527"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic<sp/>(_InterlockedCompareExchange)</highlight></codeline>
<codeline lineno="1528"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic<sp/>(_InterlockedExchange)</highlight></codeline>
<codeline lineno="1529"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>interlockedcompareexchange<sp/>_InterlockedCompareExchange</highlight></codeline>
<codeline lineno="1530"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>interlockedexchange<sp/>_InterlockedExchange</highlight></codeline>
<codeline lineno="1531"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined(WIN32)<sp/>&amp;&amp;<sp/>defined(__GNUC__)</highlight></codeline>
<codeline lineno="1532"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>interlockedcompareexchange(a,<sp/>b,<sp/>c)<sp/>__sync_val_compare_and_swap(a,<sp/>c,<sp/>b)</highlight></codeline>
<codeline lineno="1533"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>interlockedexchange<sp/>__sync_lock_test_and_set</highlight></codeline>
<codeline lineno="1534"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>Win32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1535"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1536"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1537"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LOCK_AT_FORK</highlight></codeline>
<codeline lineno="1539"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>LOCK_AT_FORK<sp/>0</highlight></codeline>
<codeline lineno="1540"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1541"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Declarations<sp/>for<sp/>bit<sp/>scanning<sp/>on<sp/>win32<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER&gt;=1300</highlight></codeline>
<codeline lineno="1544"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>BitScanForward<sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>avoid<sp/>pulling<sp/>in<sp/>WinNT.h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1545"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1546"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1548"><highlight class="preprocessor"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_BitScanForward(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mask);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_BitScanReverse(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*index,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>mask);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1551"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1553"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BitScanForward<sp/>_BitScanForward</highlight></codeline>
<codeline lineno="1555"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>BitScanReverse<sp/>_BitScanReverse</highlight></codeline>
<codeline lineno="1556"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic(_BitScanForward)</highlight></codeline>
<codeline lineno="1557"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic(_BitScanReverse)</highlight></codeline>
<codeline lineno="1558"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BitScanForward<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1559"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER&gt;=1300<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1560"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="1562"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>malloc_getpagesize</highlight></codeline>
<codeline lineno="1563"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_SC_PAGESIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>some<sp/>SVR4<sp/>systems<sp/>omit<sp/>an<sp/>underscore<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1564"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifndef<sp/>_SC_PAGE_SIZE</highlight></codeline>
<codeline lineno="1565"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>_SC_PAGE_SIZE<sp/>_SC_PAGESIZE</highlight></codeline>
<codeline lineno="1566"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1567"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="1568"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>_SC_PAGE_SIZE</highlight></codeline>
<codeline lineno="1569"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>sysconf(_SC_PAGE_SIZE)</highlight></codeline>
<codeline lineno="1570"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight></codeline>
<codeline lineno="1571"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>defined(BSD)<sp/>||<sp/>defined(DGUX)<sp/>||<sp/>defined(HAVE_GETPAGESIZE)</highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>getpagesize();</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>getpagesize()</highlight></codeline>
<codeline lineno="1574"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1575"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>WIN32<sp/></highlight><highlight class="comment">/*<sp/>use<sp/>supplied<sp/>emulation<sp/>of<sp/>getpagesize<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1576"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>getpagesize()</highlight></codeline>
<codeline lineno="1577"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifndef<sp/>LACKS_SYS_PARAM_H</highlight></codeline>
<codeline lineno="1579"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;sys/param.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1581"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>EXEC_PAGESIZE</highlight></codeline>
<codeline lineno="1582"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>EXEC_PAGESIZE</highlight></codeline>
<codeline lineno="1583"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1584"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>NBPG</highlight></codeline>
<codeline lineno="1585"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifndef<sp/>CLSIZE</highlight></codeline>
<codeline lineno="1586"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>NBPG</highlight></codeline>
<codeline lineno="1587"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1588"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>(NBPG<sp/>*<sp/>CLSIZE)</highlight></codeline>
<codeline lineno="1589"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1590"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1591"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>NBPC</highlight></codeline>
<codeline lineno="1592"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>NBPC</highlight></codeline>
<codeline lineno="1593"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1594"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>PAGESIZE</highlight></codeline>
<codeline lineno="1595"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>PAGESIZE</highlight></codeline>
<codeline lineno="1596"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/></highlight><highlight class="comment">/*<sp/>just<sp/>guess<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1597"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>malloc_getpagesize<sp/>((size_t)4096U)</highlight></codeline>
<codeline lineno="1598"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1599"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1600"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1601"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1602"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1603"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight></codeline>
<codeline lineno="1604"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight></codeline>
<codeline lineno="1605"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1606"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1607"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>size_t<sp/>and<sp/>alignment<sp/>properties<sp/>--------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>byte<sp/>and<sp/>bit<sp/>size<sp/>of<sp/>a<sp/>size_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE_T_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sizeof(size_t))</highlight></codeline>
<codeline lineno="1612"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIZE_T_BITSIZE<sp/><sp/><sp/><sp/><sp/><sp/>(sizeof(size_t)<sp/>&lt;&lt;<sp/>3)</highlight></codeline>
<codeline lineno="1613"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Some<sp/>constants<sp/>coerced<sp/>to<sp/>size_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Annoying<sp/>but<sp/>necessary<sp/>to<sp/>avoid<sp/>errors<sp/>on<sp/>some<sp/>platforms<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIZE_T_ZERO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((size_t)0)</highlight></codeline>
<codeline lineno="1617"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIZE_T_ONE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((size_t)1)</highlight></codeline>
<codeline lineno="1618"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIZE_T_TWO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((size_t)2)</highlight></codeline>
<codeline lineno="1619"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIZE_T_FOUR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((size_t)4)</highlight></codeline>
<codeline lineno="1620"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TWO_SIZE_T_SIZES<sp/><sp/><sp/><sp/>(SIZE_T_SIZE&lt;&lt;1)</highlight></codeline>
<codeline lineno="1621"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FOUR_SIZE_T_SIZES<sp/><sp/><sp/>(SIZE_T_SIZE&lt;&lt;2)</highlight></codeline>
<codeline lineno="1622"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SIX_SIZE_T_SIZES<sp/><sp/><sp/><sp/>(FOUR_SIZE_T_SIZES+TWO_SIZE_T_SIZES)</highlight></codeline>
<codeline lineno="1623"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>HALF_MAX_SIZE_T<sp/><sp/><sp/><sp/><sp/>(MAX_SIZE_T<sp/>/<sp/>2U)</highlight></codeline>
<codeline lineno="1624"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>bit<sp/>mask<sp/>value<sp/>corresponding<sp/>to<sp/>MALLOC_ALIGNMENT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHUNK_ALIGN_MASK<sp/><sp/><sp/><sp/>(MALLOC_ALIGNMENT<sp/>-<sp/>SIZE_T_ONE)</highlight></codeline>
<codeline lineno="1627"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>True<sp/>if<sp/>address<sp/>a<sp/>has<sp/>acceptable<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_aligned(A)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((size_t)((A))<sp/>&amp;<sp/>(CHUNK_ALIGN_MASK))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1630"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>offset<sp/>an<sp/>address<sp/>to<sp/>align<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>align_offset(A)\</highlight></codeline>
<codeline lineno="1633"><highlight class="preprocessor"><sp/>((((size_t)(A)<sp/>&amp;<sp/>CHUNK_ALIGN_MASK)<sp/>==<sp/>0)?<sp/>0<sp/>:\</highlight></codeline>
<codeline lineno="1634"><highlight class="preprocessor"><sp/><sp/>((MALLOC_ALIGNMENT<sp/>-<sp/>((size_t)(A)<sp/>&amp;<sp/>CHUNK_ALIGN_MASK))<sp/>&amp;<sp/>CHUNK_ALIGN_MASK))</highlight></codeline>
<codeline lineno="1635"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------<sp/>MMAP<sp/>preliminaries<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/><sp/><sp/>If<sp/>HAVE_MORECORE<sp/>or<sp/>HAVE_MMAP<sp/>are<sp/>false,<sp/>we<sp/>just<sp/>define<sp/>calls<sp/>and</highlight></codeline>
<codeline lineno="1640"><highlight class="comment"><sp/><sp/><sp/>checks<sp/>to<sp/>fail<sp/>so<sp/>compiler<sp/>optimizer<sp/>can<sp/>delete<sp/>code<sp/>rather<sp/>than</highlight></codeline>
<codeline lineno="1641"><highlight class="comment"><sp/><sp/><sp/>using<sp/>so<sp/>many<sp/>&quot;#if&quot;s.</highlight></codeline>
<codeline lineno="1642"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MORECORE<sp/>and<sp/>MMAP<sp/>must<sp/>return<sp/>MFAIL<sp/>on<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MFAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void*)(MAX_SIZE_T))</highlight></codeline>
<codeline lineno="1647"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CMFAIL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((char*)(MFAIL))<sp/></highlight><highlight class="comment">/*<sp/>defined<sp/>for<sp/>convenience<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1648"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="1650"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="1652"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MUNMAP_DEFAULT(a,<sp/>s)<sp/><sp/>munmap((a),<sp/>(s))</highlight></codeline>
<codeline lineno="1653"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MMAP_PROT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PROT_READ|PROT_WRITE)</highlight></codeline>
<codeline lineno="1654"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>!defined(MAP_ANONYMOUS)<sp/>&amp;&amp;<sp/>defined(MAP_ANON)</highlight></codeline>
<codeline lineno="1655"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAP_ANONYMOUS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAP_ANON</highlight></codeline>
<codeline lineno="1656"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MAP_ANON<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1657"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>MAP_ANONYMOUS</highlight></codeline>
<codeline lineno="1658"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MMAP_FLAGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MAP_PRIVATE|MAP_ANONYMOUS)</highlight></codeline>
<codeline lineno="1659"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MMAP_DEFAULT(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmap(0,<sp/>(s),<sp/>MMAP_PROT,<sp/>MMAP_FLAGS,<sp/>-1,<sp/>0)</highlight></codeline>
<codeline lineno="1660"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MAP_ANONYMOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1661"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/><sp/><sp/>Nearly<sp/>all<sp/>versions<sp/>of<sp/>mmap<sp/>support<sp/>MAP_ANONYMOUS,<sp/>so<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/><sp/>is<sp/>unlikely<sp/>to<sp/>be<sp/>needed,<sp/>but<sp/>is<sp/>supplied<sp/>just<sp/>in<sp/>case.</highlight></codeline>
<codeline lineno="1664"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MMAP_FLAGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MAP_PRIVATE)</highlight></codeline>
<codeline lineno="1666"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dev_zero_fd<sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>Cached<sp/>file<sp/>descriptor<sp/>for<sp/>/dev/zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MMAP_DEFAULT(s)<sp/>((dev_zero_fd<sp/>&lt;<sp/>0)<sp/>?<sp/>\</highlight></codeline>
<codeline lineno="1668"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dev_zero_fd<sp/>=<sp/>open(&quot;/dev/zero&quot;,<sp/>O_RDWR),<sp/>\</highlight></codeline>
<codeline lineno="1669"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmap(0,<sp/>(s),<sp/>MMAP_PROT,<sp/>MMAP_FLAGS,<sp/>dev_zero_fd,<sp/>0))<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="1670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mmap(0,<sp/>(s),<sp/>MMAP_PROT,<sp/>MMAP_FLAGS,<sp/>dev_zero_fd,<sp/>0))</highlight></codeline>
<codeline lineno="1671"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MAP_ANONYMOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1672"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DIRECT_MMAP_DEFAULT(s)<sp/>MMAP_DEFAULT(s)</highlight></codeline>
<codeline lineno="1674"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1676"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Win32<sp/>MMAP<sp/>via<sp/>VirtualAlloc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>win32mmap(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>VirtualAlloc(0,<sp/>size,<sp/>MEM_RESERVE|MEM_COMMIT,<sp/>PAGE_READWRITE);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>0)?<sp/>ptr:<sp/>MFAIL;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>direct<sp/>MMAP,<sp/>use<sp/>MEM_TOP_DOWN<sp/>to<sp/>minimize<sp/>interference<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>win32direct_mmap(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>VirtualAlloc(0,<sp/>size,<sp/>MEM_RESERVE|MEM_COMMIT|MEM_TOP_DOWN,</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PAGE_READWRITE);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ptr<sp/>!=<sp/>0)?<sp/>ptr:<sp/>MFAIL;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>supports<sp/>releasing<sp/>coalesed<sp/>segments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>win32munmap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>MEMORY_BASIC_INFORMATION<sp/>minfo;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ptr;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size)<sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VirtualQuery(cptr,<sp/>&amp;minfo,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(minfo))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(minfo.BaseAddress<sp/>!=<sp/>cptr<sp/>||<sp/>minfo.AllocationBase<sp/>!=<sp/>cptr<sp/>||</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minfo.State<sp/>!=<sp/>MEM_COMMIT<sp/>||<sp/>minfo.RegionSize<sp/>&gt;<sp/>size)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VirtualFree(cptr,<sp/>0,<sp/>MEM_RELEASE)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>cptr<sp/>+=<sp/>minfo.RegionSize;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>minfo.RegionSize;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MMAP_DEFAULT(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32mmap(s)</highlight></codeline>
<codeline lineno="1709"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MUNMAP_DEFAULT(a,<sp/>s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>win32munmap((a),<sp/>(s))</highlight></codeline>
<codeline lineno="1710"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DIRECT_MMAP_DEFAULT(s)<sp/><sp/><sp/><sp/><sp/><sp/>win32direct_mmap(s)</highlight></codeline>
<codeline lineno="1711"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1712"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1713"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MREMAP</highlight></codeline>
<codeline lineno="1715"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="1716"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MREMAP_DEFAULT(addr,<sp/>osz,<sp/>nsz,<sp/>mv)<sp/>mremap((addr),<sp/>(osz),<sp/>(nsz),<sp/>(mv))</highlight></codeline>
<codeline lineno="1717"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1718"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MREMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1719"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1723"><highlight class="preprocessor">#if<sp/>HAVE_MORECORE</highlight></codeline>
<codeline lineno="1724"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>MORECORE</highlight></codeline>
<codeline lineno="1725"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MORECORE(S)<sp/><sp/><sp/><sp/>MORECORE(S)</highlight></codeline>
<codeline lineno="1726"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1727"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MORECORE(S)<sp/><sp/><sp/><sp/>MORECORE_DEFAULT(S)</highlight></codeline>
<codeline lineno="1728"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1729"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1730"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CALL_MORECORE(S)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFAIL</highlight></codeline>
<codeline lineno="1731"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MORECORE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1732"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1736"><highlight class="preprocessor">#if<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="1737"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>USE_MMAP_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SIZE_T_ONE)</highlight></codeline>
<codeline lineno="1738"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>MMAP</highlight></codeline>
<codeline lineno="1740"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MMAP(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MMAP(s)</highlight></codeline>
<codeline lineno="1741"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1742"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MMAP(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MMAP_DEFAULT(s)</highlight></codeline>
<codeline lineno="1743"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1744"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>MUNMAP</highlight></codeline>
<codeline lineno="1745"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MUNMAP(a,<sp/>s)<sp/><sp/><sp/>MUNMAP((a),<sp/>(s))</highlight></codeline>
<codeline lineno="1746"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>MUNMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1747"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MUNMAP(a,<sp/>s)<sp/><sp/><sp/>MUNMAP_DEFAULT((a),<sp/>(s))</highlight></codeline>
<codeline lineno="1748"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>MUNMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1749"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>DIRECT_MMAP</highlight></codeline>
<codeline lineno="1750"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_DIRECT_MMAP(s)<sp/>DIRECT_MMAP(s)</highlight></codeline>
<codeline lineno="1751"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>DIRECT_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1752"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_DIRECT_MMAP(s)<sp/>DIRECT_MMAP_DEFAULT(s)</highlight></codeline>
<codeline lineno="1753"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>DIRECT_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1754"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1755"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>USE_MMAP_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SIZE_T_ZERO)</highlight></codeline>
<codeline lineno="1756"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MMAP(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFAIL</highlight></codeline>
<codeline lineno="1758"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>MUNMAP(a,<sp/>s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1)</highlight></codeline>
<codeline lineno="1759"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>DIRECT_MMAP(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MFAIL</highlight></codeline>
<codeline lineno="1760"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CALL_DIRECT_MMAP(s)<sp/><sp/><sp/><sp/><sp/>DIRECT_MMAP(s)</highlight></codeline>
<codeline lineno="1761"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CALL_MMAP(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MMAP(s)</highlight></codeline>
<codeline lineno="1762"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CALL_MUNMAP(a,<sp/>s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>MUNMAP((a),<sp/>(s))</highlight></codeline>
<codeline lineno="1763"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1764"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1768"><highlight class="preprocessor">#if<sp/>HAVE_MMAP<sp/>&amp;&amp;<sp/>HAVE_MREMAP</highlight></codeline>
<codeline lineno="1769"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>MREMAP</highlight></codeline>
<codeline lineno="1770"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MREMAP(addr,<sp/>osz,<sp/>nsz,<sp/>mv)<sp/>MREMAP((addr),<sp/>(osz),<sp/>(nsz),<sp/>(mv))</highlight></codeline>
<codeline lineno="1771"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>MREMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1772"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CALL_MREMAP(addr,<sp/>osz,<sp/>nsz,<sp/>mv)<sp/>MREMAP_DEFAULT((addr),<sp/>(osz),<sp/>(nsz),<sp/>(mv))</highlight></codeline>
<codeline lineno="1773"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>MREMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1774"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>&amp;&amp;<sp/>HAVE_MREMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1775"><highlight class="preprocessor"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CALL_MREMAP(addr,<sp/>osz,<sp/>nsz,<sp/>mv)<sp/><sp/><sp/><sp/><sp/>MFAIL</highlight></codeline>
<codeline lineno="1776"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HAVE_MMAP<sp/>&amp;&amp;<sp/>HAVE_MREMAP<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1777"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mstate<sp/>bit<sp/>set<sp/>if<sp/>continguous<sp/>morecore<sp/>disabled<sp/>or<sp/>failed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_NONCONTIGUOUS_BIT<sp/>(4U)</highlight></codeline>
<codeline lineno="1780"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>segment<sp/>bit<sp/>set<sp/>in<sp/>create_mspace_with_base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXTERN_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(8U)</highlight></codeline>
<codeline lineno="1783"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------------------------<sp/>Lock<sp/>preliminaries<sp/>------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1788"><highlight class="comment"><sp/><sp/>When<sp/>locks<sp/>are<sp/>defined,<sp/>there<sp/>is<sp/>one<sp/>global<sp/>lock,<sp/>plus</highlight></codeline>
<codeline lineno="1789"><highlight class="comment"><sp/><sp/>one<sp/>per-mspace<sp/>lock.</highlight></codeline>
<codeline lineno="1790"><highlight class="comment"></highlight></codeline>
<codeline lineno="1791"><highlight class="comment"><sp/><sp/>The<sp/>global<sp/>lock_ensures<sp/>that<sp/>mparams.magic<sp/>and<sp/>other<sp/>unique</highlight></codeline>
<codeline lineno="1792"><highlight class="comment"><sp/><sp/>mparams<sp/>values<sp/>are<sp/>initialized<sp/>only<sp/>once.<sp/>It<sp/>also<sp/>protects</highlight></codeline>
<codeline lineno="1793"><highlight class="comment"><sp/><sp/>sequences<sp/>of<sp/>calls<sp/>to<sp/>MORECORE.<sp/><sp/>In<sp/>many<sp/>cases<sp/>sys_alloc<sp/>requires</highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/>two<sp/>calls,<sp/>that<sp/>should<sp/>not<sp/>be<sp/>interleaved<sp/>with<sp/>calls<sp/>by<sp/>other</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/><sp/>threads.<sp/><sp/>This<sp/>does<sp/>not<sp/>protect<sp/>against<sp/>direct<sp/>calls<sp/>to<sp/>MORECORE</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/>by<sp/>other<sp/>threads<sp/>not<sp/>using<sp/>this<sp/>lock,<sp/>so<sp/>there<sp/>is<sp/>still<sp/>code<sp/>to</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/>cope<sp/>the<sp/>best<sp/>we<sp/>can<sp/>on<sp/>interference.</highlight></codeline>
<codeline lineno="1798"><highlight class="comment"></highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/>Per-mspace<sp/>locks<sp/>surround<sp/>calls<sp/>to<sp/>malloc,<sp/>free,<sp/>etc.</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/><sp/>By<sp/>default,<sp/>locks<sp/>are<sp/>simple<sp/>non-reentrant<sp/>mutexes.</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"></highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/><sp/>Because<sp/>lock-protected<sp/>regions<sp/>generally<sp/>have<sp/>bounded<sp/>times,<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/><sp/>OK<sp/>to<sp/>use<sp/>the<sp/>supplied<sp/>simple<sp/>spinlocks.<sp/>Spinlocks<sp/>are<sp/>likely<sp/>to</highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/><sp/>improve<sp/>performance<sp/>for<sp/>lightly<sp/>contended<sp/>applications,<sp/>but<sp/>worsen</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/>performance<sp/>under<sp/>heavy<sp/>contention.</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"></highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/>If<sp/>USE_LOCKS<sp/>is<sp/>&gt;<sp/>1,<sp/>the<sp/>definitions<sp/>of<sp/>lock<sp/>routines<sp/>here<sp/>are</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"><sp/><sp/>bypassed,<sp/>in<sp/>which<sp/>case<sp/>you<sp/>will<sp/>need<sp/>to<sp/>define<sp/>the<sp/>type<sp/>MLOCK_T,</highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/><sp/>and<sp/>at<sp/>least<sp/>INITIAL_LOCK,<sp/>DESTROY_LOCK,<sp/>ACQUIRE_LOCK,<sp/>RELEASE_LOCK</highlight></codeline>
<codeline lineno="1810"><highlight class="comment"><sp/><sp/>and<sp/>TRY_LOCK.<sp/><sp/>You<sp/>must<sp/>also<sp/>declare<sp/>a</highlight></codeline>
<codeline lineno="1811"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>MLOCK_T<sp/>malloc_global_mutex<sp/>=<sp/>{<sp/>initialization<sp/>values<sp/>};.</highlight></codeline>
<codeline lineno="1812"><highlight class="comment"></highlight></codeline>
<codeline lineno="1813"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!USE_LOCKS</highlight></codeline>
<codeline lineno="1816"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USE_LOCK_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0U)</highlight></codeline>
<codeline lineno="1817"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INITIAL_LOCK(l)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight></codeline>
<codeline lineno="1818"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DESTROY_LOCK(l)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight></codeline>
<codeline lineno="1819"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACQUIRE_MALLOC_GLOBAL_LOCK()</highlight></codeline>
<codeline lineno="1820"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASE_MALLOC_GLOBAL_LOCK()</highlight></codeline>
<codeline lineno="1821"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1823"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS<sp/>&gt;<sp/>1</highlight></codeline>
<codeline lineno="1824"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>-----------------------<sp/><sp/>User-defined<sp/>locks<sp/>------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>your<sp/>own<sp/>lock<sp/>implementation<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>INITIAL_LOCK(lk)<sp/><sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>DESTROY_LOCK(lk)<sp/><sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>ACQUIRE_LOCK(lk)<sp/><sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>RELEASE_LOCK(lk)<sp/><sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>#define<sp/>TRY_LOCK(lk)<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>MLOCK_T<sp/>malloc_global_mutex<sp/>=<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>USE_SPIN_LOCKS</highlight></codeline>
<codeline lineno="1834"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>First,<sp/>define<sp/>CAS_LOCK<sp/>and<sp/>CLEAR_LOCK<sp/>on<sp/>ints<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note<sp/>CAS_LOCK<sp/>defined<sp/>to<sp/>return<sp/>0<sp/>on<sp/>success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>1))</highlight></codeline>
<codeline lineno="1839"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CAS_LOCK(sl)<sp/><sp/><sp/><sp/><sp/>__sync_lock_test_and_set(sl,<sp/>1)</highlight></codeline>
<codeline lineno="1840"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CLEAR_LOCK(sl)<sp/><sp/><sp/>__sync_lock_release(sl)</highlight></codeline>
<codeline lineno="1841"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>(defined(__i386__)<sp/>||<sp/>defined(__x86_64__)))</highlight></codeline>
<codeline lineno="1843"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Custom<sp/>spin<sp/>locks<sp/>for<sp/>older<sp/>gcc<sp/>on<sp/>x86<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x86_cas_lock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sl)<sp/>{</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>__asm__<sp/>__volatile__<sp/><sp/>(</highlight><highlight class="stringliteral">&quot;lock;<sp/>cmpxchgl<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(val),<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(sl)),<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">(cmp)</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;cc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>x86_clear_lock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>sl)<sp/>{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>assert(*sl<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>__asm__<sp/>__volatile__<sp/>(</highlight><highlight class="stringliteral">&quot;lock;<sp/>xchgl<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal"><sp/>(*(sl)),<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">(prev)</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAS_LOCK(sl)<sp/><sp/><sp/><sp/><sp/>x86_cas_lock(sl)</highlight></codeline>
<codeline lineno="1866"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CLEAR_LOCK(sl)<sp/><sp/><sp/>x86_clear_lock(sl)</highlight></codeline>
<codeline lineno="1867"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>Win32<sp/>MSC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1869"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CAS_LOCK(sl)<sp/><sp/><sp/><sp/><sp/>interlockedexchange(sl,<sp/>(LONG)1)</highlight></codeline>
<codeline lineno="1870"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CLEAR_LOCK(sl)<sp/><sp/><sp/>interlockedexchange<sp/>(sl,<sp/>(LONG)0)</highlight></codeline>
<codeline lineno="1871"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>...<sp/>gcc<sp/>spins<sp/>locks<sp/>...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1873"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>How<sp/>to<sp/>yield<sp/>for<sp/>a<sp/>spin<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SPINS_PER_YIELD<sp/><sp/><sp/><sp/><sp/><sp/><sp/>63</highlight></codeline>
<codeline lineno="1876"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="1877"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SLEEP_EX_DURATION<sp/><sp/><sp/><sp/><sp/>50<sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>for<sp/>yield/sleep<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1878"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SPIN_LOCK_YIELD<sp/><sp/>SleepEx(SLEEP_EX_DURATION,<sp/>FALSE)</highlight></codeline>
<codeline lineno="1879"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(__SVR4)<sp/>&amp;&amp;<sp/>defined<sp/>(__sun)<sp/></highlight><highlight class="comment">/*<sp/>solaris<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1880"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SPIN_LOCK_YIELD<sp/><sp/><sp/>thr_yield();</highlight></codeline>
<codeline lineno="1881"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#elif<sp/>!defined(LACKS_SCHED_H)</highlight></codeline>
<codeline lineno="1882"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SPIN_LOCK_YIELD<sp/><sp/><sp/>sched_yield();</highlight></codeline>
<codeline lineno="1883"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1884"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SPIN_LOCK_YIELD</highlight></codeline>
<codeline lineno="1885"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>...<sp/>yield<sp/>...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1886"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(USE_RECURSIVE_LOCKS)<sp/>||<sp/>USE_RECURSIVE_LOCKS<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="1888"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Plain<sp/>spin<sp/>locks<sp/>use<sp/>single<sp/>word<sp/>(embedded<sp/>in<sp/>malloc_states)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spin_acquire_lock(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*sl)<sp/>{</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spins<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)sl<sp/>!=<sp/>0<sp/>||<sp/>CAS_LOCK(sl))<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((++spins<sp/>&amp;<sp/>SPINS_PER_YIELD)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SPIN_LOCK_YIELD;</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLOCK_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int</highlight></codeline>
<codeline lineno="1900"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRY_LOCK(sl)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!CAS_LOCK(sl)</highlight></codeline>
<codeline lineno="1901"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASE_LOCK(sl)<sp/><sp/><sp/><sp/><sp/><sp/>CLEAR_LOCK(sl)</highlight></codeline>
<codeline lineno="1902"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACQUIRE_LOCK(sl)<sp/><sp/><sp/><sp/><sp/><sp/>(CAS_LOCK(sl)?<sp/>spin_acquire_lock(sl)<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="1903"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INITIAL_LOCK(sl)<sp/><sp/><sp/><sp/><sp/><sp/>(*sl<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="1904"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DESTROY_LOCK(sl)<sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight></codeline>
<codeline lineno="1905"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MLOCK_T<sp/>malloc_global_mutex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>USE_RECURSIVE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1908"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>types<sp/>for<sp/>lock<sp/>owners<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="1910"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>THREAD_ID_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD</highlight></codeline>
<codeline lineno="1911"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CURRENT_THREAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetCurrentThreadId()</highlight></codeline>
<codeline lineno="1912"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EQ_OWNER(X,Y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((X)<sp/>==<sp/>(Y))</highlight></codeline>
<codeline lineno="1913"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1914"><highlight class="preprocessor"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1915"><highlight class="comment"><sp/><sp/>Note:<sp/>the<sp/>following<sp/>assume<sp/>that<sp/>pthread_t<sp/>is<sp/>a<sp/>type<sp/>that<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="1916"><highlight class="comment"><sp/><sp/>initialized<sp/>to<sp/>(casted)<sp/>zero.<sp/>If<sp/>this<sp/>is<sp/>not<sp/>the<sp/>case,<sp/>you<sp/>will<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"><sp/><sp/>somehow<sp/>redefine<sp/>these<sp/>or<sp/>not<sp/>use<sp/>spin<sp/>locks.</highlight></codeline>
<codeline lineno="1918"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THREAD_ID_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_t</highlight></codeline>
<codeline lineno="1920"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CURRENT_THREAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_self()</highlight></codeline>
<codeline lineno="1921"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EQ_OWNER(X,Y)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_equal(X,<sp/>Y)</highlight></codeline>
<codeline lineno="1922"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1923"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">malloc_recursive_lock<sp/>{</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sl;</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/>THREAD_ID_T<sp/>threadid;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MLOCK_T<sp/><sp/>struct<sp/>malloc_recursive_lock</highlight></codeline>
<codeline lineno="1931"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MLOCK_T<sp/>malloc_global_mutex<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>(THREAD_ID_T)0};</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>recursive_release_lock(MLOCK_T<sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>assert(lk-&gt;sl<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--lk-&gt;c<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/>CLEAR_LOCK(&amp;lk-&gt;sl);</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursive_acquire_lock(MLOCK_T<sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/>THREAD_ID_T<sp/>mythreadid<sp/>=<sp/>CURRENT_THREAD;</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>spins<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;lk-&gt;sl))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!CAS_LOCK(&amp;lk-&gt;sl))<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lk-&gt;threadid<sp/>=<sp/>mythreadid;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lk-&gt;c<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EQ_OWNER(lk-&gt;threadid,<sp/>mythreadid))<sp/>{</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++lk-&gt;c;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((++spins<sp/>&amp;<sp/>SPINS_PER_YIELD)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SPIN_LOCK_YIELD;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FORCEINLINE<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recursive_try_lock(MLOCK_T<sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/>THREAD_ID_T<sp/>mythreadid<sp/>=<sp/>CURRENT_THREAD;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)(&amp;lk-&gt;sl))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!CAS_LOCK(&amp;lk-&gt;sl))<sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lk-&gt;threadid<sp/>=<sp/>mythreadid;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lk-&gt;c<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EQ_OWNER(lk-&gt;threadid,<sp/>mythreadid))<sp/>{</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>++lk-&gt;c;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RELEASE_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>recursive_release_lock(lk)</highlight></codeline>
<codeline lineno="1978"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRY_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recursive_try_lock(lk)</highlight></codeline>
<codeline lineno="1979"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACQUIRE_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>recursive_acquire_lock(lk)</highlight></codeline>
<codeline lineno="1980"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INITIAL_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>((lk)-&gt;threadid<sp/>=<sp/>(THREAD_ID_T)0,<sp/>(lk)-&gt;sl<sp/>=<sp/>0,<sp/>(lk)-&gt;c<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="1981"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DESTROY_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight></codeline>
<codeline lineno="1982"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_RECURSIVE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1983"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(WIN32)<sp/></highlight><highlight class="comment">/*<sp/>Win32<sp/>critical<sp/>sections<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="1985"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MLOCK_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRITICAL_SECTION</highlight></codeline>
<codeline lineno="1986"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACQUIRE_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>(EnterCriticalSection(lk),<sp/>0)</highlight></codeline>
<codeline lineno="1987"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASE_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>LeaveCriticalSection(lk)</highlight></codeline>
<codeline lineno="1988"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRY_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TryEnterCriticalSection(lk)</highlight></codeline>
<codeline lineno="1989"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INITIAL_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>(!InitializeCriticalSectionAndSpinCount((lk),<sp/>0x80000000|4000))</highlight></codeline>
<codeline lineno="1990"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DESTROY_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>(DeleteCriticalSection(lk),<sp/>0)</highlight></codeline>
<codeline lineno="1991"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NEED_GLOBAL_LOCK_INIT</highlight></codeline>
<codeline lineno="1992"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MLOCK_T<sp/>malloc_global_mutex;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>LONG<sp/>malloc_global_mutex_status;</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Use<sp/>spin<sp/>loop<sp/>to<sp/>initialize<sp/>global<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_malloc_global_mutex()<sp/>{</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>stat<sp/>=<sp/>malloc_global_mutex_status;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transition<sp/>to<sp/>&lt;<sp/>0<sp/>while<sp/>initializing,<sp/>then<sp/>to<sp/>&gt;<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stat<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interlockedcompareexchange(&amp;malloc_global_mutex_status,<sp/>(LONG)-1,<sp/>(LONG)0)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InitializeCriticalSection(&amp;malloc_global_mutex);</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interlockedexchange(&amp;malloc_global_mutex_status,<sp/>(LONG)1);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>SleepEx(0,<sp/>FALSE);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>pthreads-based<sp/>locks<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2014"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MLOCK_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_t</highlight></codeline>
<codeline lineno="2015"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACQUIRE_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(lk)</highlight></codeline>
<codeline lineno="2016"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASE_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(lk)</highlight></codeline>
<codeline lineno="2017"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TRY_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!pthread_mutex_trylock(lk))</highlight></codeline>
<codeline lineno="2018"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INITIAL_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>pthread_init_lock(lk)</highlight></codeline>
<codeline lineno="2019"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>DESTROY_LOCK(lk)<sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_destroy(lk)</highlight></codeline>
<codeline lineno="2020"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_RECURSIVE_LOCKS)<sp/>&amp;&amp;<sp/>USE_RECURSIVE_LOCKS<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>defined(linux)<sp/>&amp;&amp;<sp/>!defined(PTHREAD_MUTEX_RECURSIVE)</highlight></codeline>
<codeline lineno="2022"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Cope<sp/>with<sp/>old-style<sp/>linux<sp/>recursive<sp/>lock<sp/>initialization<sp/>by<sp/>adding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>skipped<sp/>internal<sp/>declaration<sp/>from<sp/>pthread.h<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pthread_mutexattr_setkind_np<sp/>__P<sp/>((pthread_mutexattr_t<sp/>*__attr,</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__kind));</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTHREAD_MUTEX_RECURSIVE<sp/>PTHREAD_MUTEX_RECURSIVE_NP</highlight></codeline>
<codeline lineno="2027"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>pthread_mutexattr_settype(x,y)<sp/>pthread_mutexattr_setkind_np(x,y)</highlight></codeline>
<codeline lineno="2028"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_RECURSIVE_LOCKS<sp/>...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2029"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MLOCK_T<sp/>malloc_global_mutex<sp/>=<sp/>PTHREAD_MUTEX_INITIALIZER;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pthread_init_lock<sp/>(MLOCK_T<sp/>*lk)<sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/>pthread_mutexattr_t<sp/>attr;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_mutexattr_init(&amp;attr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_RECURSIVE_LOCKS)<sp/>&amp;&amp;<sp/>USE_RECURSIVE_LOCKS<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="2036"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_mutexattr_settype(&amp;attr,<sp/>PTHREAD_MUTEX_RECURSIVE))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2038"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_mutex_init(lk,<sp/>&amp;attr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pthread_mutexattr_destroy(&amp;attr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>...<sp/>lock<sp/>types<sp/>...<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2044"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Common<sp/>code<sp/>for<sp/>all<sp/>lock<sp/>types<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_LOCK_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2U)</highlight></codeline>
<codeline lineno="2047"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ACQUIRE_MALLOC_GLOBAL_LOCK</highlight></codeline>
<codeline lineno="2049"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ACQUIRE_MALLOC_GLOBAL_LOCK()<sp/><sp/>ACQUIRE_LOCK(&amp;malloc_global_mutex);</highlight></codeline>
<codeline lineno="2050"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2051"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RELEASE_MALLOC_GLOBAL_LOCK</highlight></codeline>
<codeline lineno="2053"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RELEASE_MALLOC_GLOBAL_LOCK()<sp/><sp/>RELEASE_LOCK(&amp;malloc_global_mutex);</highlight></codeline>
<codeline lineno="2054"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2055"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2057"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------<sp/><sp/>Chunk<sp/>representations<sp/>------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/><sp/>(The<sp/>following<sp/>includes<sp/>lightly<sp/>edited<sp/>explanations<sp/>by<sp/>Colin<sp/>Plumb.)</highlight></codeline>
<codeline lineno="2062"><highlight class="comment"></highlight></codeline>
<codeline lineno="2063"><highlight class="comment"><sp/><sp/>The<sp/>malloc_chunk<sp/>declaration<sp/>below<sp/>is<sp/>misleading<sp/>(but<sp/>accurate<sp/>and</highlight></codeline>
<codeline lineno="2064"><highlight class="comment"><sp/><sp/>necessary).<sp/><sp/>It<sp/>declares<sp/>a<sp/>&quot;view&quot;<sp/>into<sp/>memory<sp/>allowing<sp/>access<sp/>to</highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/>necessary<sp/>fields<sp/>at<sp/>known<sp/>offsets<sp/>from<sp/>a<sp/>given<sp/>base.</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"></highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/>Chunks<sp/>of<sp/>memory<sp/>are<sp/>maintained<sp/>using<sp/>a<sp/>`boundary<sp/>tag&apos;<sp/>method<sp/>as</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/><sp/>originally<sp/>described<sp/>by<sp/>Knuth.<sp/><sp/>(See<sp/>the<sp/>paper<sp/>by<sp/>Paul<sp/>Wilson</highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/><sp/>ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps<sp/>for<sp/>a<sp/>survey<sp/>of<sp/>such</highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/><sp/>techniques.)<sp/><sp/>Sizes<sp/>of<sp/>free<sp/>chunks<sp/>are<sp/>stored<sp/>both<sp/>in<sp/>the<sp/>front<sp/>of</highlight></codeline>
<codeline lineno="2071"><highlight class="comment"><sp/><sp/>each<sp/>chunk<sp/>and<sp/>at<sp/>the<sp/>end.<sp/><sp/>This<sp/>makes<sp/>consolidating<sp/>fragmented</highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/><sp/>chunks<sp/>into<sp/>bigger<sp/>chunks<sp/>fast.<sp/><sp/>The<sp/>head<sp/>fields<sp/>also<sp/>hold<sp/>bits</highlight></codeline>
<codeline lineno="2073"><highlight class="comment"><sp/><sp/>representing<sp/>whether<sp/>chunks<sp/>are<sp/>free<sp/>or<sp/>in<sp/>use.</highlight></codeline>
<codeline lineno="2074"><highlight class="comment"></highlight></codeline>
<codeline lineno="2075"><highlight class="comment"><sp/><sp/>Here<sp/>are<sp/>some<sp/>pictures<sp/>to<sp/>make<sp/>it<sp/>clearer.<sp/><sp/>They<sp/>are<sp/>&quot;exploded&quot;<sp/>to</highlight></codeline>
<codeline lineno="2076"><highlight class="comment"><sp/><sp/>show<sp/>that<sp/>the<sp/>state<sp/>of<sp/>a<sp/>chunk<sp/>can<sp/>be<sp/>thought<sp/>of<sp/>as<sp/>extending<sp/>from</highlight></codeline>
<codeline lineno="2077"><highlight class="comment"><sp/><sp/>the<sp/>high<sp/>31<sp/>bits<sp/>of<sp/>the<sp/>head<sp/>field<sp/>of<sp/>its<sp/>header<sp/>through<sp/>the</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/><sp/>prev_foot<sp/>and<sp/>PINUSE_BIT<sp/>bit<sp/>of<sp/>the<sp/>following<sp/>chunk<sp/>header.</highlight></codeline>
<codeline lineno="2079"><highlight class="comment"></highlight></codeline>
<codeline lineno="2080"><highlight class="comment"><sp/><sp/>A<sp/>chunk<sp/>that&apos;s<sp/>in<sp/>use<sp/>looks<sp/>like:</highlight></codeline>
<codeline lineno="2081"><highlight class="comment"></highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/><sp/><sp/>chunk-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Size<sp/>of<sp/>previous<sp/>chunk<sp/>(if<sp/>P<sp/>=<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<sp/>|P|</highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Size<sp/>of<sp/>this<sp/>chunk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1|<sp/>+-+</highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/><sp/><sp/>mem-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="2093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-<sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>-<sp/>sizeof(size_t)<sp/>available<sp/>payload<sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2095"><highlight class="comment"><sp/>chunk-&gt;<sp/>+-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<sp/>|1|</highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Size<sp/>of<sp/>next<sp/>chunk<sp/>(may<sp/>or<sp/>may<sp/>not<sp/>be<sp/>in<sp/>use)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>+-+</highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/>mem-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2101"><highlight class="comment"></highlight></codeline>
<codeline lineno="2102"><highlight class="comment"><sp/><sp/><sp/><sp/>And<sp/>if<sp/>it&apos;s<sp/>free,<sp/>it<sp/>looks<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="2103"><highlight class="comment"></highlight></codeline>
<codeline lineno="2104"><highlight class="comment"><sp/><sp/><sp/>chunk-&gt;<sp/>+-<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>User<sp/>payload<sp/>(must<sp/>be<sp/>in<sp/>use,<sp/>or<sp/>we<sp/>would<sp/>have<sp/>merged!)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<sp/>|P|</highlight></codeline>
<codeline lineno="2108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Size<sp/>of<sp/>this<sp/>chunk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0|<sp/>+-+</highlight></codeline>
<codeline lineno="2109"><highlight class="comment"><sp/><sp/><sp/>mem-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Next<sp/>pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Prev<sp/>pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="2115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-<sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>-<sp/>sizeof(struct<sp/>chunk)<sp/>unused<sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2117"><highlight class="comment"><sp/>chunk-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Size<sp/>of<sp/>this<sp/>chunk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+<sp/>|0|</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Size<sp/>of<sp/>next<sp/>chunk<sp/>(must<sp/>be<sp/>in<sp/>use,<sp/>or<sp/>we<sp/>would<sp/>have<sp/>merged)|<sp/>+-+</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/>mem-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="2124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-<sp/>User<sp/>payload<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-+</highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|0|</highlight></codeline>
<codeline lineno="2128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+</highlight></codeline>
<codeline lineno="2129"><highlight class="comment"><sp/><sp/>Note<sp/>that<sp/>since<sp/>we<sp/>always<sp/>merge<sp/>adjacent<sp/>free<sp/>chunks,<sp/>the<sp/>chunks</highlight></codeline>
<codeline lineno="2130"><highlight class="comment"><sp/><sp/>adjacent<sp/>to<sp/>a<sp/>free<sp/>chunk<sp/>must<sp/>be<sp/>in<sp/>use.</highlight></codeline>
<codeline lineno="2131"><highlight class="comment"></highlight></codeline>
<codeline lineno="2132"><highlight class="comment"><sp/><sp/>Given<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>chunk<sp/>(which<sp/>can<sp/>be<sp/>derived<sp/>trivially<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/>payload<sp/>pointer)<sp/>we<sp/>can,<sp/>in<sp/>O(1)<sp/>time,<sp/>find<sp/>out<sp/>whether<sp/>the<sp/>adjacent</highlight></codeline>
<codeline lineno="2134"><highlight class="comment"><sp/><sp/>chunks<sp/>are<sp/>free,<sp/>and<sp/>if<sp/>so,<sp/>unlink<sp/>them<sp/>from<sp/>the<sp/>lists<sp/>that<sp/>they</highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/><sp/>are<sp/>on<sp/>and<sp/>merge<sp/>them<sp/>with<sp/>the<sp/>current<sp/>chunk.</highlight></codeline>
<codeline lineno="2136"><highlight class="comment"></highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/><sp/>Chunks<sp/>always<sp/>begin<sp/>on<sp/>even<sp/>word<sp/>boundaries,<sp/>so<sp/>the<sp/>mem<sp/>portion</highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/>(which<sp/>is<sp/>returned<sp/>to<sp/>the<sp/>user)<sp/>is<sp/>also<sp/>on<sp/>an<sp/>even<sp/>word<sp/>boundary,<sp/>and</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"><sp/><sp/>thus<sp/>at<sp/>least<sp/>double-word<sp/>aligned.</highlight></codeline>
<codeline lineno="2140"><highlight class="comment"></highlight></codeline>
<codeline lineno="2141"><highlight class="comment"><sp/><sp/>The<sp/>P<sp/>(PINUSE_BIT)<sp/>bit,<sp/>stored<sp/>in<sp/>the<sp/>unused<sp/>low-order<sp/>bit<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2142"><highlight class="comment"><sp/><sp/>chunk<sp/>size<sp/>(which<sp/>is<sp/>always<sp/>a<sp/>multiple<sp/>of<sp/>two<sp/>words),<sp/>is<sp/>an<sp/>in-use</highlight></codeline>
<codeline lineno="2143"><highlight class="comment"><sp/><sp/>bit<sp/>for<sp/>the<sp/>*previous*<sp/>chunk.<sp/><sp/>If<sp/>that<sp/>bit<sp/>is<sp/>*clear*,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="2144"><highlight class="comment"><sp/><sp/>word<sp/>before<sp/>the<sp/>current<sp/>chunk<sp/>size<sp/>contains<sp/>the<sp/>previous<sp/>chunk</highlight></codeline>
<codeline lineno="2145"><highlight class="comment"><sp/><sp/>size,<sp/>and<sp/>can<sp/>be<sp/>used<sp/>to<sp/>find<sp/>the<sp/>front<sp/>of<sp/>the<sp/>previous<sp/>chunk.</highlight></codeline>
<codeline lineno="2146"><highlight class="comment"><sp/><sp/>The<sp/>very<sp/>first<sp/>chunk<sp/>allocated<sp/>always<sp/>has<sp/>this<sp/>bit<sp/>set,<sp/>preventing</highlight></codeline>
<codeline lineno="2147"><highlight class="comment"><sp/><sp/>access<sp/>to<sp/>non-existent<sp/>(or<sp/>non-owned)<sp/>memory.<sp/>If<sp/>pinuse<sp/>is<sp/>set<sp/>for</highlight></codeline>
<codeline lineno="2148"><highlight class="comment"><sp/><sp/>any<sp/>given<sp/>chunk,<sp/>then<sp/>you<sp/>CANNOT<sp/>determine<sp/>the<sp/>size<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2149"><highlight class="comment"><sp/><sp/>previous<sp/>chunk,<sp/>and<sp/>might<sp/>even<sp/>get<sp/>a<sp/>memory<sp/>addressing<sp/>fault<sp/>when</highlight></codeline>
<codeline lineno="2150"><highlight class="comment"><sp/><sp/>trying<sp/>to<sp/>do<sp/>so.</highlight></codeline>
<codeline lineno="2151"><highlight class="comment"></highlight></codeline>
<codeline lineno="2152"><highlight class="comment"><sp/><sp/>The<sp/>C<sp/>(CINUSE_BIT)<sp/>bit,<sp/>stored<sp/>in<sp/>the<sp/>unused<sp/>second-lowest<sp/>bit<sp/>of</highlight></codeline>
<codeline lineno="2153"><highlight class="comment"><sp/><sp/>the<sp/>chunk<sp/>size<sp/>redundantly<sp/>records<sp/>whether<sp/>the<sp/>current<sp/>chunk<sp/>is</highlight></codeline>
<codeline lineno="2154"><highlight class="comment"><sp/><sp/>inuse<sp/>(unless<sp/>the<sp/>chunk<sp/>is<sp/>mmapped).<sp/>This<sp/>redundancy<sp/>enables<sp/>usage</highlight></codeline>
<codeline lineno="2155"><highlight class="comment"><sp/><sp/>checks<sp/>within<sp/>free<sp/>and<sp/>realloc,<sp/>and<sp/>reduces<sp/>indirection<sp/>when<sp/>freeing</highlight></codeline>
<codeline lineno="2156"><highlight class="comment"><sp/><sp/>and<sp/>consolidating<sp/>chunks.</highlight></codeline>
<codeline lineno="2157"><highlight class="comment"></highlight></codeline>
<codeline lineno="2158"><highlight class="comment"><sp/><sp/>Each<sp/>freshly<sp/>allocated<sp/>chunk<sp/>must<sp/>have<sp/>both<sp/>cinuse<sp/>and<sp/>pinuse<sp/>set.</highlight></codeline>
<codeline lineno="2159"><highlight class="comment"><sp/><sp/>That<sp/>is,<sp/>each<sp/>allocated<sp/>chunk<sp/>borders<sp/>either<sp/>a<sp/>previously<sp/>allocated</highlight></codeline>
<codeline lineno="2160"><highlight class="comment"><sp/><sp/>and<sp/>still<sp/>in-use<sp/>chunk,<sp/>or<sp/>the<sp/>base<sp/>of<sp/>its<sp/>memory<sp/>arena.<sp/>This<sp/>is</highlight></codeline>
<codeline lineno="2161"><highlight class="comment"><sp/><sp/>ensured<sp/>by<sp/>making<sp/>all<sp/>allocations<sp/>from<sp/>the<sp/>`lowest&apos;<sp/>part<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="2162"><highlight class="comment"><sp/><sp/>found<sp/>chunk.<sp/><sp/>Further,<sp/>no<sp/>free<sp/>chunk<sp/>physically<sp/>borders<sp/>another<sp/>one,</highlight></codeline>
<codeline lineno="2163"><highlight class="comment"><sp/><sp/>so<sp/>each<sp/>free<sp/>chunk<sp/>is<sp/>known<sp/>to<sp/>be<sp/>preceded<sp/>and<sp/>followed<sp/>by<sp/>either</highlight></codeline>
<codeline lineno="2164"><highlight class="comment"><sp/><sp/>inuse<sp/>chunks<sp/>or<sp/>the<sp/>ends<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="2165"><highlight class="comment"></highlight></codeline>
<codeline lineno="2166"><highlight class="comment"><sp/><sp/>Note<sp/>that<sp/>the<sp/>`foot&apos;<sp/>of<sp/>the<sp/>current<sp/>chunk<sp/>is<sp/>actually<sp/>represented</highlight></codeline>
<codeline lineno="2167"><highlight class="comment"><sp/><sp/>as<sp/>the<sp/>prev_foot<sp/>of<sp/>the<sp/>NEXT<sp/>chunk.<sp/>This<sp/>makes<sp/>it<sp/>easier<sp/>to</highlight></codeline>
<codeline lineno="2168"><highlight class="comment"><sp/><sp/>deal<sp/>with<sp/>alignments<sp/>etc<sp/>but<sp/>can<sp/>be<sp/>very<sp/>confusing<sp/>when<sp/>trying</highlight></codeline>
<codeline lineno="2169"><highlight class="comment"><sp/><sp/>to<sp/>extend<sp/>or<sp/>adapt<sp/>this<sp/>code.</highlight></codeline>
<codeline lineno="2170"><highlight class="comment"></highlight></codeline>
<codeline lineno="2171"><highlight class="comment"><sp/><sp/>The<sp/>exceptions<sp/>to<sp/>all<sp/>this<sp/>are</highlight></codeline>
<codeline lineno="2172"><highlight class="comment"></highlight></codeline>
<codeline lineno="2173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>1.<sp/>The<sp/>special<sp/>chunk<sp/>`top&apos;<sp/>is<sp/>the<sp/>top-most<sp/>available<sp/>chunk<sp/>(i.e.,</highlight></codeline>
<codeline lineno="2174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>one<sp/>bordering<sp/>the<sp/>end<sp/>of<sp/>available<sp/>memory).<sp/>It<sp/>is<sp/>treated</highlight></codeline>
<codeline lineno="2175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specially.<sp/><sp/>Top<sp/>is<sp/>never<sp/>included<sp/>in<sp/>any<sp/>bin,<sp/>is<sp/>used<sp/>only<sp/>if</highlight></codeline>
<codeline lineno="2176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>other<sp/>chunk<sp/>is<sp/>available,<sp/>and<sp/>is<sp/>released<sp/>back<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="2177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system<sp/>if<sp/>it<sp/>is<sp/>very<sp/>large<sp/>(see<sp/>M_TRIM_THRESHOLD).<sp/><sp/>In<sp/>effect,</highlight></codeline>
<codeline lineno="2178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>top<sp/>chunk<sp/>is<sp/>treated<sp/>as<sp/>larger<sp/>(and<sp/>thus<sp/>less<sp/>well</highlight></codeline>
<codeline lineno="2179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fitting)<sp/>than<sp/>any<sp/>other<sp/>available<sp/>chunk.<sp/><sp/>The<sp/>top<sp/>chunk</highlight></codeline>
<codeline lineno="2180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doesn&apos;t<sp/>update<sp/>its<sp/>trailing<sp/>size<sp/>field<sp/>since<sp/>there<sp/>is<sp/>no<sp/>next</highlight></codeline>
<codeline lineno="2181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contiguous<sp/>chunk<sp/>that<sp/>would<sp/>have<sp/>to<sp/>index<sp/>off<sp/>it.<sp/>However,</highlight></codeline>
<codeline lineno="2182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>is<sp/>still<sp/>allocated<sp/>for<sp/>it<sp/>(TOP_FOOT_SIZE)<sp/>to<sp/>enable</highlight></codeline>
<codeline lineno="2183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>separation<sp/>or<sp/>merging<sp/>when<sp/>space<sp/>is<sp/>extended.</highlight></codeline>
<codeline lineno="2184"><highlight class="comment"></highlight></codeline>
<codeline lineno="2185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>3.<sp/>Chunks<sp/>allocated<sp/>via<sp/>mmap,<sp/>have<sp/>both<sp/>cinuse<sp/>and<sp/>pinuse<sp/>bits</highlight></codeline>
<codeline lineno="2186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleared<sp/>in<sp/>their<sp/>head<sp/>fields.<sp/><sp/>Because<sp/>they<sp/>are<sp/>allocated</highlight></codeline>
<codeline lineno="2187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one-by-one,<sp/>each<sp/>must<sp/>carry<sp/>its<sp/>own<sp/>prev_foot<sp/>field,<sp/>which<sp/>is</highlight></codeline>
<codeline lineno="2188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>also<sp/>used<sp/>to<sp/>hold<sp/>the<sp/>offset<sp/>this<sp/>chunk<sp/>has<sp/>within<sp/>its<sp/>mmapped</highlight></codeline>
<codeline lineno="2189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region,<sp/>which<sp/>is<sp/>needed<sp/>to<sp/>preserve<sp/>alignment.<sp/>Each<sp/>mmapped</highlight></codeline>
<codeline lineno="2190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk<sp/>is<sp/>trailed<sp/>by<sp/>the<sp/>first<sp/>two<sp/>fields<sp/>of<sp/>a<sp/>fake<sp/>next-chunk</highlight></codeline>
<codeline lineno="2191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>sake<sp/>of<sp/>usage<sp/>checks.</highlight></codeline>
<codeline lineno="2192"><highlight class="comment"></highlight></codeline>
<codeline lineno="2193"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195" refid="structmalloc__chunk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref><sp/>{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_foot;<sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>of<sp/>previous<sp/>chunk<sp/>(if<sp/>free).<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Size<sp/>and<sp/>inuse<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref>*<sp/>fd;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>double<sp/>links<sp/>--<sp/>used<sp/>only<sp/>if<sp/>free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref>*<sp/>bk;</highlight></codeline>
<codeline lineno="2200"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref><sp/><sp/><ref refid="structmalloc__chunk" kindref="compound">mchunk</ref>;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref>*<sp/><ref refid="structmalloc__chunk" kindref="compound">mchunkptr</ref>;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref>*<sp/><ref refid="structmalloc__chunk" kindref="compound">sbinptr</ref>;<sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>type<sp/>of<sp/>bins<sp/>of<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bindex_t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Described<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binmap_t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Described<sp/>below<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag_t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>type<sp/>of<sp/>various<sp/>bit<sp/>flag<sp/>sets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------<sp/>Chunks<sp/>sizes<sp/>and<sp/>alignments<sp/>-----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCHUNK_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sizeof(mchunk))</highlight></codeline>
<codeline lineno="2212"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FOOTERS</highlight></codeline>
<codeline lineno="2214"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CHUNK_OVERHEAD<sp/><sp/><sp/><sp/><sp/><sp/>(TWO_SIZE_T_SIZES)</highlight></codeline>
<codeline lineno="2215"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2216"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CHUNK_OVERHEAD<sp/><sp/><sp/><sp/><sp/><sp/>(SIZE_T_SIZE)</highlight></codeline>
<codeline lineno="2217"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2218"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>MMapped<sp/>chunks<sp/>need<sp/>a<sp/>second<sp/>word<sp/>of<sp/>overhead<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MMAP_CHUNK_OVERHEAD<sp/>(TWO_SIZE_T_SIZES)</highlight></codeline>
<codeline lineno="2221"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>...<sp/>and<sp/>additional<sp/>padding<sp/>for<sp/>fake<sp/>next-chunk<sp/>at<sp/>foot<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MMAP_FOOT_PAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FOUR_SIZE_T_SIZES)</highlight></codeline>
<codeline lineno="2223"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>smallest<sp/>size<sp/>we<sp/>can<sp/>malloc<sp/>is<sp/>an<sp/>aligned<sp/>minimal<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MIN_CHUNK_SIZE\</highlight></codeline>
<codeline lineno="2226"><highlight class="preprocessor"><sp/><sp/>((MCHUNK_SIZE<sp/>+<sp/>CHUNK_ALIGN_MASK)<sp/>&amp;<sp/>~CHUNK_ALIGN_MASK)</highlight></codeline>
<codeline lineno="2227"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>conversion<sp/>from<sp/>malloc<sp/>headers<sp/>to<sp/>user<sp/>pointers,<sp/>and<sp/>back<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>chunk2mem(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((void*)((char*)(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>TWO_SIZE_T_SIZES))</highlight></codeline>
<codeline lineno="2230"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>mem2chunk(mem)<sp/><sp/><sp/><sp/><sp/><sp/>((mchunkptr)((char*)(mem)<sp/>-<sp/>TWO_SIZE_T_SIZES))</highlight></codeline>
<codeline lineno="2231"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>chunk<sp/>associated<sp/>with<sp/>aligned<sp/>address<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>align_as_chunk(A)<sp/><sp/><sp/>(mchunkptr)((A)<sp/>+<sp/>align_offset(chunk2mem(A)))</highlight></codeline>
<codeline lineno="2233"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bounds<sp/>on<sp/>request<sp/>(not<sp/>chunk)<sp/>sizes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_REQUEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((-MIN_CHUNK_SIZE)<sp/>&lt;&lt;<sp/>2)</highlight></codeline>
<codeline lineno="2236"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MIN_REQUEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MIN_CHUNK_SIZE<sp/>-<sp/>CHUNK_OVERHEAD<sp/>-<sp/>SIZE_T_ONE)</highlight></codeline>
<codeline lineno="2237"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pad<sp/>request<sp/>bytes<sp/>into<sp/>a<sp/>usable<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>pad_request(req)<sp/>\</highlight></codeline>
<codeline lineno="2240"><highlight class="preprocessor"><sp/><sp/><sp/>(((req)<sp/>+<sp/>CHUNK_OVERHEAD<sp/>+<sp/>CHUNK_ALIGN_MASK)<sp/>&amp;<sp/>~CHUNK_ALIGN_MASK)</highlight></codeline>
<codeline lineno="2241"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pad<sp/>request,<sp/>checking<sp/>for<sp/>minimum<sp/>(but<sp/>not<sp/>maximum)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>request2size(req)<sp/>\</highlight></codeline>
<codeline lineno="2244"><highlight class="preprocessor"><sp/><sp/>(((req)<sp/>&lt;<sp/>MIN_REQUEST)?<sp/>MIN_CHUNK_SIZE<sp/>:<sp/>pad_request(req))</highlight></codeline>
<codeline lineno="2245"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------<sp/>Operations<sp/>on<sp/>head<sp/>and<sp/>foot<sp/>fields<sp/>-----------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2250"><highlight class="comment"><sp/><sp/>The<sp/>head<sp/>field<sp/>of<sp/>a<sp/>chunk<sp/>is<sp/>or&apos;ed<sp/>with<sp/>PINUSE_BIT<sp/>when<sp/>previous</highlight></codeline>
<codeline lineno="2251"><highlight class="comment"><sp/><sp/>adjacent<sp/>chunk<sp/>in<sp/>use,<sp/>and<sp/>or&apos;ed<sp/>with<sp/>CINUSE_BIT<sp/>if<sp/>this<sp/>chunk<sp/>is<sp/>in</highlight></codeline>
<codeline lineno="2252"><highlight class="comment"><sp/><sp/>use,<sp/>unless<sp/>mmapped,<sp/>in<sp/>which<sp/>case<sp/>both<sp/>bits<sp/>are<sp/>cleared.</highlight></codeline>
<codeline lineno="2253"><highlight class="comment"></highlight></codeline>
<codeline lineno="2254"><highlight class="comment"><sp/><sp/>FLAG4_BIT<sp/>is<sp/>not<sp/>used<sp/>by<sp/>this<sp/>malloc,<sp/>but<sp/>might<sp/>be<sp/>useful<sp/>in<sp/>extensions.</highlight></codeline>
<codeline lineno="2255"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PINUSE_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SIZE_T_ONE)</highlight></codeline>
<codeline lineno="2258"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CINUSE_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SIZE_T_TWO)</highlight></codeline>
<codeline lineno="2259"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FLAG4_BIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(SIZE_T_FOUR)</highlight></codeline>
<codeline lineno="2260"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INUSE_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PINUSE_BIT|CINUSE_BIT)</highlight></codeline>
<codeline lineno="2261"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>FLAG_BITS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PINUSE_BIT|CINUSE_BIT|FLAG4_BIT)</highlight></codeline>
<codeline lineno="2262"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Head<sp/>value<sp/>for<sp/>fenceposts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FENCEPOST_HEAD<sp/><sp/><sp/><sp/><sp/><sp/>(INUSE_BITS|SIZE_T_SIZE)</highlight></codeline>
<codeline lineno="2265"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>extraction<sp/>of<sp/>fields<sp/>from<sp/>head<sp/>words<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cinuse(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>&amp;<sp/>CINUSE_BIT)</highlight></codeline>
<codeline lineno="2268"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>pinuse(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>&amp;<sp/>PINUSE_BIT)</highlight></codeline>
<codeline lineno="2269"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>flag4inuse(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>&amp;<sp/>FLAG4_BIT)</highlight></codeline>
<codeline lineno="2270"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>is_inuse(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p)-&gt;head<sp/>&amp;<sp/>INUSE_BITS)<sp/>!=<sp/>PINUSE_BIT)</highlight></codeline>
<codeline lineno="2271"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>is_mmapped(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p)-&gt;head<sp/>&amp;<sp/>INUSE_BITS)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2272"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>chunksize(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>&amp;<sp/>~(FLAG_BITS))</highlight></codeline>
<codeline lineno="2274"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clear_pinuse(p)<sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>&amp;=<sp/>~PINUSE_BIT)</highlight></codeline>
<codeline lineno="2276"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>set_flag4(p)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>|=<sp/>FLAG4_BIT)</highlight></codeline>
<codeline lineno="2277"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>clear_flag4(p)<sp/><sp/><sp/><sp/><sp/><sp/>((p)-&gt;head<sp/>&amp;=<sp/>~FLAG4_BIT)</highlight></codeline>
<codeline lineno="2278"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Treat<sp/>space<sp/>at<sp/>ptr<sp/>+/-<sp/>offset<sp/>as<sp/>a<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>chunk_plus_offset(p,<sp/>s)<sp/><sp/>((mchunkptr)(((char*)(p))<sp/>+<sp/>(s)))</highlight></codeline>
<codeline lineno="2281"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>chunk_minus_offset(p,<sp/>s)<sp/>((mchunkptr)(((char*)(p))<sp/>-<sp/>(s)))</highlight></codeline>
<codeline lineno="2282"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ptr<sp/>to<sp/>next<sp/>or<sp/>previous<sp/>physical<sp/>malloc_chunk.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>next_chunk(p)<sp/>((mchunkptr)(<sp/>((char*)(p))<sp/>+<sp/>((p)-&gt;head<sp/>&amp;<sp/>~FLAG_BITS)))</highlight></codeline>
<codeline lineno="2285"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>prev_chunk(p)<sp/>((mchunkptr)(<sp/>((char*)(p))<sp/>-<sp/>((p)-&gt;prev_foot)<sp/>))</highlight></codeline>
<codeline lineno="2286"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>extract<sp/>next<sp/>chunk&apos;s<sp/>pinuse<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>next_pinuse(p)<sp/><sp/>((next_chunk(p)-&gt;head)<sp/>&amp;<sp/>PINUSE_BIT)</highlight></codeline>
<codeline lineno="2289"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get/set<sp/>size<sp/>at<sp/>footer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>get_foot(p,<sp/>s)<sp/><sp/>(((mchunkptr)((char*)(p)<sp/>+<sp/>(s)))-&gt;prev_foot)</highlight></codeline>
<codeline lineno="2292"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>set_foot(p,<sp/>s)<sp/><sp/>(((mchunkptr)((char*)(p)<sp/>+<sp/>(s)))-&gt;prev_foot<sp/>=<sp/>(s))</highlight></codeline>
<codeline lineno="2293"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>size,<sp/>pinuse<sp/>bit,<sp/>and<sp/>foot<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>s)\</highlight></codeline>
<codeline lineno="2296"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(s|PINUSE_BIT),<sp/>set_foot(p,<sp/>s))</highlight></codeline>
<codeline lineno="2297"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>size,<sp/>pinuse<sp/>bit,<sp/>foot,<sp/>and<sp/>clear<sp/>next<sp/>pinuse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_free_with_pinuse(p,<sp/>s,<sp/>n)\</highlight></codeline>
<codeline lineno="2300"><highlight class="preprocessor"><sp/><sp/>(clear_pinuse(n),<sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>s))</highlight></codeline>
<codeline lineno="2301"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>internal<sp/>overhead<sp/>associated<sp/>with<sp/>chunk<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>overhead_for(p)\</highlight></codeline>
<codeline lineno="2304"><highlight class="preprocessor"><sp/>(is_mmapped(p)?<sp/>MMAP_CHUNK_OVERHEAD<sp/>:<sp/>CHUNK_OVERHEAD)</highlight></codeline>
<codeline lineno="2305"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>if<sp/>malloced<sp/>space<sp/>is<sp/>not<sp/>necessarily<sp/>cleared<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MMAP_CLEARS</highlight></codeline>
<codeline lineno="2308"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>calloc_must_clear(p)<sp/>(!is_mmapped(p))</highlight></codeline>
<codeline lineno="2309"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MMAP_CLEARS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2310"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>calloc_must_clear(p)<sp/>(1)</highlight></codeline>
<codeline lineno="2311"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MMAP_CLEARS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2312"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------<sp/>Overlaid<sp/>data<sp/>structures<sp/>-----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2316"><highlight class="comment"><sp/><sp/>When<sp/>chunks<sp/>are<sp/>not<sp/>in<sp/>use,<sp/>they<sp/>are<sp/>treated<sp/>as<sp/>nodes<sp/>of<sp/>either</highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/><sp/>lists<sp/>or<sp/>trees.</highlight></codeline>
<codeline lineno="2318"><highlight class="comment"></highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/><sp/>&quot;Small&quot;<sp/><sp/>chunks<sp/>are<sp/>stored<sp/>in<sp/>circular<sp/>doubly-linked<sp/>lists,<sp/>and<sp/>look</highlight></codeline>
<codeline lineno="2320"><highlight class="comment"><sp/><sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="2321"><highlight class="comment"></highlight></codeline>
<codeline lineno="2322"><highlight class="comment"><sp/><sp/><sp/><sp/>chunk-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>previous<sp/>chunk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"><sp/><sp/><sp/><sp/>`head:&apos;<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>chunk,<sp/>in<sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|P|</highlight></codeline>
<codeline lineno="2326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>mem-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Forward<sp/>pointer<sp/>to<sp/>next<sp/>chunk<sp/>in<sp/>list<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Back<sp/>pointer<sp/>to<sp/>previous<sp/>chunk<sp/>in<sp/>list<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2330"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unused<sp/>space<sp/>(may<sp/>be<sp/>0<sp/>bytes<sp/>long)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="2332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2334"><highlight class="comment">nextchunk-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2335"><highlight class="comment"><sp/><sp/><sp/><sp/>`foot:&apos;<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>chunk,<sp/>in<sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2337"><highlight class="comment"></highlight></codeline>
<codeline lineno="2338"><highlight class="comment"><sp/><sp/>Larger<sp/>chunks<sp/>are<sp/>kept<sp/>in<sp/>a<sp/>form<sp/>of<sp/>bitwise<sp/>digital<sp/>trees<sp/>(aka</highlight></codeline>
<codeline lineno="2339"><highlight class="comment"><sp/><sp/>tries)<sp/>keyed<sp/>on<sp/>chunksizes.<sp/><sp/>Because<sp/>malloc_tree_chunks<sp/>are<sp/>only<sp/>for</highlight></codeline>
<codeline lineno="2340"><highlight class="comment"><sp/><sp/>free<sp/>chunks<sp/>greater<sp/>than<sp/>256<sp/>bytes,<sp/>their<sp/>size<sp/>doesn&apos;t<sp/>impose<sp/>any</highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/><sp/>constraints<sp/>on<sp/>user<sp/>chunk<sp/>sizes.<sp/><sp/>Each<sp/>node<sp/>looks<sp/>like:</highlight></codeline>
<codeline lineno="2342"><highlight class="comment"></highlight></codeline>
<codeline lineno="2343"><highlight class="comment"><sp/><sp/><sp/><sp/>chunk-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2344"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>previous<sp/>chunk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2345"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2346"><highlight class="comment"><sp/><sp/><sp/><sp/>`head:&apos;<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>chunk,<sp/>in<sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|P|</highlight></codeline>
<codeline lineno="2347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>mem-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Forward<sp/>pointer<sp/>to<sp/>next<sp/>chunk<sp/>of<sp/>same<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Back<sp/>pointer<sp/>to<sp/>previous<sp/>chunk<sp/>of<sp/>same<sp/>size<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>left<sp/>child<sp/>(child[0])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>right<sp/>child<sp/>(child[1])<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>parent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bin<sp/>index<sp/>of<sp/>this<sp/>chunk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unused<sp/>space<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="2361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2362"><highlight class="comment">nextchunk-&gt;<sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/><sp/><sp/><sp/>`foot:&apos;<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>chunk,<sp/>in<sp/>bytes<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="2364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</highlight></codeline>
<codeline lineno="2365"><highlight class="comment"></highlight></codeline>
<codeline lineno="2366"><highlight class="comment"><sp/><sp/>Each<sp/>tree<sp/>holding<sp/>treenodes<sp/>is<sp/>a<sp/>tree<sp/>of<sp/>unique<sp/>chunk<sp/>sizes.<sp/><sp/>Chunks</highlight></codeline>
<codeline lineno="2367"><highlight class="comment"><sp/><sp/>of<sp/>the<sp/>same<sp/>size<sp/>are<sp/>arranged<sp/>in<sp/>a<sp/>circularly-linked<sp/>list,<sp/>with<sp/>only</highlight></codeline>
<codeline lineno="2368"><highlight class="comment"><sp/><sp/>the<sp/>oldest<sp/>chunk<sp/>(the<sp/>next<sp/>to<sp/>be<sp/>used,<sp/>in<sp/>our<sp/>FIFO<sp/>ordering)</highlight></codeline>
<codeline lineno="2369"><highlight class="comment"><sp/><sp/>actually<sp/>in<sp/>the<sp/>tree.<sp/><sp/>(Tree<sp/>members<sp/>are<sp/>distinguished<sp/>by<sp/>a<sp/>non-null</highlight></codeline>
<codeline lineno="2370"><highlight class="comment"><sp/><sp/>parent<sp/>pointer.)<sp/><sp/>If<sp/>a<sp/>chunk<sp/>with<sp/>the<sp/>same<sp/>size<sp/>an<sp/>an<sp/>existing<sp/>node</highlight></codeline>
<codeline lineno="2371"><highlight class="comment"><sp/><sp/>is<sp/>inserted,<sp/>it<sp/>is<sp/>linked<sp/>off<sp/>the<sp/>existing<sp/>node<sp/>using<sp/>pointers<sp/>that</highlight></codeline>
<codeline lineno="2372"><highlight class="comment"><sp/><sp/>work<sp/>in<sp/>the<sp/>same<sp/>way<sp/>as<sp/>fd/bk<sp/>pointers<sp/>of<sp/>small<sp/>chunks.</highlight></codeline>
<codeline lineno="2373"><highlight class="comment"></highlight></codeline>
<codeline lineno="2374"><highlight class="comment"><sp/><sp/>Each<sp/>tree<sp/>contains<sp/>a<sp/>power<sp/>of<sp/>2<sp/>sized<sp/>range<sp/>of<sp/>chunk<sp/>sizes<sp/>(the</highlight></codeline>
<codeline lineno="2375"><highlight class="comment"><sp/><sp/>smallest<sp/>is<sp/>0x100<sp/>&lt;=<sp/>x<sp/>&lt;<sp/>0x180),<sp/>which<sp/>is<sp/>is<sp/>divided<sp/>in<sp/>half<sp/>at<sp/>each</highlight></codeline>
<codeline lineno="2376"><highlight class="comment"><sp/><sp/>tree<sp/>level,<sp/>with<sp/>the<sp/>chunks<sp/>in<sp/>the<sp/>smaller<sp/>half<sp/>of<sp/>the<sp/>range<sp/>(0x100</highlight></codeline>
<codeline lineno="2377"><highlight class="comment"><sp/><sp/>&lt;=<sp/>x<sp/>&lt;<sp/>0x140<sp/>for<sp/>the<sp/>top<sp/>nose)<sp/>in<sp/>the<sp/>left<sp/>subtree<sp/>and<sp/>the<sp/>larger</highlight></codeline>
<codeline lineno="2378"><highlight class="comment"><sp/><sp/>half<sp/>(0x140<sp/>&lt;=<sp/>x<sp/>&lt;<sp/>0x180)<sp/>in<sp/>the<sp/>right<sp/>subtree.<sp/><sp/>This<sp/>is,<sp/>of<sp/>course,</highlight></codeline>
<codeline lineno="2379"><highlight class="comment"><sp/><sp/>done<sp/>by<sp/>inspecting<sp/>individual<sp/>bits.</highlight></codeline>
<codeline lineno="2380"><highlight class="comment"></highlight></codeline>
<codeline lineno="2381"><highlight class="comment"><sp/><sp/>Using<sp/>these<sp/>rules,<sp/>each<sp/>node&apos;s<sp/>left<sp/>subtree<sp/>contains<sp/>all<sp/>smaller</highlight></codeline>
<codeline lineno="2382"><highlight class="comment"><sp/><sp/>sizes<sp/>than<sp/>its<sp/>right<sp/>subtree.<sp/><sp/>However,<sp/>the<sp/>node<sp/>at<sp/>the<sp/>root<sp/>of<sp/>each</highlight></codeline>
<codeline lineno="2383"><highlight class="comment"><sp/><sp/>subtree<sp/>has<sp/>no<sp/>particular<sp/>ordering<sp/>relationship<sp/>to<sp/>either.<sp/><sp/>(The</highlight></codeline>
<codeline lineno="2384"><highlight class="comment"><sp/><sp/>dividing<sp/>line<sp/>between<sp/>the<sp/>subtree<sp/>sizes<sp/>is<sp/>based<sp/>on<sp/>trie<sp/>relation.)</highlight></codeline>
<codeline lineno="2385"><highlight class="comment"><sp/><sp/>If<sp/>we<sp/>remove<sp/>the<sp/>last<sp/>chunk<sp/>of<sp/>a<sp/>given<sp/>size<sp/>from<sp/>the<sp/>interior<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2386"><highlight class="comment"><sp/><sp/>tree,<sp/>we<sp/>need<sp/>to<sp/>replace<sp/>it<sp/>with<sp/>a<sp/>leaf<sp/>node.<sp/><sp/>The<sp/>tree<sp/>ordering</highlight></codeline>
<codeline lineno="2387"><highlight class="comment"><sp/><sp/>rules<sp/>permit<sp/>a<sp/>node<sp/>to<sp/>be<sp/>replaced<sp/>by<sp/>any<sp/>leaf<sp/>below<sp/>it.</highlight></codeline>
<codeline lineno="2388"><highlight class="comment"></highlight></codeline>
<codeline lineno="2389"><highlight class="comment"><sp/><sp/>The<sp/>smallest<sp/>chunk<sp/>in<sp/>a<sp/>tree<sp/>(a<sp/>common<sp/>operation<sp/>in<sp/>a<sp/>best-fit</highlight></codeline>
<codeline lineno="2390"><highlight class="comment"><sp/><sp/>allocator)<sp/>can<sp/>be<sp/>found<sp/>by<sp/>walking<sp/>a<sp/>path<sp/>to<sp/>the<sp/>leftmost<sp/>leaf<sp/>in</highlight></codeline>
<codeline lineno="2391"><highlight class="comment"><sp/><sp/>the<sp/>tree.<sp/><sp/>Unlike<sp/>a<sp/>usual<sp/>binary<sp/>tree,<sp/>where<sp/>we<sp/>follow<sp/>left<sp/>child</highlight></codeline>
<codeline lineno="2392"><highlight class="comment"><sp/><sp/>pointers<sp/>until<sp/>we<sp/>reach<sp/>a<sp/>null,<sp/>here<sp/>we<sp/>follow<sp/>the<sp/>right<sp/>child</highlight></codeline>
<codeline lineno="2393"><highlight class="comment"><sp/><sp/>pointer<sp/>any<sp/>time<sp/>the<sp/>left<sp/>one<sp/>is<sp/>null,<sp/>until<sp/>we<sp/>reach<sp/>a<sp/>leaf<sp/>with</highlight></codeline>
<codeline lineno="2394"><highlight class="comment"><sp/><sp/>both<sp/>child<sp/>pointers<sp/>null.<sp/>The<sp/>smallest<sp/>chunk<sp/>in<sp/>the<sp/>tree<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="2395"><highlight class="comment"><sp/><sp/>somewhere<sp/>along<sp/>that<sp/>path.</highlight></codeline>
<codeline lineno="2396"><highlight class="comment"></highlight></codeline>
<codeline lineno="2397"><highlight class="comment"><sp/><sp/>The<sp/>worst<sp/>case<sp/>number<sp/>of<sp/>steps<sp/>to<sp/>add,<sp/>find,<sp/>or<sp/>remove<sp/>a<sp/>node<sp/>is</highlight></codeline>
<codeline lineno="2398"><highlight class="comment"><sp/><sp/>bounded<sp/>by<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>differentiating<sp/>chunks<sp/>within</highlight></codeline>
<codeline lineno="2399"><highlight class="comment"><sp/><sp/>bins.<sp/>Under<sp/>current<sp/>bin<sp/>calculations,<sp/>this<sp/>ranges<sp/>from<sp/>6<sp/>up<sp/>to<sp/>21</highlight></codeline>
<codeline lineno="2400"><highlight class="comment"><sp/><sp/>(for<sp/>32<sp/>bit<sp/>sizes)<sp/>or<sp/>up<sp/>to<sp/>53<sp/>(for<sp/>64<sp/>bit<sp/>sizes).<sp/>The<sp/>typical<sp/>case</highlight></codeline>
<codeline lineno="2401"><highlight class="comment"><sp/><sp/>is<sp/>of<sp/>course<sp/>much<sp/>better.</highlight></codeline>
<codeline lineno="2402"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404" refid="structmalloc__tree__chunk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref><sp/>{</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>four<sp/>fields<sp/>must<sp/>be<sp/>compatible<sp/>with<sp/>malloc_chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev_foot;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>*<sp/>fd;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>*<sp/>bk;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>*<sp/>child[2];</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>*<sp/>parent;</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/>bindex_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref><sp/><sp/><ref refid="structmalloc__tree__chunk" kindref="compound">tchunk</ref>;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>*<sp/><ref refid="structmalloc__tree__chunk" kindref="compound">tchunkptr</ref>;</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>*<sp/><ref refid="structmalloc__tree__chunk" kindref="compound">tbinptr</ref>;<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>type<sp/>of<sp/>bins<sp/>of<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>little<sp/>helper<sp/>macro<sp/>for<sp/>trees<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>leftmost_child(t)<sp/>((t)-&gt;child[0]<sp/>!=<sp/>0?<sp/>(t)-&gt;child[0]<sp/>:<sp/>(t)-&gt;child[1])</highlight></codeline>
<codeline lineno="2422"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------<sp/>Segments<sp/>--------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2426"><highlight class="comment"><sp/><sp/>Each<sp/>malloc<sp/>space<sp/>may<sp/>include<sp/>non-contiguous<sp/>segments,<sp/>held<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="2427"><highlight class="comment"><sp/><sp/>list<sp/>headed<sp/>by<sp/>an<sp/>embedded<sp/>malloc_segment<sp/>record<sp/>representing<sp/>the</highlight></codeline>
<codeline lineno="2428"><highlight class="comment"><sp/><sp/>top-most<sp/>space.<sp/>Segments<sp/>also<sp/>include<sp/>flags<sp/>holding<sp/>properties<sp/>of</highlight></codeline>
<codeline lineno="2429"><highlight class="comment"><sp/><sp/>the<sp/>space.<sp/>Large<sp/>chunks<sp/>that<sp/>are<sp/>directly<sp/>allocated<sp/>by<sp/>mmap<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="2430"><highlight class="comment"><sp/><sp/>included<sp/>in<sp/>this<sp/>list.<sp/>They<sp/>are<sp/>instead<sp/>independently<sp/>created<sp/>and</highlight></codeline>
<codeline lineno="2431"><highlight class="comment"><sp/><sp/>destroyed<sp/>without<sp/>otherwise<sp/>keeping<sp/>track<sp/>of<sp/>them.</highlight></codeline>
<codeline lineno="2432"><highlight class="comment"></highlight></codeline>
<codeline lineno="2433"><highlight class="comment"><sp/><sp/>Segment<sp/>management<sp/>mainly<sp/>comes<sp/>into<sp/>play<sp/>for<sp/>spaces<sp/>allocated<sp/>by</highlight></codeline>
<codeline lineno="2434"><highlight class="comment"><sp/><sp/>MMAP.<sp/><sp/>Any<sp/>call<sp/>to<sp/>MMAP<sp/>might<sp/>or<sp/>might<sp/>not<sp/>return<sp/>memory<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="2435"><highlight class="comment"><sp/><sp/>adjacent<sp/>to<sp/>an<sp/>existing<sp/>segment.<sp/><sp/>MORECORE<sp/>normally<sp/>contiguously</highlight></codeline>
<codeline lineno="2436"><highlight class="comment"><sp/><sp/>extends<sp/>the<sp/>current<sp/>space,<sp/>so<sp/>this<sp/>space<sp/>is<sp/>almost<sp/>always<sp/>adjacent,</highlight></codeline>
<codeline lineno="2437"><highlight class="comment"><sp/><sp/>which<sp/>is<sp/>simpler<sp/>and<sp/>faster<sp/>to<sp/>deal<sp/>with.<sp/>(This<sp/>is<sp/>why<sp/>MORECORE<sp/>is</highlight></codeline>
<codeline lineno="2438"><highlight class="comment"><sp/><sp/>used<sp/>preferentially<sp/>to<sp/>MMAP<sp/>when<sp/>both<sp/>are<sp/>available<sp/>--<sp/>see</highlight></codeline>
<codeline lineno="2439"><highlight class="comment"><sp/><sp/>sys_alloc.)<sp/><sp/>When<sp/>allocating<sp/>using<sp/>MMAP,<sp/>we<sp/>don&apos;t<sp/>use<sp/>any<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/><sp/>hinting<sp/>mechanisms<sp/>(inconsistently)<sp/>supported<sp/>in<sp/>various</highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/><sp/>implementations<sp/>of<sp/>unix<sp/>mmap,<sp/>or<sp/>distinguish<sp/>reserving<sp/>from</highlight></codeline>
<codeline lineno="2442"><highlight class="comment"><sp/><sp/>committing<sp/>memory.<sp/>Instead,<sp/>we<sp/>just<sp/>ask<sp/>for<sp/>space,<sp/>and<sp/>exploit</highlight></codeline>
<codeline lineno="2443"><highlight class="comment"><sp/><sp/>contiguity<sp/>when<sp/>we<sp/>get<sp/>it.<sp/><sp/>It<sp/>is<sp/>probably<sp/>possible<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="2444"><highlight class="comment"><sp/><sp/>better<sp/>than<sp/>this<sp/>on<sp/>some<sp/>systems,<sp/>but<sp/>no<sp/>general<sp/>scheme<sp/>seems</highlight></codeline>
<codeline lineno="2445"><highlight class="comment"><sp/><sp/>to<sp/>be<sp/>significantly<sp/>better.</highlight></codeline>
<codeline lineno="2446"><highlight class="comment"></highlight></codeline>
<codeline lineno="2447"><highlight class="comment"><sp/><sp/>Management<sp/>entails<sp/>a<sp/>simpler<sp/>variant<sp/>of<sp/>the<sp/>consolidation<sp/>scheme</highlight></codeline>
<codeline lineno="2448"><highlight class="comment"><sp/><sp/>used<sp/>for<sp/>chunks<sp/>to<sp/>reduce<sp/>fragmentation<sp/>--<sp/>new<sp/>adjacent<sp/>memory<sp/>is</highlight></codeline>
<codeline lineno="2449"><highlight class="comment"><sp/><sp/>normally<sp/>prepended<sp/>or<sp/>appended<sp/>to<sp/>an<sp/>existing<sp/>segment.<sp/>However,</highlight></codeline>
<codeline lineno="2450"><highlight class="comment"><sp/><sp/>there<sp/>are<sp/>limitations<sp/>compared<sp/>to<sp/>chunk<sp/>consolidation<sp/>that<sp/>mostly</highlight></codeline>
<codeline lineno="2451"><highlight class="comment"><sp/><sp/>reflect<sp/>the<sp/>fact<sp/>that<sp/>segment<sp/>processing<sp/>is<sp/>relatively<sp/>infrequent</highlight></codeline>
<codeline lineno="2452"><highlight class="comment"><sp/><sp/>(occurring<sp/>only<sp/>when<sp/>getting<sp/>memory<sp/>from<sp/>system)<sp/>and<sp/>that<sp/>we</highlight></codeline>
<codeline lineno="2453"><highlight class="comment"><sp/><sp/>don&apos;t<sp/>expect<sp/>to<sp/>have<sp/>huge<sp/>numbers<sp/>of<sp/>segments:</highlight></codeline>
<codeline lineno="2454"><highlight class="comment"></highlight></codeline>
<codeline lineno="2455"><highlight class="comment"><sp/><sp/>*<sp/>Segments<sp/>are<sp/>not<sp/>indexed,<sp/>so<sp/>traversal<sp/>requires<sp/>linear<sp/>scans.<sp/><sp/>(It</highlight></codeline>
<codeline lineno="2456"><highlight class="comment"><sp/><sp/><sp/><sp/>would<sp/>be<sp/>possible<sp/>to<sp/>index<sp/>these,<sp/>but<sp/>is<sp/>not<sp/>worth<sp/>the<sp/>extra</highlight></codeline>
<codeline lineno="2457"><highlight class="comment"><sp/><sp/><sp/><sp/>overhead<sp/>and<sp/>complexity<sp/>for<sp/>most<sp/>programs<sp/>on<sp/>most<sp/>platforms.)</highlight></codeline>
<codeline lineno="2458"><highlight class="comment"><sp/><sp/>*<sp/>New<sp/>segments<sp/>are<sp/>only<sp/>appended<sp/>to<sp/>old<sp/>ones<sp/>when<sp/>holding<sp/>top-most</highlight></codeline>
<codeline lineno="2459"><highlight class="comment"><sp/><sp/><sp/><sp/>memory;<sp/>if<sp/>they<sp/>cannot<sp/>be<sp/>prepended<sp/>to<sp/>others,<sp/>they<sp/>are<sp/>held<sp/>in</highlight></codeline>
<codeline lineno="2460"><highlight class="comment"><sp/><sp/><sp/><sp/>different<sp/>segments.</highlight></codeline>
<codeline lineno="2461"><highlight class="comment"></highlight></codeline>
<codeline lineno="2462"><highlight class="comment"><sp/><sp/>Except<sp/>for<sp/>the<sp/>top-most<sp/>segment<sp/>of<sp/>an<sp/>mstate,<sp/>each<sp/>segment<sp/>record</highlight></codeline>
<codeline lineno="2463"><highlight class="comment"><sp/><sp/>is<sp/>kept<sp/>at<sp/>the<sp/>tail<sp/>of<sp/>its<sp/>segment.<sp/>Segments<sp/>are<sp/>added<sp/>by<sp/>pushing</highlight></codeline>
<codeline lineno="2464"><highlight class="comment"><sp/><sp/>segment<sp/>records<sp/>onto<sp/>the<sp/>list<sp/>headed<sp/>by<sp/>&amp;mstate.seg<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="2465"><highlight class="comment"><sp/><sp/>containing<sp/>mstate.</highlight></codeline>
<codeline lineno="2466"><highlight class="comment"></highlight></codeline>
<codeline lineno="2467"><highlight class="comment"><sp/><sp/>Segment<sp/>flags<sp/>control<sp/>allocation/merge/deallocation<sp/>policies:</highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>EXTERN_BIT<sp/>set,<sp/>then<sp/>we<sp/>did<sp/>not<sp/>allocate<sp/>this<sp/>segment,</highlight></codeline>
<codeline lineno="2469"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>so<sp/>should<sp/>not<sp/>try<sp/>to<sp/>deallocate<sp/>or<sp/>merge<sp/>with<sp/>others.</highlight></codeline>
<codeline lineno="2470"><highlight class="comment"><sp/><sp/><sp/><sp/>(This<sp/>currently<sp/>holds<sp/>only<sp/>for<sp/>the<sp/>initial<sp/>segment<sp/>passed</highlight></codeline>
<codeline lineno="2471"><highlight class="comment"><sp/><sp/><sp/><sp/>into<sp/>create_mspace_with_base.)</highlight></codeline>
<codeline lineno="2472"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>USE_MMAP_BIT<sp/>set,<sp/>the<sp/>segment<sp/>may<sp/>be<sp/>merged<sp/>with</highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/><sp/><sp/><sp/>other<sp/>surrounding<sp/>mmapped<sp/>segments<sp/>and<sp/>trimmed/de-allocated</highlight></codeline>
<codeline lineno="2474"><highlight class="comment"><sp/><sp/><sp/><sp/>using<sp/>munmap.</highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/><sp/>*<sp/>If<sp/>neither<sp/>bit<sp/>is<sp/>set,<sp/>then<sp/>the<sp/>segment<sp/>was<sp/>obtained<sp/>using</highlight></codeline>
<codeline lineno="2476"><highlight class="comment"><sp/><sp/><sp/><sp/>MORECORE<sp/>so<sp/>can<sp/>be<sp/>merged<sp/>with<sp/>surrounding<sp/>MORECORE&apos;d<sp/>segments</highlight></codeline>
<codeline lineno="2477"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>deallocated/trimmed<sp/>using<sp/>MORECORE<sp/>with<sp/>negative<sp/>arguments.</highlight></codeline>
<codeline lineno="2478"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480" refid="structmalloc__segment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref><sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>base<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>allocated<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref>*<sp/>next;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ptr<sp/>to<sp/>next<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/>flag_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>sflags;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>mmap<sp/>and<sp/>extern<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"></highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_mmapped_segment(S)<sp/><sp/>((S)-&gt;sflags<sp/>&amp;<sp/>USE_MMAP_BIT)</highlight></codeline>
<codeline lineno="2488"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>is_extern_segment(S)<sp/><sp/><sp/>((S)-&gt;sflags<sp/>&amp;<sp/>EXTERN_BIT)</highlight></codeline>
<codeline lineno="2489"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref><sp/><sp/><ref refid="structmalloc__segment" kindref="compound">msegment</ref>;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref>*<sp/><ref refid="structmalloc__segment" kindref="compound">msegmentptr</ref>;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>malloc_state<sp/>-----------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2496"><highlight class="comment"><sp/><sp/><sp/>A<sp/>malloc_state<sp/>holds<sp/>all<sp/>of<sp/>the<sp/>bookkeeping<sp/>for<sp/>a<sp/>space.</highlight></codeline>
<codeline lineno="2497"><highlight class="comment"><sp/><sp/><sp/>The<sp/>main<sp/>fields<sp/>are:</highlight></codeline>
<codeline lineno="2498"><highlight class="comment"></highlight></codeline>
<codeline lineno="2499"><highlight class="comment"><sp/><sp/>Top</highlight></codeline>
<codeline lineno="2500"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>topmost<sp/>chunk<sp/>of<sp/>the<sp/>currently<sp/>active<sp/>segment.<sp/>Its<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="2501"><highlight class="comment"><sp/><sp/><sp/><sp/>cached<sp/>in<sp/>topsize.<sp/><sp/>The<sp/>actual<sp/>size<sp/>of<sp/>topmost<sp/>space<sp/>is</highlight></codeline>
<codeline lineno="2502"><highlight class="comment"><sp/><sp/><sp/><sp/>topsize+TOP_FOOT_SIZE,<sp/>which<sp/>includes<sp/>space<sp/>reserved<sp/>for<sp/>adding</highlight></codeline>
<codeline lineno="2503"><highlight class="comment"><sp/><sp/><sp/><sp/>fenceposts<sp/>and<sp/>segment<sp/>records<sp/>if<sp/>necessary<sp/>when<sp/>getting<sp/>more</highlight></codeline>
<codeline lineno="2504"><highlight class="comment"><sp/><sp/><sp/><sp/>space<sp/>from<sp/>the<sp/>system.<sp/><sp/>The<sp/>size<sp/>at<sp/>which<sp/>to<sp/>autotrim<sp/>top<sp/>is</highlight></codeline>
<codeline lineno="2505"><highlight class="comment"><sp/><sp/><sp/><sp/>cached<sp/>from<sp/>mparams<sp/>in<sp/>trim_check,<sp/>except<sp/>that<sp/>it<sp/>is<sp/>disabled<sp/>if</highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/><sp/><sp/><sp/>an<sp/>autotrim<sp/>fails.</highlight></codeline>
<codeline lineno="2507"><highlight class="comment"></highlight></codeline>
<codeline lineno="2508"><highlight class="comment"><sp/><sp/>Designated<sp/>victim<sp/>(dv)</highlight></codeline>
<codeline lineno="2509"><highlight class="comment"><sp/><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>preferred<sp/>chunk<sp/>for<sp/>servicing<sp/>small<sp/>requests<sp/>that</highlight></codeline>
<codeline lineno="2510"><highlight class="comment"><sp/><sp/><sp/><sp/>don&apos;t<sp/>have<sp/>exact<sp/>fits.<sp/><sp/>It<sp/>is<sp/>normally<sp/>the<sp/>chunk<sp/>split<sp/>off<sp/>most</highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/><sp/><sp/><sp/>recently<sp/>to<sp/>service<sp/>another<sp/>small<sp/>request.<sp/><sp/>Its<sp/>size<sp/>is<sp/>cached<sp/>in</highlight></codeline>
<codeline lineno="2512"><highlight class="comment"><sp/><sp/><sp/><sp/>dvsize.<sp/>The<sp/>link<sp/>fields<sp/>of<sp/>this<sp/>chunk<sp/>are<sp/>not<sp/>maintained<sp/>since<sp/>it</highlight></codeline>
<codeline lineno="2513"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>not<sp/>kept<sp/>in<sp/>a<sp/>bin.</highlight></codeline>
<codeline lineno="2514"><highlight class="comment"></highlight></codeline>
<codeline lineno="2515"><highlight class="comment"><sp/><sp/>SmallBins</highlight></codeline>
<codeline lineno="2516"><highlight class="comment"><sp/><sp/><sp/><sp/>An<sp/>array<sp/>of<sp/>bin<sp/>headers<sp/>for<sp/>free<sp/>chunks.<sp/><sp/>These<sp/>bins<sp/>hold<sp/>chunks</highlight></codeline>
<codeline lineno="2517"><highlight class="comment"><sp/><sp/><sp/><sp/>with<sp/>sizes<sp/>less<sp/>than<sp/>MIN_LARGE_SIZE<sp/>bytes.<sp/>Each<sp/>bin<sp/>contains</highlight></codeline>
<codeline lineno="2518"><highlight class="comment"><sp/><sp/><sp/><sp/>chunks<sp/>of<sp/>all<sp/>the<sp/>same<sp/>size,<sp/>spaced<sp/>8<sp/>bytes<sp/>apart.<sp/><sp/>To<sp/>simplify</highlight></codeline>
<codeline lineno="2519"><highlight class="comment"><sp/><sp/><sp/><sp/>use<sp/>in<sp/>double-linked<sp/>lists,<sp/>each<sp/>bin<sp/>header<sp/>acts<sp/>as<sp/>a<sp/>malloc_chunk</highlight></codeline>
<codeline lineno="2520"><highlight class="comment"><sp/><sp/><sp/><sp/>pointing<sp/>to<sp/>the<sp/>real<sp/>first<sp/>node,<sp/>if<sp/>it<sp/>exists<sp/>(else<sp/>pointing<sp/>to</highlight></codeline>
<codeline lineno="2521"><highlight class="comment"><sp/><sp/><sp/><sp/>itself).<sp/><sp/>This<sp/>avoids<sp/>special-casing<sp/>for<sp/>headers.<sp/><sp/>But<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="2522"><highlight class="comment"><sp/><sp/><sp/><sp/>waste,<sp/>we<sp/>allocate<sp/>only<sp/>the<sp/>fd/bk<sp/>pointers<sp/>of<sp/>bins,<sp/>and<sp/>then<sp/>use</highlight></codeline>
<codeline lineno="2523"><highlight class="comment"><sp/><sp/><sp/><sp/>repositioning<sp/>tricks<sp/>to<sp/>treat<sp/>these<sp/>as<sp/>the<sp/>fields<sp/>of<sp/>a<sp/>chunk.</highlight></codeline>
<codeline lineno="2524"><highlight class="comment"></highlight></codeline>
<codeline lineno="2525"><highlight class="comment"><sp/><sp/>TreeBins</highlight></codeline>
<codeline lineno="2526"><highlight class="comment"><sp/><sp/><sp/><sp/>Treebins<sp/>are<sp/>pointers<sp/>to<sp/>the<sp/>roots<sp/>of<sp/>trees<sp/>holding<sp/>a<sp/>range<sp/>of</highlight></codeline>
<codeline lineno="2527"><highlight class="comment"><sp/><sp/><sp/><sp/>sizes.<sp/>There<sp/>are<sp/>2<sp/>equally<sp/>spaced<sp/>treebins<sp/>for<sp/>each<sp/>power<sp/>of<sp/>two</highlight></codeline>
<codeline lineno="2528"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>TREE_SHIFT<sp/>to<sp/>TREE_SHIFT+16.<sp/>The<sp/>last<sp/>bin<sp/>holds<sp/>anything</highlight></codeline>
<codeline lineno="2529"><highlight class="comment"><sp/><sp/><sp/><sp/>larger.</highlight></codeline>
<codeline lineno="2530"><highlight class="comment"></highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/><sp/>Bin<sp/>maps</highlight></codeline>
<codeline lineno="2532"><highlight class="comment"><sp/><sp/><sp/><sp/>There<sp/>is<sp/>one<sp/>bit<sp/>map<sp/>for<sp/>small<sp/>bins<sp/>(&quot;smallmap&quot;)<sp/>and<sp/>one<sp/>for</highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/><sp/><sp/><sp/>treebins<sp/>(&quot;treemap).<sp/><sp/>Each<sp/>bin<sp/>sets<sp/>its<sp/>bit<sp/>when<sp/>non-empty,<sp/>and</highlight></codeline>
<codeline lineno="2534"><highlight class="comment"><sp/><sp/><sp/><sp/>clears<sp/>the<sp/>bit<sp/>when<sp/>empty.<sp/><sp/>Bit<sp/>operations<sp/>are<sp/>then<sp/>used<sp/>to<sp/>avoid</highlight></codeline>
<codeline lineno="2535"><highlight class="comment"><sp/><sp/><sp/><sp/>bin-by-bin<sp/>searching<sp/>--<sp/>nearly<sp/>all<sp/>&quot;search&quot;<sp/>is<sp/>done<sp/>without<sp/>ever</highlight></codeline>
<codeline lineno="2536"><highlight class="comment"><sp/><sp/><sp/><sp/>looking<sp/>at<sp/>bins<sp/>that<sp/>won&apos;t<sp/>be<sp/>selected.<sp/><sp/>The<sp/>bit<sp/>maps</highlight></codeline>
<codeline lineno="2537"><highlight class="comment"><sp/><sp/><sp/><sp/>conservatively<sp/>use<sp/>32<sp/>bits<sp/>per<sp/>map<sp/>word,<sp/>even<sp/>if<sp/>on<sp/>64bit<sp/>system.</highlight></codeline>
<codeline lineno="2538"><highlight class="comment"><sp/><sp/><sp/><sp/>For<sp/>a<sp/>good<sp/>description<sp/>of<sp/>some<sp/>of<sp/>the<sp/>bit-based<sp/>techniques<sp/>used</highlight></codeline>
<codeline lineno="2539"><highlight class="comment"><sp/><sp/><sp/><sp/>here,<sp/>see<sp/>Henry<sp/>S.<sp/>Warren<sp/>Jr&apos;s<sp/>book<sp/>&quot;Hacker&apos;s<sp/>Delight&quot;<sp/>(and</highlight></codeline>
<codeline lineno="2540"><highlight class="comment"><sp/><sp/><sp/><sp/>supplement<sp/>at<sp/>http://hackersdelight.org/).<sp/>Many<sp/>of<sp/>these<sp/>are</highlight></codeline>
<codeline lineno="2541"><highlight class="comment"><sp/><sp/><sp/><sp/>intended<sp/>to<sp/>reduce<sp/>the<sp/>branchiness<sp/>of<sp/>paths<sp/>through<sp/>malloc<sp/>etc,<sp/>as</highlight></codeline>
<codeline lineno="2542"><highlight class="comment"><sp/><sp/><sp/><sp/>well<sp/>as<sp/>to<sp/>reduce<sp/>the<sp/>number<sp/>of<sp/>memory<sp/>locations<sp/>read<sp/>or<sp/>written.</highlight></codeline>
<codeline lineno="2543"><highlight class="comment"></highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/><sp/>Segments</highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>list<sp/>of<sp/>segments<sp/>headed<sp/>by<sp/>an<sp/>embedded<sp/>malloc_segment<sp/>record</highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/><sp/><sp/><sp/>representing<sp/>the<sp/>initial<sp/>space.</highlight></codeline>
<codeline lineno="2547"><highlight class="comment"></highlight></codeline>
<codeline lineno="2548"><highlight class="comment"><sp/><sp/>Address<sp/>check<sp/>support</highlight></codeline>
<codeline lineno="2549"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>least_addr<sp/>field<sp/>is<sp/>the<sp/>least<sp/>address<sp/>ever<sp/>obtained<sp/>from</highlight></codeline>
<codeline lineno="2550"><highlight class="comment"><sp/><sp/><sp/><sp/>MORECORE<sp/>or<sp/>MMAP.<sp/>Attempted<sp/>frees<sp/>and<sp/>reallocs<sp/>of<sp/>any<sp/>address<sp/>less</highlight></codeline>
<codeline lineno="2551"><highlight class="comment"><sp/><sp/><sp/><sp/>than<sp/>this<sp/>are<sp/>trapped<sp/>(unless<sp/>INSECURE<sp/>is<sp/>defined).</highlight></codeline>
<codeline lineno="2552"><highlight class="comment"></highlight></codeline>
<codeline lineno="2553"><highlight class="comment"><sp/><sp/>Magic<sp/>tag</highlight></codeline>
<codeline lineno="2554"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>cross-check<sp/>field<sp/>that<sp/>should<sp/>always<sp/>hold<sp/>same<sp/>value<sp/>as<sp/>mparams.magic.</highlight></codeline>
<codeline lineno="2555"><highlight class="comment"></highlight></codeline>
<codeline lineno="2556"><highlight class="comment"><sp/><sp/>Max<sp/>allowed<sp/>footprint</highlight></codeline>
<codeline lineno="2557"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>maximum<sp/>allowed<sp/>bytes<sp/>to<sp/>allocate<sp/>from<sp/>system<sp/>(zero<sp/>means<sp/>no<sp/>limit)</highlight></codeline>
<codeline lineno="2558"><highlight class="comment"></highlight></codeline>
<codeline lineno="2559"><highlight class="comment"><sp/><sp/>Flags</highlight></codeline>
<codeline lineno="2560"><highlight class="comment"><sp/><sp/><sp/><sp/>Bits<sp/>recording<sp/>whether<sp/>to<sp/>use<sp/>MMAP,<sp/>locks,<sp/>or<sp/>contiguous<sp/>MORECORE</highlight></codeline>
<codeline lineno="2561"><highlight class="comment"></highlight></codeline>
<codeline lineno="2562"><highlight class="comment"><sp/><sp/>Statistics</highlight></codeline>
<codeline lineno="2563"><highlight class="comment"><sp/><sp/><sp/><sp/>Each<sp/>space<sp/>keeps<sp/>track<sp/>of<sp/>current<sp/>and<sp/>maximum<sp/>system<sp/>memory</highlight></codeline>
<codeline lineno="2564"><highlight class="comment"><sp/><sp/><sp/><sp/>obtained<sp/>via<sp/>MORECORE<sp/>or<sp/>MMAP.</highlight></codeline>
<codeline lineno="2565"><highlight class="comment"></highlight></codeline>
<codeline lineno="2566"><highlight class="comment"><sp/><sp/>Trim<sp/>support</highlight></codeline>
<codeline lineno="2567"><highlight class="comment"><sp/><sp/><sp/><sp/>Fields<sp/>holding<sp/>the<sp/>amount<sp/>of<sp/>unused<sp/>topmost<sp/>memory<sp/>that<sp/>should<sp/>trigger</highlight></codeline>
<codeline lineno="2568"><highlight class="comment"><sp/><sp/><sp/><sp/>trimming,<sp/>and<sp/>a<sp/>counter<sp/>to<sp/>force<sp/>periodic<sp/>scanning<sp/>to<sp/>release<sp/>unused</highlight></codeline>
<codeline lineno="2569"><highlight class="comment"><sp/><sp/><sp/><sp/>non-topmost<sp/>segments.</highlight></codeline>
<codeline lineno="2570"><highlight class="comment"></highlight></codeline>
<codeline lineno="2571"><highlight class="comment"><sp/><sp/>Locking</highlight></codeline>
<codeline lineno="2572"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>USE_LOCKS<sp/>is<sp/>defined,<sp/>the<sp/>&quot;mutex&quot;<sp/>lock<sp/>is<sp/>acquired<sp/>and<sp/>released</highlight></codeline>
<codeline lineno="2573"><highlight class="comment"><sp/><sp/><sp/><sp/>around<sp/>every<sp/>public<sp/>call<sp/>using<sp/>this<sp/>mspace.</highlight></codeline>
<codeline lineno="2574"><highlight class="comment"></highlight></codeline>
<codeline lineno="2575"><highlight class="comment"><sp/><sp/>Extension<sp/>support</highlight></codeline>
<codeline lineno="2576"><highlight class="comment"><sp/><sp/><sp/><sp/>A<sp/>void*<sp/>pointer<sp/>and<sp/>a<sp/>size_t<sp/>field<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>help<sp/>implement</highlight></codeline>
<codeline lineno="2577"><highlight class="comment"><sp/><sp/><sp/><sp/>extensions<sp/>to<sp/>this<sp/>malloc.</highlight></codeline>
<codeline lineno="2578"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bin<sp/>types,<sp/>widths<sp/>and<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NSMALLBINS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32U)</highlight></codeline>
<codeline lineno="2582"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NTREEBINS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(32U)</highlight></codeline>
<codeline lineno="2583"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SMALLBIN_SHIFT<sp/><sp/><sp/><sp/>(3U)</highlight></codeline>
<codeline lineno="2584"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>SMALLBIN_WIDTH<sp/><sp/><sp/><sp/>(SIZE_T_ONE<sp/>&lt;&lt;<sp/>SMALLBIN_SHIFT)</highlight></codeline>
<codeline lineno="2585"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>TREEBIN_SHIFT<sp/><sp/><sp/><sp/><sp/>(8U)</highlight></codeline>
<codeline lineno="2586"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MIN_LARGE_SIZE<sp/><sp/><sp/><sp/>(SIZE_T_ONE<sp/>&lt;&lt;<sp/>TREEBIN_SHIFT)</highlight></codeline>
<codeline lineno="2587"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAX_SMALL_SIZE<sp/><sp/><sp/><sp/>(MIN_LARGE_SIZE<sp/>-<sp/>SIZE_T_ONE)</highlight></codeline>
<codeline lineno="2588"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MAX_SMALL_REQUEST<sp/>(MAX_SMALL_SIZE<sp/>-<sp/>CHUNK_ALIGN_MASK<sp/>-<sp/>CHUNK_OVERHEAD)</highlight></codeline>
<codeline lineno="2589"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590" refid="structmalloc__state" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__state" kindref="compound">malloc_state</ref><sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/>binmap_t<sp/><sp/><sp/>smallmap;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/>binmap_t<sp/><sp/><sp/>treemap;</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>dvsize;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>topsize;</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>least_addr;</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>mchunkptr<sp/><sp/>dv;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>mchunkptr<sp/><sp/>top;</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>trim_check;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>release_checks;</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>magic;</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/>mchunkptr<sp/><sp/>smallbins[(NSMALLBINS+1)*2];</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>tbinptr<sp/><sp/><sp/><sp/>treebins[NTREEBINS];</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>footprint;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>max_footprint;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>footprint_limit;<sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>means<sp/>no<sp/>limit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/>flag_t<sp/><sp/><sp/><sp/><sp/>mflags;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS</highlight></codeline>
<codeline lineno="2608"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>MLOCK_T<sp/><sp/><sp/><sp/>mutex;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>locate<sp/>lock<sp/>among<sp/>fields<sp/>that<sp/>rarely<sp/>change<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2610"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="structmalloc__segment" kindref="compound">msegment</ref><sp/><sp/><sp/>seg;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>extp;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unused<sp/>but<sp/>available<sp/>for<sp/>extensions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>exts;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__state" kindref="compound">malloc_state</ref>*<sp/><sp/><sp/><sp/><ref refid="structmalloc__state" kindref="compound">mstate</ref>;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------<sp/>Global<sp/>malloc_state<sp/>and<sp/>malloc_params<sp/>-------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2620"><highlight class="comment"><sp/><sp/>malloc_params<sp/>holds<sp/>global<sp/>properties,<sp/>including<sp/>those<sp/>that<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="2621"><highlight class="comment"><sp/><sp/>dynamically<sp/>set<sp/>using<sp/>mallopt.<sp/>There<sp/>is<sp/>a<sp/>single<sp/>instance,<sp/>mparams,</highlight></codeline>
<codeline lineno="2622"><highlight class="comment"><sp/><sp/>initialized<sp/>in<sp/>init_mparams.<sp/>Note<sp/>that<sp/>the<sp/>non-zeroness<sp/>of<sp/>&quot;magic&quot;</highlight></codeline>
<codeline lineno="2623"><highlight class="comment"><sp/><sp/>also<sp/>serves<sp/>as<sp/>an<sp/>initialization<sp/>flag.</highlight></codeline>
<codeline lineno="2624"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626" refid="structmalloc__params" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__params" kindref="compound">malloc_params</ref><sp/>{</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>magic;</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>page_size;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>granularity;</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mmap_threshold;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trim_threshold;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/>flag_t<sp/>default_mflags;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__params" kindref="compound">malloc_params</ref><sp/>mparams;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Ensure<sp/>mparams<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ensure_initialization()<sp/>(void)(mparams.magic<sp/>!=<sp/>0<sp/>||<sp/>init_mparams())</highlight></codeline>
<codeline lineno="2639"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight></codeline>
<codeline lineno="2641"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>global<sp/>malloc_state<sp/>used<sp/>for<sp/>all<sp/>non-&quot;mspace&quot;<sp/>calls<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__state" kindref="compound">malloc_state</ref><sp/>_gm_;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>gm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&amp;_gm_)</highlight></codeline>
<codeline lineno="2645"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>is_global(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)<sp/>==<sp/>&amp;_gm_)</highlight></codeline>
<codeline lineno="2646"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2648"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_initialized(M)<sp/><sp/>((M)-&gt;top<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2650"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------<sp/>system<sp/>alloc<sp/>setup<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Operations<sp/>on<sp/>mflags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>use_lock(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;mflags<sp/>&amp;<sp/><sp/><sp/>USE_LOCK_BIT)</highlight></codeline>
<codeline lineno="2656"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>enable_lock(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;mflags<sp/>|=<sp/><sp/>USE_LOCK_BIT)</highlight></codeline>
<codeline lineno="2657"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS</highlight></codeline>
<codeline lineno="2658"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>disable_lock(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;mflags<sp/>&amp;=<sp/>~USE_LOCK_BIT)</highlight></codeline>
<codeline lineno="2659"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2660"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>disable_lock(M)</highlight></codeline>
<codeline lineno="2661"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2662"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>use_mmap(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;mflags<sp/>&amp;<sp/><sp/><sp/>USE_MMAP_BIT)</highlight></codeline>
<codeline lineno="2664"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>enable_mmap(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;mflags<sp/>|=<sp/><sp/>USE_MMAP_BIT)</highlight></codeline>
<codeline lineno="2665"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>HAVE_MMAP</highlight></codeline>
<codeline lineno="2666"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>disable_mmap(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;mflags<sp/>&amp;=<sp/>~USE_MMAP_BIT)</highlight></codeline>
<codeline lineno="2667"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2668"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>disable_mmap(M)</highlight></codeline>
<codeline lineno="2669"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2670"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>use_noncontiguous(M)<sp/><sp/>((M)-&gt;mflags<sp/>&amp;<sp/><sp/><sp/>USE_NONCONTIGUOUS_BIT)</highlight></codeline>
<codeline lineno="2672"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>disable_contiguous(M)<sp/>((M)-&gt;mflags<sp/>|=<sp/><sp/>USE_NONCONTIGUOUS_BIT)</highlight></codeline>
<codeline lineno="2673"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_lock(M,L)\</highlight></codeline>
<codeline lineno="2675"><highlight class="preprocessor"><sp/>((M)-&gt;mflags<sp/>=<sp/>(L)?\</highlight></codeline>
<codeline lineno="2676"><highlight class="preprocessor"><sp/><sp/>((M)-&gt;mflags<sp/>|<sp/>USE_LOCK_BIT)<sp/>:\</highlight></codeline>
<codeline lineno="2677"><highlight class="preprocessor"><sp/><sp/>((M)-&gt;mflags<sp/>&amp;<sp/>~USE_LOCK_BIT))</highlight></codeline>
<codeline lineno="2678"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>page-align<sp/>a<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>page_align(S)\</highlight></codeline>
<codeline lineno="2681"><highlight class="preprocessor"><sp/>(((S)<sp/>+<sp/>(mparams.page_size<sp/>-<sp/>SIZE_T_ONE))<sp/>&amp;<sp/>~(mparams.page_size<sp/>-<sp/>SIZE_T_ONE))</highlight></codeline>
<codeline lineno="2682"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>granularity-align<sp/>a<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>granularity_align(S)\</highlight></codeline>
<codeline lineno="2685"><highlight class="preprocessor"><sp/><sp/>(((S)<sp/>+<sp/>(mparams.granularity<sp/>-<sp/>SIZE_T_ONE))\</highlight></codeline>
<codeline lineno="2686"><highlight class="preprocessor"><sp/><sp/><sp/>&amp;<sp/>~(mparams.granularity<sp/>-<sp/>SIZE_T_ONE))</highlight></codeline>
<codeline lineno="2687"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>mmap,<sp/>use<sp/>granularity<sp/>alignment<sp/>on<sp/>windows,<sp/>else<sp/>page-align<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="2691"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>mmap_align(S)<sp/>granularity_align(S)</highlight></codeline>
<codeline lineno="2692"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2693"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>mmap_align(S)<sp/>page_align(S)</highlight></codeline>
<codeline lineno="2694"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="2695"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>sys_alloc,<sp/>enough<sp/>padding<sp/>to<sp/>ensure<sp/>can<sp/>malloc<sp/>request<sp/>on<sp/>success<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYS_ALLOC_PADDING<sp/>(TOP_FOOT_SIZE<sp/>+<sp/>MALLOC_ALIGNMENT)</highlight></codeline>
<codeline lineno="2698"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_page_aligned(S)\</highlight></codeline>
<codeline lineno="2700"><highlight class="preprocessor"><sp/><sp/><sp/>(((size_t)(S)<sp/>&amp;<sp/>(mparams.page_size<sp/>-<sp/>SIZE_T_ONE))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2701"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>is_granularity_aligned(S)\</highlight></codeline>
<codeline lineno="2702"><highlight class="preprocessor"><sp/><sp/><sp/>(((size_t)(S)<sp/>&amp;<sp/>(mparams.granularity<sp/>-<sp/>SIZE_T_ONE))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2703"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>True<sp/>if<sp/>segment<sp/>S<sp/>holds<sp/>address<sp/>A<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>segment_holds(S,<sp/>A)\</highlight></codeline>
<codeline lineno="2706"><highlight class="preprocessor"><sp/><sp/>((char*)(A)<sp/>&gt;=<sp/>S-&gt;base<sp/>&amp;&amp;<sp/>(char*)(A)<sp/>&lt;<sp/>S-&gt;base<sp/>+<sp/>S-&gt;size)</highlight></codeline>
<codeline lineno="2707"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>segment<sp/>holding<sp/>given<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>msegmentptr<sp/>segment_holding(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>addr)<sp/>{</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>&gt;=<sp/>sp-&gt;base<sp/>&amp;&amp;<sp/>addr<sp/>&lt;<sp/>sp-&gt;base<sp/>+<sp/>sp-&gt;size)</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sp;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sp<sp/>=<sp/>sp-&gt;next)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>if<sp/>segment<sp/>contains<sp/>a<sp/>segment<sp/>link<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>has_segment_link(mstate<sp/>m,<sp/>msegmentptr<sp/>ss)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)sp<sp/>&gt;=<sp/>ss-&gt;base<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)sp<sp/>&lt;<sp/>ss-&gt;base<sp/>+<sp/>ss-&gt;size)</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sp<sp/>=<sp/>sp-&gt;next)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MORECORE_CANNOT_TRIM</highlight></codeline>
<codeline lineno="2731"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>should_trim(M,s)<sp/><sp/>((s)<sp/>&gt;<sp/>(M)-&gt;trim_check)</highlight></codeline>
<codeline lineno="2732"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CANNOT_TRIM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2733"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>should_trim(M,s)<sp/><sp/>(0)</highlight></codeline>
<codeline lineno="2734"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CANNOT_TRIM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2735"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2737"><highlight class="comment"><sp/><sp/>TOP_FOOT_SIZE<sp/>is<sp/>padding<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>segment,<sp/>including<sp/>space</highlight></codeline>
<codeline lineno="2738"><highlight class="comment"><sp/><sp/>that<sp/>may<sp/>be<sp/>needed<sp/>to<sp/>place<sp/>segment<sp/>records<sp/>and<sp/>fenceposts<sp/>when<sp/>new</highlight></codeline>
<codeline lineno="2739"><highlight class="comment"><sp/><sp/>noncontiguous<sp/>segments<sp/>are<sp/>added.</highlight></codeline>
<codeline lineno="2740"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOP_FOOT_SIZE\</highlight></codeline>
<codeline lineno="2742"><highlight class="preprocessor"><sp/><sp/>(align_offset(chunk2mem(0))+pad_request(sizeof(struct<sp/>malloc_segment))+MIN_CHUNK_SIZE)</highlight></codeline>
<codeline lineno="2743"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------------------<sp/><sp/>Hooks<sp/>--------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2748"><highlight class="comment"><sp/><sp/>PREACTION<sp/>should<sp/>be<sp/>defined<sp/>to<sp/>return<sp/>0<sp/>on<sp/>success,<sp/>and<sp/>nonzero<sp/>on</highlight></codeline>
<codeline lineno="2749"><highlight class="comment"><sp/><sp/>failure.<sp/>If<sp/>you<sp/>are<sp/>not<sp/>using<sp/>locking,<sp/>you<sp/>can<sp/>redefine<sp/>these<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="2750"><highlight class="comment"><sp/><sp/>anything<sp/>you<sp/>like.</highlight></codeline>
<codeline lineno="2751"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS</highlight></codeline>
<codeline lineno="2754"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PREACTION(M)<sp/><sp/>((use_lock(M))?<sp/>ACQUIRE_LOCK(&amp;(M)-&gt;mutex)<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="2755"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>POSTACTION(M)<sp/>{<sp/>if<sp/>(use_lock(M))<sp/>RELEASE_LOCK(&amp;(M)-&gt;mutex);<sp/>}</highlight></codeline>
<codeline lineno="2756"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2757"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PREACTION</highlight></codeline>
<codeline lineno="2759"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PREACTION(M)<sp/>(0)</highlight></codeline>
<codeline lineno="2760"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>PREACTION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2761"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>POSTACTION</highlight></codeline>
<codeline lineno="2763"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>POSTACTION(M)</highlight></codeline>
<codeline lineno="2764"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>POSTACTION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2765"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_LOCKS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2767"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2769"><highlight class="comment"><sp/><sp/>CORRUPTION_ERROR_ACTION<sp/>is<sp/>triggered<sp/>upon<sp/>detected<sp/>bad<sp/>addresses.</highlight></codeline>
<codeline lineno="2770"><highlight class="comment"><sp/><sp/>USAGE_ERROR_ACTION<sp/>is<sp/>triggered<sp/>on<sp/>detected<sp/>bad<sp/>frees<sp/>and</highlight></codeline>
<codeline lineno="2771"><highlight class="comment"><sp/><sp/>reallocs.<sp/>The<sp/>argument<sp/>p<sp/>is<sp/>an<sp/>address<sp/>that<sp/>might<sp/>have<sp/>triggered<sp/>the</highlight></codeline>
<codeline lineno="2772"><highlight class="comment"><sp/><sp/>fault.<sp/>It<sp/>is<sp/>ignored<sp/>by<sp/>the<sp/>two<sp/>predefined<sp/>actions,<sp/>but<sp/>might<sp/>be</highlight></codeline>
<codeline lineno="2773"><highlight class="comment"><sp/><sp/>useful<sp/>in<sp/>custom<sp/>actions<sp/>that<sp/>try<sp/>to<sp/>help<sp/>diagnose<sp/>errors.</highlight></codeline>
<codeline lineno="2774"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PROCEED_ON_ERROR</highlight></codeline>
<codeline lineno="2777"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>A<sp/>count<sp/>of<sp/>the<sp/>number<sp/>of<sp/>corruption<sp/>errors<sp/>causing<sp/>resets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>malloc_corruption_error_count;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>default<sp/>corruption<sp/>action<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_on_error(mstate<sp/>m);</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CORRUPTION_ERROR_ACTION(m)<sp/><sp/>reset_on_error(m)</highlight></codeline>
<codeline lineno="2785"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USAGE_ERROR_ACTION(m,<sp/>p)</highlight></codeline>
<codeline lineno="2786"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>PROCEED_ON_ERROR<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2788"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CORRUPTION_ERROR_ACTION</highlight></codeline>
<codeline lineno="2790"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CORRUPTION_ERROR_ACTION(m)<sp/>ABORT</highlight></codeline>
<codeline lineno="2791"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>CORRUPTION_ERROR_ACTION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2792"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USAGE_ERROR_ACTION</highlight></codeline>
<codeline lineno="2794"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>USAGE_ERROR_ACTION(m,p)<sp/>ABORT</highlight></codeline>
<codeline lineno="2795"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USAGE_ERROR_ACTION<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2796"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PROCEED_ON_ERROR<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2798"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------<sp/>Debugging<sp/>setup<sp/>----------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>DEBUG</highlight></codeline>
<codeline lineno="2803"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>check_free_chunk(M,P)</highlight></codeline>
<codeline lineno="2805"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_inuse_chunk(M,P)</highlight></codeline>
<codeline lineno="2806"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_malloced_chunk(M,P,N)</highlight></codeline>
<codeline lineno="2807"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_mmapped_chunk(M,P)</highlight></codeline>
<codeline lineno="2808"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_malloc_state(M)</highlight></codeline>
<codeline lineno="2809"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_top_chunk(M,P)</highlight></codeline>
<codeline lineno="2810"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2812"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_free_chunk(M,P)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_free_chunk(M,P)</highlight></codeline>
<codeline lineno="2813"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_inuse_chunk(M,P)<sp/><sp/><sp/><sp/><sp/><sp/>do_check_inuse_chunk(M,P)</highlight></codeline>
<codeline lineno="2814"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_top_chunk(M,P)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_top_chunk(M,P)</highlight></codeline>
<codeline lineno="2815"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_malloced_chunk(M,P,N)<sp/>do_check_malloced_chunk(M,P,N)</highlight></codeline>
<codeline lineno="2816"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_mmapped_chunk(M,P)<sp/><sp/><sp/><sp/>do_check_mmapped_chunk(M,P)</highlight></codeline>
<codeline lineno="2817"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>check_malloc_state(M)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_malloc_state(M)</highlight></codeline>
<codeline lineno="2818"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_any_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_top_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p);</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_mmapped_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_inuse_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p);</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_free_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_malloced_chunk(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_tree(mstate<sp/>m,<sp/>tchunkptr<sp/>t);</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_treebin(mstate<sp/>m,<sp/>bindex_t<sp/>i);</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_smallbin(mstate<sp/>m,<sp/>bindex_t<sp/>i);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>do_check_malloc_state(mstate<sp/>m);</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>bin_find(mstate<sp/>m,<sp/>mchunkptr<sp/>x);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>traverse_and_check(mstate<sp/>m);</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2832"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>Indexing<sp/>Bins<sp/>----------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>is_small(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((s)<sp/>&gt;&gt;<sp/>SMALLBIN_SHIFT)<sp/>&lt;<sp/>NSMALLBINS)</highlight></codeline>
<codeline lineno="2836"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>small_index(s)<sp/><sp/><sp/><sp/><sp/><sp/>(bindex_t)((s)<sp/><sp/>&gt;&gt;<sp/>SMALLBIN_SHIFT)</highlight></codeline>
<codeline lineno="2837"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>small_index2size(i)<sp/>((i)<sp/><sp/>&lt;&lt;<sp/>SMALLBIN_SHIFT)</highlight></codeline>
<codeline lineno="2838"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>MIN_SMALL_INDEX<sp/><sp/><sp/><sp/><sp/>(small_index(MIN_CHUNK_SIZE))</highlight></codeline>
<codeline lineno="2839"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2840"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>addressing<sp/>by<sp/>index.<sp/>See<sp/>above<sp/>about<sp/>smallbin<sp/>repositioning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>smallbin_at(M,<sp/>i)<sp/><sp/><sp/>((sbinptr)((char*)&amp;((M)-&gt;smallbins[(i)&lt;&lt;1])))</highlight></codeline>
<codeline lineno="2842"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>treebin_at(M,i)<sp/><sp/><sp/><sp/><sp/>(&amp;((M)-&gt;treebins[i]))</highlight></codeline>
<codeline lineno="2843"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>assign<sp/>tree<sp/>index<sp/>for<sp/>size<sp/>S<sp/>to<sp/>variable<sp/>I.<sp/>Use<sp/>x86<sp/>asm<sp/>if<sp/>possible<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(defined(__i386__)<sp/>||<sp/>defined(__x86_64__))</highlight></codeline>
<codeline lineno="2846"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_tree_index(S,<sp/>I)\</highlight></codeline>
<codeline lineno="2847"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2848"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>X<sp/>=<sp/>S<sp/>&gt;&gt;<sp/>TREEBIN_SHIFT;\</highlight></codeline>
<codeline lineno="2849"><highlight class="preprocessor"><sp/><sp/>if<sp/>(X<sp/>==<sp/>0)\</highlight></codeline>
<codeline lineno="2850"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="2851"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>(X<sp/>&gt;<sp/>0xFFFF)\</highlight></codeline>
<codeline lineno="2852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>NTREEBINS-1;\</highlight></codeline>
<codeline lineno="2853"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="2854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>K<sp/>=<sp/>(unsigned)<sp/>sizeof(X)*__CHAR_BIT__<sp/>-<sp/>1<sp/>-<sp/>(unsigned)<sp/>__builtin_clz(X);<sp/>\</highlight></codeline>
<codeline lineno="2855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/><sp/>(bindex_t)((K<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>((S<sp/>&gt;&gt;<sp/>(K<sp/>+<sp/>(TREEBIN_SHIFT-1))<sp/>&amp;<sp/>1)));\</highlight></codeline>
<codeline lineno="2856"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="2857"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2858"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(__INTEL_COMPILER)</highlight></codeline>
<codeline lineno="2860"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_tree_index(S,<sp/>I)\</highlight></codeline>
<codeline lineno="2861"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2862"><highlight class="preprocessor"><sp/><sp/>size_t<sp/>X<sp/>=<sp/>S<sp/>&gt;&gt;<sp/>TREEBIN_SHIFT;\</highlight></codeline>
<codeline lineno="2863"><highlight class="preprocessor"><sp/><sp/>if<sp/>(X<sp/>==<sp/>0)\</highlight></codeline>
<codeline lineno="2864"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="2865"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>(X<sp/>&gt;<sp/>0xFFFF)\</highlight></codeline>
<codeline lineno="2866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>NTREEBINS-1;\</highlight></codeline>
<codeline lineno="2867"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="2868"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>K<sp/>=<sp/>_bit_scan_reverse<sp/>(X);<sp/>\</highlight></codeline>
<codeline lineno="2869"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/><sp/>(bindex_t)((K<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>((S<sp/>&gt;&gt;<sp/>(K<sp/>+<sp/>(TREEBIN_SHIFT-1))<sp/>&amp;<sp/>1)));\</highlight></codeline>
<codeline lineno="2870"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="2871"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2872"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER&gt;=1300</highlight></codeline>
<codeline lineno="2874"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_tree_index(S,<sp/>I)\</highlight></codeline>
<codeline lineno="2875"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2876"><highlight class="preprocessor"><sp/><sp/>size_t<sp/>X<sp/>=<sp/>S<sp/>&gt;&gt;<sp/>TREEBIN_SHIFT;\</highlight></codeline>
<codeline lineno="2877"><highlight class="preprocessor"><sp/><sp/>if<sp/>(X<sp/>==<sp/>0)\</highlight></codeline>
<codeline lineno="2878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="2879"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>(X<sp/>&gt;<sp/>0xFFFF)\</highlight></codeline>
<codeline lineno="2880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>NTREEBINS-1;\</highlight></codeline>
<codeline lineno="2881"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="2882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>K;\</highlight></codeline>
<codeline lineno="2883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_BitScanReverse((DWORD<sp/>*)<sp/>&amp;K,<sp/>(DWORD)<sp/>X);\</highlight></codeline>
<codeline lineno="2884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/><sp/>(bindex_t)((K<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>((S<sp/>&gt;&gt;<sp/>(K<sp/>+<sp/>(TREEBIN_SHIFT-1))<sp/>&amp;<sp/>1)));\</highlight></codeline>
<codeline lineno="2885"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="2886"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2887"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>GNUC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2889"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_tree_index(S,<sp/>I)\</highlight></codeline>
<codeline lineno="2890"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2891"><highlight class="preprocessor"><sp/><sp/>size_t<sp/>X<sp/>=<sp/>S<sp/>&gt;&gt;<sp/>TREEBIN_SHIFT;\</highlight></codeline>
<codeline lineno="2892"><highlight class="preprocessor"><sp/><sp/>if<sp/>(X<sp/>==<sp/>0)\</highlight></codeline>
<codeline lineno="2893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="2894"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>(X<sp/>&gt;<sp/>0xFFFF)\</highlight></codeline>
<codeline lineno="2895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>NTREEBINS-1;\</highlight></codeline>
<codeline lineno="2896"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="2897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>Y<sp/>=<sp/>(unsigned<sp/>int)X;\</highlight></codeline>
<codeline lineno="2898"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>N<sp/>=<sp/>((Y<sp/>-<sp/>0x100)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>8;\</highlight></codeline>
<codeline lineno="2899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>K<sp/>=<sp/>(((Y<sp/>&lt;&lt;=<sp/>N)<sp/>-<sp/>0x1000)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>4;\</highlight></codeline>
<codeline lineno="2900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>N<sp/>+=<sp/>K;\</highlight></codeline>
<codeline lineno="2901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>N<sp/>+=<sp/>K<sp/>=<sp/>(((Y<sp/>&lt;&lt;=<sp/>K)<sp/>-<sp/>0x4000)<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>2;\</highlight></codeline>
<codeline lineno="2902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>K<sp/>=<sp/>14<sp/>-<sp/>N<sp/>+<sp/>((Y<sp/>&lt;&lt;=<sp/>K)<sp/>&gt;&gt;<sp/>15);\</highlight></codeline>
<codeline lineno="2903"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>I<sp/>=<sp/>(K<sp/>&lt;&lt;<sp/>1)<sp/>+<sp/>((S<sp/>&gt;&gt;<sp/>(K<sp/>+<sp/>(TREEBIN_SHIFT-1))<sp/>&amp;<sp/>1));\</highlight></codeline>
<codeline lineno="2904"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="2905"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2906"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>GNUC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2907"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bit<sp/>representing<sp/>maximum<sp/>resolved<sp/>size<sp/>in<sp/>a<sp/>treebin<sp/>at<sp/>i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bit_for_tree_index(i)<sp/>\</highlight></codeline>
<codeline lineno="2910"><highlight class="preprocessor"><sp/><sp/><sp/>(i<sp/>==<sp/>NTREEBINS-1)?<sp/>(SIZE_T_BITSIZE-1)<sp/>:<sp/>(((i)<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>TREEBIN_SHIFT<sp/>-<sp/>2)</highlight></codeline>
<codeline lineno="2911"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Shift<sp/>placing<sp/>maximum<sp/>resolved<sp/>bit<sp/>in<sp/>a<sp/>treebin<sp/>at<sp/>i<sp/>as<sp/>sign<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>leftshift_for_tree_index(i)<sp/>\</highlight></codeline>
<codeline lineno="2914"><highlight class="preprocessor"><sp/><sp/><sp/>((i<sp/>==<sp/>NTREEBINS-1)?<sp/>0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="2915"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((SIZE_T_BITSIZE-SIZE_T_ONE)<sp/>-<sp/>(((i)<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>TREEBIN_SHIFT<sp/>-<sp/>2)))</highlight></codeline>
<codeline lineno="2916"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>size<sp/>of<sp/>the<sp/>smallest<sp/>chunk<sp/>held<sp/>in<sp/>bin<sp/>with<sp/>index<sp/>i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>minsize_for_tree_index(i)<sp/>\</highlight></codeline>
<codeline lineno="2919"><highlight class="preprocessor"><sp/><sp/><sp/>((SIZE_T_ONE<sp/>&lt;&lt;<sp/>(((i)<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>TREEBIN_SHIFT))<sp/>|<sp/><sp/>\</highlight></codeline>
<codeline lineno="2920"><highlight class="preprocessor"><sp/><sp/><sp/>(((size_t)((i)<sp/>&amp;<sp/>SIZE_T_ONE))<sp/>&lt;&lt;<sp/>(((i)<sp/>&gt;&gt;<sp/>1)<sp/>+<sp/>TREEBIN_SHIFT<sp/>-<sp/>1)))</highlight></codeline>
<codeline lineno="2921"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"></highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------<sp/>Operations<sp/>on<sp/>bin<sp/>maps<sp/>-----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"></highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>bit<sp/>corresponding<sp/>to<sp/>given<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>idx2bit(i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((binmap_t)(1)<sp/>&lt;&lt;<sp/>(i))</highlight></codeline>
<codeline lineno="2927"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mark/Clear<sp/>bits<sp/>with<sp/>given<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mark_smallmap(M,i)<sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;smallmap<sp/>|=<sp/><sp/>idx2bit(i))</highlight></codeline>
<codeline lineno="2930"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>clear_smallmap(M,i)<sp/><sp/><sp/><sp/><sp/>((M)-&gt;smallmap<sp/>&amp;=<sp/>~idx2bit(i))</highlight></codeline>
<codeline lineno="2931"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>smallmap_is_marked(M,i)<sp/>((M)-&gt;smallmap<sp/>&amp;<sp/><sp/><sp/>idx2bit(i))</highlight></codeline>
<codeline lineno="2932"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mark_treemap(M,i)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;treemap<sp/><sp/>|=<sp/><sp/>idx2bit(i))</highlight></codeline>
<codeline lineno="2934"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>clear_treemap(M,i)<sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;treemap<sp/><sp/>&amp;=<sp/>~idx2bit(i))</highlight></codeline>
<codeline lineno="2935"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>treemap_is_marked(M,i)<sp/><sp/>((M)-&gt;treemap<sp/><sp/>&amp;<sp/><sp/><sp/>idx2bit(i))</highlight></codeline>
<codeline lineno="2936"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>isolate<sp/>the<sp/>least<sp/>set<sp/>bit<sp/>of<sp/>a<sp/>bitmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>least_bit(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>&amp;<sp/>-(x))</highlight></codeline>
<codeline lineno="2939"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mask<sp/>with<sp/>all<sp/>bits<sp/>to<sp/>left<sp/>of<sp/>least<sp/>bit<sp/>of<sp/>x<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>left_bits(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x&lt;&lt;1)<sp/>|<sp/>-(x&lt;&lt;1))</highlight></codeline>
<codeline lineno="2942"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>mask<sp/>with<sp/>all<sp/>bits<sp/>to<sp/>left<sp/>of<sp/>or<sp/>equal<sp/>to<sp/>least<sp/>bit<sp/>of<sp/>x<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>same_or_left_bits(x)<sp/>((x)<sp/>|<sp/>-(x))</highlight></codeline>
<codeline lineno="2945"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>index<sp/>corresponding<sp/>to<sp/>given<sp/>bit.<sp/>Use<sp/>x86<sp/>asm<sp/>if<sp/>possible<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(defined(__i386__)<sp/>||<sp/>defined(__x86_64__))</highlight></codeline>
<codeline lineno="2949"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_bit2idx(X,<sp/>I)\</highlight></codeline>
<codeline lineno="2950"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2951"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>J;\</highlight></codeline>
<codeline lineno="2952"><highlight class="preprocessor"><sp/><sp/>J<sp/>=<sp/>__builtin_ctz(X);<sp/>\</highlight></codeline>
<codeline lineno="2953"><highlight class="preprocessor"><sp/><sp/>I<sp/>=<sp/>(bindex_t)J;\</highlight></codeline>
<codeline lineno="2954"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2955"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>(__INTEL_COMPILER)</highlight></codeline>
<codeline lineno="2957"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_bit2idx(X,<sp/>I)\</highlight></codeline>
<codeline lineno="2958"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2959"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>J;\</highlight></codeline>
<codeline lineno="2960"><highlight class="preprocessor"><sp/><sp/>J<sp/>=<sp/>_bit_scan_forward<sp/>(X);<sp/>\</highlight></codeline>
<codeline lineno="2961"><highlight class="preprocessor"><sp/><sp/>I<sp/>=<sp/>(bindex_t)J;\</highlight></codeline>
<codeline lineno="2962"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2963"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER&gt;=1300</highlight></codeline>
<codeline lineno="2965"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_bit2idx(X,<sp/>I)\</highlight></codeline>
<codeline lineno="2966"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2967"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>J;\</highlight></codeline>
<codeline lineno="2968"><highlight class="preprocessor"><sp/><sp/>_BitScanForward((DWORD<sp/>*)<sp/>&amp;J,<sp/>X);\</highlight></codeline>
<codeline lineno="2969"><highlight class="preprocessor"><sp/><sp/>I<sp/>=<sp/>(bindex_t)J;\</highlight></codeline>
<codeline lineno="2970"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2971"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>USE_BUILTIN_FFS</highlight></codeline>
<codeline lineno="2973"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_bit2idx(X,<sp/>I)<sp/>I<sp/>=<sp/>ffs(X)-1</highlight></codeline>
<codeline lineno="2974"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="2976"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>compute_bit2idx(X,<sp/>I)\</highlight></codeline>
<codeline lineno="2977"><highlight class="preprocessor">{\</highlight></codeline>
<codeline lineno="2978"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>Y<sp/>=<sp/>X<sp/>-<sp/>1;\</highlight></codeline>
<codeline lineno="2979"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>K<sp/>=<sp/>Y<sp/>&gt;&gt;<sp/>(16-4)<sp/>&amp;<sp/>16;\</highlight></codeline>
<codeline lineno="2980"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>int<sp/>N<sp/>=<sp/>K;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Y<sp/>&gt;&gt;=<sp/>K;\</highlight></codeline>
<codeline lineno="2981"><highlight class="preprocessor"><sp/><sp/>N<sp/>+=<sp/>K<sp/>=<sp/>Y<sp/>&gt;&gt;<sp/>(8-3)<sp/>&amp;<sp/><sp/>8;<sp/><sp/>Y<sp/>&gt;&gt;=<sp/>K;\</highlight></codeline>
<codeline lineno="2982"><highlight class="preprocessor"><sp/><sp/>N<sp/>+=<sp/>K<sp/>=<sp/>Y<sp/>&gt;&gt;<sp/>(4-2)<sp/>&amp;<sp/><sp/>4;<sp/><sp/>Y<sp/>&gt;&gt;=<sp/>K;\</highlight></codeline>
<codeline lineno="2983"><highlight class="preprocessor"><sp/><sp/>N<sp/>+=<sp/>K<sp/>=<sp/>Y<sp/>&gt;&gt;<sp/>(2-1)<sp/>&amp;<sp/><sp/>2;<sp/><sp/>Y<sp/>&gt;&gt;=<sp/>K;\</highlight></codeline>
<codeline lineno="2984"><highlight class="preprocessor"><sp/><sp/>N<sp/>+=<sp/>K<sp/>=<sp/>Y<sp/>&gt;&gt;<sp/>(1-0)<sp/>&amp;<sp/><sp/>1;<sp/><sp/>Y<sp/>&gt;&gt;=<sp/>K;\</highlight></codeline>
<codeline lineno="2985"><highlight class="preprocessor"><sp/><sp/>I<sp/>=<sp/>(bindex_t)(N<sp/>+<sp/>Y);\</highlight></codeline>
<codeline lineno="2986"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="2987"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>GNUC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="2988"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------<sp/>Runtime<sp/>Check<sp/>Support<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2993"><highlight class="comment"><sp/><sp/>For<sp/>security,<sp/>the<sp/>main<sp/>invariant<sp/>is<sp/>that<sp/>malloc/free/etc<sp/>never</highlight></codeline>
<codeline lineno="2994"><highlight class="comment"><sp/><sp/>writes<sp/>to<sp/>a<sp/>static<sp/>address<sp/>other<sp/>than<sp/>malloc_state,<sp/>unless<sp/>static</highlight></codeline>
<codeline lineno="2995"><highlight class="comment"><sp/><sp/>malloc_state<sp/>itself<sp/>has<sp/>been<sp/>corrupted,<sp/>which<sp/>cannot<sp/>occur<sp/>via</highlight></codeline>
<codeline lineno="2996"><highlight class="comment"><sp/><sp/>malloc<sp/>(because<sp/>of<sp/>these<sp/>checks).<sp/>In<sp/>essence<sp/>this<sp/>means<sp/>that<sp/>we</highlight></codeline>
<codeline lineno="2997"><highlight class="comment"><sp/><sp/>believe<sp/>all<sp/>pointers,<sp/>sizes,<sp/>maps<sp/>etc<sp/>held<sp/>in<sp/>malloc_state,<sp/>but</highlight></codeline>
<codeline lineno="2998"><highlight class="comment"><sp/><sp/>check<sp/>all<sp/>of<sp/>those<sp/>linked<sp/>or<sp/>offsetted<sp/>from<sp/>other<sp/>embedded<sp/>data</highlight></codeline>
<codeline lineno="2999"><highlight class="comment"><sp/><sp/>structures.<sp/><sp/>These<sp/>checks<sp/>are<sp/>interspersed<sp/>with<sp/>main<sp/>code<sp/>in<sp/>a<sp/>way</highlight></codeline>
<codeline lineno="3000"><highlight class="comment"><sp/><sp/>that<sp/>tends<sp/>to<sp/>minimize<sp/>their<sp/>run-time<sp/>cost.</highlight></codeline>
<codeline lineno="3001"><highlight class="comment"></highlight></codeline>
<codeline lineno="3002"><highlight class="comment"><sp/><sp/>When<sp/>FOOTERS<sp/>is<sp/>defined,<sp/>in<sp/>addition<sp/>to<sp/>range<sp/>checking,<sp/>we<sp/>also</highlight></codeline>
<codeline lineno="3003"><highlight class="comment"><sp/><sp/>verify<sp/>footer<sp/>fields<sp/>of<sp/>inuse<sp/>chunks,<sp/>which<sp/>can<sp/>be<sp/>used<sp/>guarantee</highlight></codeline>
<codeline lineno="3004"><highlight class="comment"><sp/><sp/>that<sp/>the<sp/>mstate<sp/>controlling<sp/>malloc/free<sp/>is<sp/>intact.<sp/><sp/>This<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="3005"><highlight class="comment"><sp/><sp/>streamlined<sp/>version<sp/>of<sp/>the<sp/>approach<sp/>described<sp/>by<sp/>William<sp/>Robertson</highlight></codeline>
<codeline lineno="3006"><highlight class="comment"><sp/><sp/>et<sp/>al<sp/>in<sp/>&quot;Run-time<sp/>Detection<sp/>of<sp/>Heap-based<sp/>Overflows&quot;<sp/>LISA&apos;03</highlight></codeline>
<codeline lineno="3007"><highlight class="comment"><sp/><sp/>http://www.usenix.org/events/lisa03/tech/robertson.html<sp/>The<sp/>footer</highlight></codeline>
<codeline lineno="3008"><highlight class="comment"><sp/><sp/>of<sp/>an<sp/>inuse<sp/>chunk<sp/>holds<sp/>the<sp/>xor<sp/>of<sp/>its<sp/>mstate<sp/>and<sp/>a<sp/>random<sp/>seed,</highlight></codeline>
<codeline lineno="3009"><highlight class="comment"><sp/><sp/>that<sp/>is<sp/>checked<sp/>upon<sp/>calls<sp/>to<sp/>free()<sp/>and<sp/>realloc().<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="3010"><highlight class="comment"><sp/><sp/>(probabalistically)<sp/>unguessable<sp/>from<sp/>outside<sp/>the<sp/>program,<sp/>but<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="3011"><highlight class="comment"><sp/><sp/>computed<sp/>by<sp/>any<sp/>code<sp/>successfully<sp/>malloc&apos;ing<sp/>any<sp/>chunk,<sp/>so<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="3012"><highlight class="comment"><sp/><sp/>itself<sp/>provide<sp/>protection<sp/>against<sp/>code<sp/>that<sp/>has<sp/>already<sp/>broken</highlight></codeline>
<codeline lineno="3013"><highlight class="comment"><sp/><sp/>security<sp/>through<sp/>some<sp/>other<sp/>means.<sp/><sp/>Unlike<sp/>Robertson<sp/>et<sp/>al,<sp/>we</highlight></codeline>
<codeline lineno="3014"><highlight class="comment"><sp/><sp/>always<sp/>dynamically<sp/>check<sp/>addresses<sp/>of<sp/>all<sp/>offset<sp/>chunks<sp/>(previous,</highlight></codeline>
<codeline lineno="3015"><highlight class="comment"><sp/><sp/>next,<sp/>etc).<sp/>This<sp/>turns<sp/>out<sp/>to<sp/>be<sp/>cheaper<sp/>than<sp/>relying<sp/>on<sp/>hashes.</highlight></codeline>
<codeline lineno="3016"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!INSECURE</highlight></codeline>
<codeline lineno="3019"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>address<sp/>a<sp/>is<sp/>at<sp/>least<sp/>as<sp/>high<sp/>as<sp/>any<sp/>from<sp/>MORECORE<sp/>or<sp/>MMAP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ok_address(M,<sp/>a)<sp/>((char*)(a)<sp/>&gt;=<sp/>(M)-&gt;least_addr)</highlight></codeline>
<codeline lineno="3021"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>address<sp/>of<sp/>next<sp/>chunk<sp/>n<sp/>is<sp/>higher<sp/>than<sp/>base<sp/>chunk<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ok_next(p,<sp/>n)<sp/><sp/><sp/><sp/>((char*)(p)<sp/>&lt;<sp/>(char*)(n))</highlight></codeline>
<codeline lineno="3023"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>p<sp/>has<sp/>inuse<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ok_inuse(p)<sp/><sp/><sp/><sp/><sp/>is_inuse(p)</highlight></codeline>
<codeline lineno="3025"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>p<sp/>has<sp/>its<sp/>pinuse<sp/>bit<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ok_pinuse(p)<sp/><sp/><sp/><sp/><sp/>pinuse(p)</highlight></codeline>
<codeline lineno="3027"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!INSECURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3029"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ok_address(M,<sp/>a)<sp/>(1)</highlight></codeline>
<codeline lineno="3030"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ok_next(b,<sp/>n)<sp/><sp/><sp/><sp/>(1)</highlight></codeline>
<codeline lineno="3031"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ok_inuse(p)<sp/><sp/><sp/><sp/><sp/><sp/>(1)</highlight></codeline>
<codeline lineno="3032"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ok_pinuse(p)<sp/><sp/><sp/><sp/><sp/>(1)</highlight></codeline>
<codeline lineno="3033"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!INSECURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3034"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FOOTERS<sp/>&amp;&amp;<sp/>!INSECURE)</highlight></codeline>
<codeline lineno="3036"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>(alleged)<sp/>mstate<sp/>m<sp/>has<sp/>expected<sp/>magic<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ok_magic(M)<sp/><sp/><sp/><sp/><sp/><sp/>((M)-&gt;magic<sp/>==<sp/>mparams.magic)</highlight></codeline>
<codeline lineno="3038"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>(FOOTERS<sp/>&amp;&amp;<sp/>!INSECURE)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3039"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ok_magic(M)<sp/><sp/><sp/><sp/><sp/><sp/>(1)</highlight></codeline>
<codeline lineno="3040"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(FOOTERS<sp/>&amp;&amp;<sp/>!INSECURE)<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3041"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>In<sp/>gcc,<sp/>use<sp/>__builtin_expect<sp/>to<sp/>minimize<sp/>impact<sp/>of<sp/>checks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!INSECURE</highlight></codeline>
<codeline lineno="3044"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>__GNUC__<sp/>&gt;=<sp/>3</highlight></codeline>
<codeline lineno="3045"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RTCHECK(e)<sp/><sp/>__builtin_expect(e,<sp/>1)</highlight></codeline>
<codeline lineno="3046"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>GNUC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3047"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RTCHECK(e)<sp/><sp/>(e)</highlight></codeline>
<codeline lineno="3048"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>GNUC<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3049"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>!INSECURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3050"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>RTCHECK(e)<sp/><sp/>(1)</highlight></codeline>
<codeline lineno="3051"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!INSECURE<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3052"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>macros<sp/>to<sp/>set<sp/>up<sp/>inuse<sp/>chunks<sp/>with<sp/>or<sp/>without<sp/>footers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FOOTERS</highlight></codeline>
<codeline lineno="3056"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mark_inuse_foot(M,p,s)</highlight></codeline>
<codeline lineno="3058"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macros<sp/>for<sp/>setting<sp/>head/foot<sp/>of<sp/>non-mmapped<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>cinuse<sp/>bit<sp/>and<sp/>pinuse<sp/>bit<sp/>of<sp/>next<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_inuse(M,p,s)\</highlight></codeline>
<codeline lineno="3063"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(((p)-&gt;head<sp/>&amp;<sp/>PINUSE_BIT)|s|CINUSE_BIT),\</highlight></codeline>
<codeline lineno="3064"><highlight class="preprocessor"><sp/><sp/>((mchunkptr)(((char*)(p))<sp/>+<sp/>(s)))-&gt;head<sp/>|=<sp/>PINUSE_BIT)</highlight></codeline>
<codeline lineno="3065"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>cinuse<sp/>and<sp/>pinuse<sp/>of<sp/>this<sp/>chunk<sp/>and<sp/>pinuse<sp/>of<sp/>next<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_inuse_and_pinuse(M,p,s)\</highlight></codeline>
<codeline lineno="3068"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(s|PINUSE_BIT|CINUSE_BIT),\</highlight></codeline>
<codeline lineno="3069"><highlight class="preprocessor"><sp/><sp/>((mchunkptr)(((char*)(p))<sp/>+<sp/>(s)))-&gt;head<sp/>|=<sp/>PINUSE_BIT)</highlight></codeline>
<codeline lineno="3070"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>size,<sp/>cinuse<sp/>and<sp/>pinuse<sp/>bit<sp/>of<sp/>this<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_size_and_pinuse_of_inuse_chunk(M,<sp/>p,<sp/>s)\</highlight></codeline>
<codeline lineno="3073"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(s|PINUSE_BIT|CINUSE_BIT))</highlight></codeline>
<codeline lineno="3074"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3076"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>foot<sp/>of<sp/>inuse<sp/>chunk<sp/>to<sp/>be<sp/>xor<sp/>of<sp/>mstate<sp/>and<sp/>seed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mark_inuse_foot(M,p,s)\</highlight></codeline>
<codeline lineno="3079"><highlight class="preprocessor"><sp/><sp/>(((mchunkptr)((char*)(p)<sp/>+<sp/>(s)))-&gt;prev_foot<sp/>=<sp/>((size_t)(M)<sp/>^<sp/>mparams.magic))</highlight></codeline>
<codeline lineno="3080"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>get_mstate_for(p)\</highlight></codeline>
<codeline lineno="3082"><highlight class="preprocessor"><sp/><sp/>((mstate)(((mchunkptr)((char*)(p)<sp/>+\</highlight></codeline>
<codeline lineno="3083"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(chunksize(p))))-&gt;prev_foot<sp/>^<sp/>mparams.magic))</highlight></codeline>
<codeline lineno="3084"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_inuse(M,p,s)\</highlight></codeline>
<codeline lineno="3086"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(((p)-&gt;head<sp/>&amp;<sp/>PINUSE_BIT)|s|CINUSE_BIT),\</highlight></codeline>
<codeline lineno="3087"><highlight class="preprocessor"><sp/><sp/>(((mchunkptr)(((char*)(p))<sp/>+<sp/>(s)))-&gt;head<sp/>|=<sp/>PINUSE_BIT),<sp/>\</highlight></codeline>
<codeline lineno="3088"><highlight class="preprocessor"><sp/><sp/>mark_inuse_foot(M,p,s))</highlight></codeline>
<codeline lineno="3089"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_inuse_and_pinuse(M,p,s)\</highlight></codeline>
<codeline lineno="3091"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(s|PINUSE_BIT|CINUSE_BIT),\</highlight></codeline>
<codeline lineno="3092"><highlight class="preprocessor"><sp/><sp/>(((mchunkptr)(((char*)(p))<sp/>+<sp/>(s)))-&gt;head<sp/>|=<sp/>PINUSE_BIT),\</highlight></codeline>
<codeline lineno="3093"><highlight class="preprocessor"><sp/>mark_inuse_foot(M,p,s))</highlight></codeline>
<codeline lineno="3094"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>set_size_and_pinuse_of_inuse_chunk(M,<sp/>p,<sp/>s)\</highlight></codeline>
<codeline lineno="3096"><highlight class="preprocessor"><sp/><sp/>((p)-&gt;head<sp/>=<sp/>(s|PINUSE_BIT|CINUSE_BIT),\</highlight></codeline>
<codeline lineno="3097"><highlight class="preprocessor"><sp/><sp/>mark_inuse_foot(M,<sp/>p,<sp/>s))</highlight></codeline>
<codeline lineno="3098"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3100"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>setting<sp/>mparams<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>LOCK_AT_FORK</highlight></codeline>
<codeline lineno="3104"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pre_fork(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>ACQUIRE_LOCK(&amp;(gm)-&gt;mutex);<sp/>}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>post_fork_parent(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/>RELEASE_LOCK(&amp;(gm)-&gt;mutex);<sp/>}</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>post_fork_child(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/><sp/>{<sp/>INITIAL_LOCK(&amp;(gm)-&gt;mutex);<sp/>}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>LOCK_AT_FORK<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3108"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>mparams<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_mparams(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NEED_GLOBAL_LOCK_INIT</highlight></codeline>
<codeline lineno="3112"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(malloc_global_mutex_status<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/>init_malloc_global_mutex();</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3115"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/>ACQUIRE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mparams.magic<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>magic;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>gsize;</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight></codeline>
<codeline lineno="3123"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>psize<sp/>=<sp/>malloc_getpagesize;</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/>gsize<sp/>=<sp/>((DEFAULT_GRANULARITY<sp/>!=<sp/>0)?<sp/>DEFAULT_GRANULARITY<sp/>:<sp/>psize);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3126"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SYSTEM_INFO<sp/>system_info;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetSystemInfo(&amp;system_info);</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>=<sp/>system_info.dwPageSize;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gsize<sp/>=<sp/>((DEFAULT_GRANULARITY<sp/>!=<sp/>0)?</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEFAULT_GRANULARITY<sp/>:<sp/>system_info.dwAllocationGranularity);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3134"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity-check<sp/>configuration:</highlight></codeline>
<codeline lineno="3136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>must<sp/>be<sp/>unsigned<sp/>and<sp/>as<sp/>wide<sp/>as<sp/>pointer<sp/>type.</highlight></codeline>
<codeline lineno="3137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ints<sp/>must<sp/>be<sp/>at<sp/>least<sp/>4<sp/>bytes.</highlight></codeline>
<codeline lineno="3138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment<sp/>must<sp/>be<sp/>at<sp/>least<sp/>8.</highlight></codeline>
<codeline lineno="3139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Alignment,<sp/>min<sp/>chunk<sp/>size,<sp/>and<sp/>page<sp/>size<sp/>must<sp/>all<sp/>be<sp/>powers<sp/>of<sp/>2.</highlight></codeline>
<codeline lineno="3140"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*))<sp/>||</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MAX_SIZE_T<sp/>&lt;<sp/>MIN_CHUNK_SIZE)<sp/><sp/>||</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>&lt;<sp/>4)<sp/><sp/>||</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MALLOC_ALIGNMENT<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)8U)<sp/>||</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((MALLOC_ALIGNMENT<sp/>&amp;<sp/>(MALLOC_ALIGNMENT-SIZE_T_ONE))<sp/>!=<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((MCHUNK_SIZE<sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(MCHUNK_SIZE-SIZE_T_ONE))<sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((gsize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(gsize-SIZE_T_ONE))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>0)<sp/>||</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((psize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(psize-SIZE_T_ONE))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ABORT;</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.granularity<sp/>=<sp/>gsize;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.page_size<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.mmap_threshold<sp/>=<sp/>DEFAULT_MMAP_THRESHOLD;</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.trim_threshold<sp/>=<sp/>DEFAULT_TRIM_THRESHOLD;</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MORECORE_CONTIGUOUS</highlight></codeline>
<codeline lineno="3155"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.default_mflags<sp/>=<sp/>USE_LOCK_BIT|USE_MMAP_BIT;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CONTIGUOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3157"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.default_mflags<sp/>=<sp/>USE_LOCK_BIT|USE_MMAP_BIT|USE_NONCONTIGUOUS_BIT;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MORECORE_CONTIGUOUS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3159"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight></codeline>
<codeline lineno="3161"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>lock<sp/>for<sp/>main<sp/>malloc<sp/>area<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>gm-&gt;mflags<sp/>=<sp/>mparams.default_mflags;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)INITIAL_LOCK(&amp;gm-&gt;mutex);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3165"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>LOCK_AT_FORK</highlight></codeline>
<codeline lineno="3166"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_atfork(&amp;pre_fork,<sp/>&amp;post_fork_parent,<sp/>&amp;post_fork_child);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_DEV_RANDOM</highlight></codeline>
<codeline lineno="3171"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(size_t)];</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>use<sp/>/dev/urandom,<sp/>else<sp/>fall<sp/>back<sp/>on<sp/>using<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fd<sp/>=<sp/>open(</highlight><highlight class="stringliteral">&quot;/dev/urandom&quot;</highlight><highlight class="normal">,<sp/>O_RDONLY))<sp/>&gt;=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read(fd,<sp/>buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf))<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf))<sp/>{</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>magic<sp/>=<sp/>*((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)<sp/>buf);</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>USE_DEV_RANDOM<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3181"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="3182"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>magic<sp/>=<sp/>(size_t)(GetTickCount()<sp/>^<sp/>(size_t)0x55555555U);</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(LACKS_TIME_H)</highlight></codeline>
<codeline lineno="3184"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>magic<sp/>=<sp/>(size_t)&amp;magic<sp/>^<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0x55555555U;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="3186"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>magic<sp/>=<sp/>(size_t)(time(0)<sp/>^<sp/>(size_t)0x55555555U);</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="3188"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>magic<sp/>|=<sp/>(size_t)8U;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>nonzero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>magic<sp/>&amp;=<sp/>~(size_t)7U;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>improve<sp/>chances<sp/>of<sp/>fault<sp/>for<sp/>bad<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Until<sp/>memory<sp/>modes<sp/>commonly<sp/>available,<sp/>use<sp/>volatile-write<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*)(&amp;(mparams.magic)))<sp/>=<sp/>magic;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/>RELEASE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>support<sp/>for<sp/>mallopt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>change_mparam(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/>val<sp/>=<sp/>(value<sp/>==<sp/>-1)?<sp/>MAX_SIZE_T<sp/>:<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)value;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(param_number)<sp/>{</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>M_TRIM_THRESHOLD:</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.trim_threshold<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>M_GRANULARITY:</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>&gt;=<sp/>mparams.page_size<sp/>&amp;&amp;<sp/>((val<sp/>&amp;<sp/>(val-1))<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mparams.granularity<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>M_MMAP_THRESHOLD:</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>mparams.mmap_threshold<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight></codeline>
<codeline lineno="3224"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>-------------------------<sp/>Debugging<sp/>Support<sp/>---------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>properties<sp/>of<sp/>any<sp/>chunk,<sp/>whether<sp/>free,<sp/>inuse,<sp/>mmapped<sp/>etc<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_any_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/>assert((is_aligned(chunk2mem(p)))<sp/>||<sp/>(p-&gt;head<sp/>==<sp/>FENCEPOST_HEAD));</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/>assert(ok_address(m,<sp/>p));</highlight></codeline>
<codeline lineno="3230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>properties<sp/>of<sp/>top<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_top_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>segment_holding(m,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p);</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>sz<sp/>=<sp/>p-&gt;head<sp/>&amp;<sp/>~INUSE_BITS;<sp/></highlight><highlight class="comment">/*<sp/>third-lowest<sp/>bit<sp/>can<sp/>be<sp/>set!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/>assert(sp<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>assert((is_aligned(chunk2mem(p)))<sp/>||<sp/>(p-&gt;head<sp/>==<sp/>FENCEPOST_HEAD));</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/>assert(ok_address(m,<sp/>p));</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/>assert(sz<sp/>==<sp/>m-&gt;topsize);</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>assert(sz<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/>assert(sz<sp/>==<sp/>((sp-&gt;base<sp/>+<sp/>sp-&gt;size)<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p)<sp/>-<sp/>TOP_FOOT_SIZE);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/>assert(pinuse(p));</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>assert(!pinuse(chunk_plus_offset(p,<sp/>sz)));</highlight></codeline>
<codeline lineno="3244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"></highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>properties<sp/>of<sp/>(inuse)<sp/>mmapped<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_mmapped_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>sz<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>(sz<sp/>+<sp/>(p-&gt;prev_foot)<sp/>+<sp/>MMAP_FOOT_PAD);</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>assert(is_mmapped(p));</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/>assert(use_mmap(m));</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>assert((is_aligned(chunk2mem(p)))<sp/>||<sp/>(p-&gt;head<sp/>==<sp/>FENCEPOST_HEAD));</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>assert(ok_address(m,<sp/>p));</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/>assert(!is_small(sz));</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/>assert((len<sp/>&amp;<sp/>(mparams.page_size-SIZE_T_ONE))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>assert(chunk_plus_offset(p,<sp/>sz)-&gt;head<sp/>==<sp/>FENCEPOST_HEAD);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/>assert(chunk_plus_offset(p,<sp/>sz+SIZE_T_SIZE)-&gt;head<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"></highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>properties<sp/>of<sp/>inuse<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_inuse_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/>do_check_any_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/>assert(is_inuse(p));</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>assert(next_pinuse(p));</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>not<sp/>pinuse<sp/>and<sp/>not<sp/>mmapped,<sp/>previous<sp/>chunk<sp/>has<sp/>OK<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>assert(is_mmapped(p)<sp/>||<sp/>pinuse(p)<sp/>||<sp/>next_chunk(prev_chunk(p))<sp/>==<sp/>p);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped(p))</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_mmapped_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="3269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>properties<sp/>of<sp/>free<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_free_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>chunk_plus_offset(p,<sp/>sz);</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/>do_check_any_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/>assert(!is_inuse(p));</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/>assert(!next_pinuse(p));</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/>assert<sp/>(!is_mmapped(p));</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>m-&gt;dv<sp/>&amp;&amp;<sp/>p<sp/>!=<sp/>m-&gt;top)<sp/>{</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;=<sp/>MIN_CHUNK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert((sz<sp/>&amp;<sp/>CHUNK_ALIGN_MASK)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(is_aligned(chunk2mem(p)));</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(next-&gt;prev_foot<sp/>==<sp/>sz);</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(pinuse(p));</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(next<sp/>==<sp/>m-&gt;top<sp/>||<sp/>is_inuse(next));</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(p-&gt;fd-&gt;bk<sp/>==<sp/>p);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(p-&gt;bk-&gt;fd<sp/>==<sp/>p);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>markers<sp/>are<sp/>always<sp/>of<sp/>size<sp/>SIZE_T_SIZE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(sz<sp/>==<sp/>SIZE_T_SIZE);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>properties<sp/>of<sp/>malloced<sp/>chunks<sp/>at<sp/>the<sp/>point<sp/>they<sp/>are<sp/>malloced<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_malloced_chunk(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>p-&gt;head<sp/>&amp;<sp/>~INUSE_BITS;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_inuse_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((sz<sp/>&amp;<sp/>CHUNK_ALIGN_MASK)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sz<sp/>&gt;=<sp/>MIN_CHUNK_SIZE);</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(sz<sp/>&gt;=<sp/>s);</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unless<sp/>mmapped,<sp/>size<sp/>is<sp/>less<sp/>than<sp/>MIN_CHUNK_SIZE<sp/>more<sp/>than<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(is_mmapped(p)<sp/>||<sp/>sz<sp/>&lt;<sp/>(s<sp/>+<sp/>MIN_CHUNK_SIZE));</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>a<sp/>tree<sp/>and<sp/>its<sp/>subtrees.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_tree(mstate<sp/>m,<sp/>tchunkptr<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/>tchunkptr<sp/>head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/>tchunkptr<sp/>u<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/>bindex_t<sp/>tindex<sp/>=<sp/>t-&gt;index;</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>chunksize(t);</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/>bindex_t<sp/>idx;</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/>compute_tree_index(tsize,<sp/>idx);</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/>assert(tindex<sp/>==<sp/>idx);</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/>assert(tsize<sp/>&gt;=<sp/>MIN_LARGE_SIZE);</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/>assert(tsize<sp/>&gt;=<sp/>minsize_for_tree_index(idx));</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/>assert((idx<sp/>==<sp/>NTREEBINS-1)<sp/>||<sp/>(tsize<sp/>&lt;<sp/>minsize_for_tree_index((idx+1))));</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>traverse<sp/>through<sp/>chain<sp/>of<sp/>same-sized<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_any_chunk(m,<sp/>((mchunkptr)u));</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(u-&gt;index<sp/>==<sp/>tindex);</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(chunksize(u)<sp/>==<sp/>tsize);</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!is_inuse(u));</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!next_pinuse(u));</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(u-&gt;fd-&gt;bk<sp/>==<sp/>u);</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(u-&gt;bk-&gt;fd<sp/>==<sp/>u);</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u-&gt;parent<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;child[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;child[1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(head<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">/*<sp/>only<sp/>one<sp/>node<sp/>on<sp/>chain<sp/>has<sp/>parent<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;parent<sp/>!=<sp/>u);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(u-&gt;parent-&gt;child[0]<sp/>==<sp/>u<sp/>||</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u-&gt;parent-&gt;child[1]<sp/>==<sp/>u<sp/>||</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((tbinptr*)(u-&gt;parent))<sp/>==<sp/>u);</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u-&gt;child[0]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;child[0]-&gt;parent<sp/>==<sp/>u);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;child[0]<sp/>!=<sp/>u);</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_tree(m,<sp/>u-&gt;child[0]);</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u-&gt;child[1]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;child[1]-&gt;parent<sp/>==<sp/>u);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(u-&gt;child[1]<sp/>!=<sp/>u);</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_tree(m,<sp/>u-&gt;child[1]);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u-&gt;child[0]<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>u-&gt;child[1]<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(chunksize(u-&gt;child[0])<sp/>&lt;<sp/>chunksize(u-&gt;child[1]));</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>u<sp/>=<sp/>u-&gt;fd;</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(u<sp/>!=<sp/>t);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/>assert(head<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Check<sp/>all<sp/>the<sp/>chunks<sp/>in<sp/>a<sp/>treebin.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_treebin(mstate<sp/>m,<sp/>bindex_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>tbinptr*<sp/>tb<sp/>=<sp/>treebin_at(m,<sp/>i);</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/>tchunkptr<sp/>t<sp/>=<sp/>*tb;</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>(m-&gt;treemap<sp/>&amp;<sp/>(1U<sp/>&lt;&lt;<sp/>i))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(empty);</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!empty)</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_tree(m,<sp/>t);</highlight></codeline>
<codeline lineno="3368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>Check<sp/>all<sp/>the<sp/>chunks<sp/>in<sp/>a<sp/>smallbin.<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_smallbin(mstate<sp/>m,<sp/>bindex_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/>sbinptr<sp/>b<sp/>=<sp/>smallbin_at(m,<sp/>i);</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>b-&gt;bk;</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>empty<sp/>=<sp/>(m-&gt;smallmap<sp/>&amp;<sp/>(1U<sp/>&lt;&lt;<sp/>i))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>b)</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(empty);</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!empty)<sp/>{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>p<sp/>!=<sp/>b;<sp/>p<sp/>=<sp/>p-&gt;bk)<sp/>{</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>q;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>each<sp/>chunk<sp/>claims<sp/>to<sp/>be<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>do_check_free_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chunk<sp/>belongs<sp/>in<sp/>bin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(small_index(size)<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(p-&gt;bk<sp/>==<sp/>b<sp/>||<sp/>chunksize(p-&gt;bk)<sp/>==<sp/>chunksize(p));</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chunk<sp/>is<sp/>followed<sp/>by<sp/>an<sp/>inuse<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>next_chunk(p);</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q-&gt;head<sp/>!=<sp/>FENCEPOST_HEAD)</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_inuse_chunk(m,<sp/>q);</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Find<sp/>x<sp/>in<sp/>a<sp/>bin.<sp/>Used<sp/>in<sp/>other<sp/>check<sp/>functions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin_find(mstate<sp/>m,<sp/>mchunkptr<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>chunksize(x);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small(size))<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>bindex_t<sp/>sidx<sp/>=<sp/>small_index(size);</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>sbinptr<sp/>b<sp/>=<sp/>smallbin_at(m,<sp/>sidx);</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallmap_is_marked(m,<sp/>sidx))<sp/>{</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>x)</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((p<sp/>=<sp/>p-&gt;fd)<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/>bindex_t<sp/>tidx;</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>compute_tree_index(size,<sp/>tidx);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(treemap_is_marked(m,<sp/>tidx))<sp/>{</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>t<sp/>=<sp/>*treebin_at(m,<sp/>tidx);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizebits<sp/>=<sp/>size<sp/>&lt;&lt;<sp/>leftshift_for_tree_index(tidx);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>chunksize(t)<sp/>!=<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t-&gt;child[(sizebits<sp/>&gt;&gt;<sp/>(SIZE_T_BITSIZE-SIZE_T_ONE))<sp/>&amp;<sp/>1];</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sizebits<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>u<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(u<sp/>==<sp/>(tchunkptr)x)</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((u<sp/>=<sp/>u-&gt;fd)<sp/>!=<sp/>t);</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"></highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traverse<sp/>each<sp/>chunk<sp/>and<sp/>check<sp/>it;<sp/>return<sp/>total<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>traverse_and_check(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_initialized(m))<sp/>{</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/>msegmentptr<sp/>s<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>m-&gt;topsize<sp/>+<sp/>TOP_FOOT_SIZE;</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>q<sp/>=<sp/>align_as_chunk(s-&gt;base);</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>lastq<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(pinuse(q));</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(segment_holds(s,<sp/>q)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>!=<sp/>m-&gt;top<sp/>&amp;&amp;<sp/>q-&gt;head<sp/>!=<sp/>FENCEPOST_HEAD)<sp/>{</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>chunksize(q);</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_inuse(q))<sp/>{</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!bin_find(m,<sp/>q));</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_inuse_chunk(m,<sp/>q);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(q<sp/>==<sp/>m-&gt;dv<sp/>||<sp/>bin_find(m,<sp/>q));</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(lastq<sp/>==<sp/>0<sp/>||<sp/>is_inuse(lastq));<sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>2<sp/>consecutive<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_check_free_chunk(m,<sp/>q);</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastq<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>next_chunk(q);</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Check<sp/>all<sp/>properties<sp/>of<sp/>malloc_state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>do_check_malloc_state(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>bindex_t<sp/>i;</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>bins<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NSMALLBINS;<sp/>++i)</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_smallbin(m,<sp/>i);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NTREEBINS;<sp/>++i)</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_treebin(m,<sp/>i);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"></highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;dvsize<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>check<sp/>dv<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_any_chunk(m,<sp/>m-&gt;dv);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m-&gt;dvsize<sp/>==<sp/>chunksize(m-&gt;dv));</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m-&gt;dvsize<sp/>&gt;=<sp/>MIN_CHUNK_SIZE);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bin_find(m,<sp/>m-&gt;dv)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;top<sp/>!=<sp/>0)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>top<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/>do_check_top_chunk(m,<sp/>m-&gt;top);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*assert(m-&gt;topsize<sp/>==<sp/>chunksize(m-&gt;top));<sp/>redundant<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(m-&gt;topsize<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bin_find(m,<sp/>m-&gt;top)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/>total<sp/>=<sp/>traverse_and_check(m);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>assert(total<sp/>&lt;=<sp/>m-&gt;footprint);</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/>assert(m-&gt;footprint<sp/>&lt;=<sp/>m-&gt;max_footprint);</highlight></codeline>
<codeline lineno="3489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3491"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------<sp/>statistics<sp/>------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight></codeline>
<codeline lineno="3495"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>internal_mallinfo(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>nm<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/>check_malloc_state(m);</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_initialized(m))<sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nfree<sp/>=<sp/>SIZE_T_ONE;<sp/></highlight><highlight class="comment">/*<sp/>top<sp/>always<sp/>free<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mfree<sp/>=<sp/>m-&gt;topsize<sp/>+<sp/>TOP_FOOT_SIZE;</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>mfree;</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msegmentptr<sp/>s<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>q<sp/>=<sp/>align_as_chunk(s-&gt;base);</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(segment_holds(s,<sp/>q)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>!=<sp/>m-&gt;top<sp/>&amp;&amp;<sp/>q-&gt;head<sp/>!=<sp/>FENCEPOST_HEAD)<sp/>{</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>chunksize(q);</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>sz;</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_inuse(q))<sp/>{</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mfree<sp/>+=<sp/>sz;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nfree;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>next_chunk(q);</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.arena<sp/><sp/><sp/><sp/>=<sp/>sum;</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.ordblks<sp/><sp/>=<sp/>nfree;</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.hblkhd<sp/><sp/><sp/>=<sp/>m-&gt;footprint<sp/>-<sp/>sum;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.usmblks<sp/><sp/>=<sp/>m-&gt;max_footprint;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.uordblks<sp/>=<sp/>m-&gt;footprint<sp/>-<sp/>mfree;</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.fordblks<sp/>=<sp/>mfree;</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nm.keepcost<sp/>=<sp/>m-&gt;topsize;</highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nm;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3534"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLOC_STATS</highlight></codeline>
<codeline lineno="3536"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>internal_malloc_stats(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxfp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/>check_malloc_state(m);</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_initialized(m))<sp/>{</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msegmentptr<sp/>s<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>maxfp<sp/>=<sp/>m-&gt;max_footprint;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>m-&gt;footprint;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/>fp<sp/>-<sp/>(m-&gt;topsize<sp/>+<sp/>TOP_FOOT_SIZE);</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>q<sp/>=<sp/>align_as_chunk(s-&gt;base);</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(segment_holds(s,<sp/>q)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>!=<sp/>m-&gt;top<sp/>&amp;&amp;<sp/>q-&gt;head<sp/>!=<sp/>FENCEPOST_HEAD)<sp/>{</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_inuse(q))</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>-=<sp/>chunksize(q);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>next_chunk(q);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>s-&gt;next;</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(m);<sp/></highlight><highlight class="comment">/*<sp/>drop<sp/>lock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;max<sp/>system<sp/>bytes<sp/>=<sp/>%10lu\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(maxfp));</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;system<sp/>bytes<sp/><sp/><sp/><sp/><sp/>=<sp/>%10lu\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(fp));</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;in<sp/>use<sp/>bytes<sp/><sp/><sp/><sp/><sp/>=<sp/>%10lu\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)(used));</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLOC_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3567"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------<sp/>Operations<sp/>on<sp/>smallbins<sp/>-----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3571"><highlight class="comment"><sp/><sp/>Various<sp/>forms<sp/>of<sp/>linking<sp/>and<sp/>unlinking<sp/>are<sp/>defined<sp/>as<sp/>macros.<sp/><sp/>Even</highlight></codeline>
<codeline lineno="3572"><highlight class="comment"><sp/><sp/>the<sp/>ones<sp/>for<sp/>trees,<sp/>which<sp/>are<sp/>very<sp/>long<sp/>but<sp/>have<sp/>very<sp/>short<sp/>typical</highlight></codeline>
<codeline lineno="3573"><highlight class="comment"><sp/><sp/>paths.<sp/><sp/>This<sp/>is<sp/>ugly<sp/>but<sp/>reduces<sp/>reliance<sp/>on<sp/>inlining<sp/>support<sp/>of</highlight></codeline>
<codeline lineno="3574"><highlight class="comment"><sp/><sp/>compilers.</highlight></codeline>
<codeline lineno="3575"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Link<sp/>a<sp/>free<sp/>chunk<sp/>into<sp/>a<sp/>smallbin<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>insert_small_chunk(M,<sp/>P,<sp/>S)<sp/>{\</highlight></codeline>
<codeline lineno="3579"><highlight class="preprocessor"><sp/><sp/>bindex_t<sp/>I<sp/><sp/>=<sp/>small_index(S);\</highlight></codeline>
<codeline lineno="3580"><highlight class="preprocessor"><sp/><sp/>mchunkptr<sp/>B<sp/>=<sp/>smallbin_at(M,<sp/>I);\</highlight></codeline>
<codeline lineno="3581"><highlight class="preprocessor"><sp/><sp/>mchunkptr<sp/>F<sp/>=<sp/>B;\</highlight></codeline>
<codeline lineno="3582"><highlight class="preprocessor"><sp/><sp/>assert(S<sp/>&gt;=<sp/>MIN_CHUNK_SIZE);\</highlight></codeline>
<codeline lineno="3583"><highlight class="preprocessor"><sp/><sp/>if<sp/>(!smallmap_is_marked(M,<sp/>I))\</highlight></codeline>
<codeline lineno="3584"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>mark_smallmap(M,<sp/>I);\</highlight></codeline>
<codeline lineno="3585"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>B-&gt;fd)))\</highlight></codeline>
<codeline lineno="3586"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>F<sp/>=<sp/>B-&gt;fd;\</highlight></codeline>
<codeline lineno="3587"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3588"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3589"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3590"><highlight class="preprocessor"><sp/><sp/>B-&gt;fd<sp/>=<sp/>P;\</highlight></codeline>
<codeline lineno="3591"><highlight class="preprocessor"><sp/><sp/>F-&gt;bk<sp/>=<sp/>P;\</highlight></codeline>
<codeline lineno="3592"><highlight class="preprocessor"><sp/><sp/>P-&gt;fd<sp/>=<sp/>F;\</highlight></codeline>
<codeline lineno="3593"><highlight class="preprocessor"><sp/><sp/>P-&gt;bk<sp/>=<sp/>B;\</highlight></codeline>
<codeline lineno="3594"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="3595"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unlink<sp/>a<sp/>chunk<sp/>from<sp/>a<sp/>smallbin<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>unlink_small_chunk(M,<sp/>P,<sp/>S)<sp/>{\</highlight></codeline>
<codeline lineno="3598"><highlight class="preprocessor"><sp/><sp/>mchunkptr<sp/>F<sp/>=<sp/>P-&gt;fd;\</highlight></codeline>
<codeline lineno="3599"><highlight class="preprocessor"><sp/><sp/>mchunkptr<sp/>B<sp/>=<sp/>P-&gt;bk;\</highlight></codeline>
<codeline lineno="3600"><highlight class="preprocessor"><sp/><sp/>bindex_t<sp/>I<sp/>=<sp/>small_index(S);\</highlight></codeline>
<codeline lineno="3601"><highlight class="preprocessor"><sp/><sp/>assert(P<sp/>!=<sp/>B);\</highlight></codeline>
<codeline lineno="3602"><highlight class="preprocessor"><sp/><sp/>assert(P<sp/>!=<sp/>F);\</highlight></codeline>
<codeline lineno="3603"><highlight class="preprocessor"><sp/><sp/>assert(chunksize(P)<sp/>==<sp/>small_index2size(I));\</highlight></codeline>
<codeline lineno="3604"><highlight class="preprocessor"><sp/><sp/>if<sp/>(RTCHECK(F<sp/>==<sp/>smallbin_at(M,I)<sp/>||<sp/>(ok_address(M,<sp/>F)<sp/>&amp;&amp;<sp/>F-&gt;bk<sp/>==<sp/>P)))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(B<sp/>==<sp/>F)<sp/>{\</highlight></codeline>
<codeline lineno="3606"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>clear_smallmap(M,<sp/>I);\</highlight></codeline>
<codeline lineno="3607"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3608"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(RTCHECK(B<sp/>==<sp/>smallbin_at(M,I)<sp/>||\</highlight></codeline>
<codeline lineno="3609"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ok_address(M,<sp/>B)<sp/>&amp;&amp;<sp/>B-&gt;fd<sp/>==<sp/>P)))<sp/>{\</highlight></codeline>
<codeline lineno="3610"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>F-&gt;bk<sp/>=<sp/>B;\</highlight></codeline>
<codeline lineno="3611"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>B-&gt;fd<sp/>=<sp/>F;\</highlight></codeline>
<codeline lineno="3612"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3613"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3614"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3615"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3616"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3617"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3618"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3619"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3620"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="3621"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unlink<sp/>the<sp/>first<sp/>chunk<sp/>from<sp/>a<sp/>smallbin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>unlink_first_small_chunk(M,<sp/>B,<sp/>P,<sp/>I)<sp/>{\</highlight></codeline>
<codeline lineno="3624"><highlight class="preprocessor"><sp/><sp/>mchunkptr<sp/>F<sp/>=<sp/>P-&gt;fd;\</highlight></codeline>
<codeline lineno="3625"><highlight class="preprocessor"><sp/><sp/>assert(P<sp/>!=<sp/>B);\</highlight></codeline>
<codeline lineno="3626"><highlight class="preprocessor"><sp/><sp/>assert(P<sp/>!=<sp/>F);\</highlight></codeline>
<codeline lineno="3627"><highlight class="preprocessor"><sp/><sp/>assert(chunksize(P)<sp/>==<sp/>small_index2size(I));\</highlight></codeline>
<codeline lineno="3628"><highlight class="preprocessor"><sp/><sp/>if<sp/>(B<sp/>==<sp/>F)<sp/>{\</highlight></codeline>
<codeline lineno="3629"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>clear_smallmap(M,<sp/>I);\</highlight></codeline>
<codeline lineno="3630"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3631"><highlight class="preprocessor"><sp/><sp/>else<sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>F)<sp/>&amp;&amp;<sp/>F-&gt;bk<sp/>==<sp/>P))<sp/>{\</highlight></codeline>
<codeline lineno="3632"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>F-&gt;bk<sp/>=<sp/>B;\</highlight></codeline>
<codeline lineno="3633"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>B-&gt;fd<sp/>=<sp/>F;\</highlight></codeline>
<codeline lineno="3634"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3635"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3636"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3637"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3638"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="3639"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Replace<sp/>dv<sp/>node,<sp/>binning<sp/>the<sp/>old<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Used<sp/>only<sp/>when<sp/>dvsize<sp/>known<sp/>to<sp/>be<sp/>small<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>replace_dv(M,<sp/>P,<sp/>S)<sp/>{\</highlight></codeline>
<codeline lineno="3643"><highlight class="preprocessor"><sp/><sp/>size_t<sp/>DVS<sp/>=<sp/>M-&gt;dvsize;\</highlight></codeline>
<codeline lineno="3644"><highlight class="preprocessor"><sp/><sp/>assert(is_small(DVS));\</highlight></codeline>
<codeline lineno="3645"><highlight class="preprocessor"><sp/><sp/>if<sp/>(DVS<sp/>!=<sp/>0)<sp/>{\</highlight></codeline>
<codeline lineno="3646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>mchunkptr<sp/>DV<sp/>=<sp/>M-&gt;dv;\</highlight></codeline>
<codeline lineno="3647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>insert_small_chunk(M,<sp/>DV,<sp/>DVS);\</highlight></codeline>
<codeline lineno="3648"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3649"><highlight class="preprocessor"><sp/><sp/>M-&gt;dvsize<sp/>=<sp/>S;\</highlight></codeline>
<codeline lineno="3650"><highlight class="preprocessor"><sp/><sp/>M-&gt;dv<sp/>=<sp/>P;\</highlight></codeline>
<codeline lineno="3651"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="3652"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------------<sp/>Operations<sp/>on<sp/>trees<sp/>-------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Insert<sp/>chunk<sp/>into<sp/>tree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>insert_large_chunk(M,<sp/>X,<sp/>S)<sp/>{\</highlight></codeline>
<codeline lineno="3657"><highlight class="preprocessor"><sp/><sp/>tbinptr*<sp/>H;\</highlight></codeline>
<codeline lineno="3658"><highlight class="preprocessor"><sp/><sp/>bindex_t<sp/>I;\</highlight></codeline>
<codeline lineno="3659"><highlight class="preprocessor"><sp/><sp/>compute_tree_index(S,<sp/>I);\</highlight></codeline>
<codeline lineno="3660"><highlight class="preprocessor"><sp/><sp/>H<sp/>=<sp/>treebin_at(M,<sp/>I);\</highlight></codeline>
<codeline lineno="3661"><highlight class="preprocessor"><sp/><sp/>X-&gt;index<sp/>=<sp/>I;\</highlight></codeline>
<codeline lineno="3662"><highlight class="preprocessor"><sp/><sp/>X-&gt;child[0]<sp/>=<sp/>X-&gt;child[1]<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="3663"><highlight class="preprocessor"><sp/><sp/>if<sp/>(!treemap_is_marked(M,<sp/>I))<sp/>{\</highlight></codeline>
<codeline lineno="3664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>mark_treemap(M,<sp/>I);\</highlight></codeline>
<codeline lineno="3665"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>*H<sp/>=<sp/>X;\</highlight></codeline>
<codeline lineno="3666"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>X-&gt;parent<sp/>=<sp/>(tchunkptr)H;\</highlight></codeline>
<codeline lineno="3667"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>X-&gt;fd<sp/>=<sp/>X-&gt;bk<sp/>=<sp/>X;\</highlight></codeline>
<codeline lineno="3668"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3669"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3670"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>tchunkptr<sp/>T<sp/>=<sp/>*H;\</highlight></codeline>
<codeline lineno="3671"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>size_t<sp/>K<sp/>=<sp/>S<sp/>&lt;&lt;<sp/>leftshift_for_tree_index(I);\</highlight></codeline>
<codeline lineno="3672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(;;)<sp/>{\</highlight></codeline>
<codeline lineno="3673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(chunksize(T)<sp/>!=<sp/>S)<sp/>{\</highlight></codeline>
<codeline lineno="3674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr*<sp/>C<sp/>=<sp/>&amp;(T-&gt;child[(K<sp/>&gt;&gt;<sp/>(SIZE_T_BITSIZE-SIZE_T_ONE))<sp/>&amp;<sp/>1]);\</highlight></codeline>
<codeline lineno="3675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>K<sp/>&lt;&lt;=<sp/>1;\</highlight></codeline>
<codeline lineno="3676"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*C<sp/>!=<sp/>0)\</highlight></codeline>
<codeline lineno="3677"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>=<sp/>*C;\</highlight></codeline>
<codeline lineno="3678"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>C)))<sp/>{\</highlight></codeline>
<codeline lineno="3679"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*C<sp/>=<sp/>X;\</highlight></codeline>
<codeline lineno="3680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X-&gt;parent<sp/>=<sp/>T;\</highlight></codeline>
<codeline lineno="3681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X-&gt;fd<sp/>=<sp/>X-&gt;bk<sp/>=<sp/>X;\</highlight></codeline>
<codeline lineno="3682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;\</highlight></codeline>
<codeline lineno="3683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3684"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3685"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3686"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;\</highlight></codeline>
<codeline lineno="3687"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3688"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3689"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3690"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>F<sp/>=<sp/>T-&gt;fd;\</highlight></codeline>
<codeline lineno="3691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>T)<sp/>&amp;&amp;<sp/>ok_address(M,<sp/>F)))<sp/>{\</highlight></codeline>
<codeline lineno="3692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T-&gt;fd<sp/>=<sp/>F-&gt;bk<sp/>=<sp/>X;\</highlight></codeline>
<codeline lineno="3693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X-&gt;fd<sp/>=<sp/>F;\</highlight></codeline>
<codeline lineno="3694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X-&gt;bk<sp/>=<sp/>T;\</highlight></codeline>
<codeline lineno="3695"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X-&gt;parent<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="3696"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;\</highlight></codeline>
<codeline lineno="3697"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3698"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;\</highlight></codeline>
<codeline lineno="3701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3704"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3705"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="3706"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3708"><highlight class="comment"><sp/><sp/>Unlink<sp/>steps:</highlight></codeline>
<codeline lineno="3709"><highlight class="comment"></highlight></codeline>
<codeline lineno="3710"><highlight class="comment"><sp/><sp/>1.<sp/>If<sp/>x<sp/>is<sp/>a<sp/>chained<sp/>node,<sp/>unlink<sp/>it<sp/>from<sp/>its<sp/>same-sized<sp/>fd/bk<sp/>links</highlight></codeline>
<codeline lineno="3711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>and<sp/>choose<sp/>its<sp/>bk<sp/>node<sp/>as<sp/>its<sp/>replacement.</highlight></codeline>
<codeline lineno="3712"><highlight class="comment"><sp/><sp/>2.<sp/>If<sp/>x<sp/>was<sp/>the<sp/>last<sp/>node<sp/>of<sp/>its<sp/>size,<sp/>but<sp/>not<sp/>a<sp/>leaf<sp/>node,<sp/>it<sp/>must</highlight></codeline>
<codeline lineno="3713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>be<sp/>replaced<sp/>with<sp/>a<sp/>leaf<sp/>node<sp/>(not<sp/>merely<sp/>one<sp/>with<sp/>an<sp/>open<sp/>left<sp/>or</highlight></codeline>
<codeline lineno="3714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>right),<sp/>to<sp/>make<sp/>sure<sp/>that<sp/>lefts<sp/>and<sp/>rights<sp/>of<sp/>descendents</highlight></codeline>
<codeline lineno="3715"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>correspond<sp/>properly<sp/>to<sp/>bit<sp/>masks.<sp/><sp/>We<sp/>use<sp/>the<sp/>rightmost<sp/>descendent</highlight></codeline>
<codeline lineno="3716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>of<sp/>x.<sp/><sp/>We<sp/>could<sp/>use<sp/>any<sp/>other<sp/>leaf,<sp/>but<sp/>this<sp/>is<sp/>easy<sp/>to<sp/>locate<sp/>and</highlight></codeline>
<codeline lineno="3717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>tends<sp/>to<sp/>counteract<sp/>removal<sp/>of<sp/>leftmosts<sp/>elsewhere,<sp/>and<sp/>so<sp/>keeps</highlight></codeline>
<codeline lineno="3718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>paths<sp/>shorter<sp/>than<sp/>minimally<sp/>guaranteed.<sp/><sp/>This<sp/>doesn&apos;t<sp/>loop<sp/>much</highlight></codeline>
<codeline lineno="3719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>because<sp/>on<sp/>average<sp/>a<sp/>node<sp/>in<sp/>a<sp/>tree<sp/>is<sp/>near<sp/>the<sp/>bottom.</highlight></codeline>
<codeline lineno="3720"><highlight class="comment"><sp/><sp/>3.<sp/>If<sp/>x<sp/>is<sp/>the<sp/>base<sp/>of<sp/>a<sp/>chain<sp/>(i.e.,<sp/>has<sp/>parent<sp/>links)<sp/>relink</highlight></codeline>
<codeline lineno="3721"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>x&apos;s<sp/>parent<sp/>and<sp/>children<sp/>to<sp/>x&apos;s<sp/>replacement<sp/>(or<sp/>null<sp/>if<sp/>none).</highlight></codeline>
<codeline lineno="3722"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>unlink_large_chunk(M,<sp/>X)<sp/>{\</highlight></codeline>
<codeline lineno="3725"><highlight class="preprocessor"><sp/><sp/>tchunkptr<sp/>XP<sp/>=<sp/>X-&gt;parent;\</highlight></codeline>
<codeline lineno="3726"><highlight class="preprocessor"><sp/><sp/>tchunkptr<sp/>R;\</highlight></codeline>
<codeline lineno="3727"><highlight class="preprocessor"><sp/><sp/>if<sp/>(X-&gt;bk<sp/>!=<sp/>X)<sp/>{\</highlight></codeline>
<codeline lineno="3728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>tchunkptr<sp/>F<sp/>=<sp/>X-&gt;fd;\</highlight></codeline>
<codeline lineno="3729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>X-&gt;bk;\</highlight></codeline>
<codeline lineno="3730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>F)<sp/>&amp;&amp;<sp/>F-&gt;bk<sp/>==<sp/>X<sp/>&amp;&amp;<sp/>R-&gt;fd<sp/>==<sp/>X))<sp/>{\</highlight></codeline>
<codeline lineno="3731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>F-&gt;bk<sp/>=<sp/>R;\</highlight></codeline>
<codeline lineno="3732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>R-&gt;fd<sp/>=<sp/>F;\</highlight></codeline>
<codeline lineno="3733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3737"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3738"><highlight class="preprocessor"><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>tchunkptr*<sp/>RP;\</highlight></codeline>
<codeline lineno="3740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(((R<sp/>=<sp/>*(RP<sp/>=<sp/>&amp;(X-&gt;child[1])))<sp/>!=<sp/>0)<sp/>||\</highlight></codeline>
<codeline lineno="3741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((R<sp/>=<sp/>*(RP<sp/>=<sp/>&amp;(X-&gt;child[0])))<sp/>!=<sp/>0))<sp/>{\</highlight></codeline>
<codeline lineno="3742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr*<sp/>CP;\</highlight></codeline>
<codeline lineno="3743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>((*(CP<sp/>=<sp/>&amp;(R-&gt;child[1]))<sp/>!=<sp/>0)<sp/>||\</highlight></codeline>
<codeline lineno="3744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*(CP<sp/>=<sp/>&amp;(R-&gt;child[0]))<sp/>!=<sp/>0))<sp/>{\</highlight></codeline>
<codeline lineno="3745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>*(RP<sp/>=<sp/>CP);\</highlight></codeline>
<codeline lineno="3746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>RP)))\</highlight></codeline>
<codeline lineno="3748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*RP<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="3749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="3750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3753"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3754"><highlight class="preprocessor"><sp/><sp/>if<sp/>(XP<sp/>!=<sp/>0)<sp/>{\</highlight></codeline>
<codeline lineno="3755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>tbinptr*<sp/>H<sp/>=<sp/>treebin_at(M,<sp/>X-&gt;index);\</highlight></codeline>
<codeline lineno="3756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(X<sp/>==<sp/>*H)<sp/>{\</highlight></codeline>
<codeline lineno="3757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((*H<sp/>=<sp/>R)<sp/>==<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="3758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_treemap(M,<sp/>X-&gt;index);\</highlight></codeline>
<codeline lineno="3759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>XP)))<sp/>{\</highlight></codeline>
<codeline lineno="3761"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(XP-&gt;child[0]<sp/>==<sp/>X)<sp/>\</highlight></codeline>
<codeline lineno="3762"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XP-&gt;child[0]<sp/>=<sp/>R;\</highlight></codeline>
<codeline lineno="3763"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="3764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XP-&gt;child[1]<sp/>=<sp/>R;\</highlight></codeline>
<codeline lineno="3765"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3766"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else\</highlight></codeline>
<codeline lineno="3767"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(R<sp/>!=<sp/>0)<sp/>{\</highlight></codeline>
<codeline lineno="3769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>R)))<sp/>{\</highlight></codeline>
<codeline lineno="3770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>C0,<sp/>C1;\</highlight></codeline>
<codeline lineno="3771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R-&gt;parent<sp/>=<sp/>XP;\</highlight></codeline>
<codeline lineno="3772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((C0<sp/>=<sp/>X-&gt;child[0])<sp/>!=<sp/>0)<sp/>{\</highlight></codeline>
<codeline lineno="3773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>C0)))<sp/>{\</highlight></codeline>
<codeline lineno="3774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R-&gt;child[0]<sp/>=<sp/>C0;\</highlight></codeline>
<codeline lineno="3775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C0-&gt;parent<sp/>=<sp/>R;\</highlight></codeline>
<codeline lineno="3776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else\</highlight></codeline>
<codeline lineno="3778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((C1<sp/>=<sp/>X-&gt;child[1])<sp/>!=<sp/>0)<sp/>{\</highlight></codeline>
<codeline lineno="3781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(RTCHECK(ok_address(M,<sp/>C1)))<sp/>{\</highlight></codeline>
<codeline lineno="3782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R-&gt;child[1]<sp/>=<sp/>C1;\</highlight></codeline>
<codeline lineno="3783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C1-&gt;parent<sp/>=<sp/>R;\</highlight></codeline>
<codeline lineno="3784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else\</highlight></codeline>
<codeline lineno="3786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else\</highlight></codeline>
<codeline lineno="3790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(M);\</highlight></codeline>
<codeline lineno="3791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3792"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="3793"><highlight class="preprocessor">}</highlight></codeline>
<codeline lineno="3794"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Relays<sp/>to<sp/>large<sp/>vs<sp/>small<sp/>bin<sp/>operations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>insert_chunk(M,<sp/>P,<sp/>S)\</highlight></codeline>
<codeline lineno="3798"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_small(S))<sp/>insert_small_chunk(M,<sp/>P,<sp/>S)\</highlight></codeline>
<codeline lineno="3799"><highlight class="preprocessor"><sp/><sp/>else<sp/>{<sp/>tchunkptr<sp/>TP<sp/>=<sp/>(tchunkptr)(P);<sp/>insert_large_chunk(M,<sp/>TP,<sp/>S);<sp/>}</highlight></codeline>
<codeline lineno="3800"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>unlink_chunk(M,<sp/>P,<sp/>S)\</highlight></codeline>
<codeline lineno="3802"><highlight class="preprocessor"><sp/><sp/>if<sp/>(is_small(S))<sp/>unlink_small_chunk(M,<sp/>P,<sp/>S)\</highlight></codeline>
<codeline lineno="3803"><highlight class="preprocessor"><sp/><sp/>else<sp/>{<sp/>tchunkptr<sp/>TP<sp/>=<sp/>(tchunkptr)(P);<sp/>unlink_large_chunk(M,<sp/>TP);<sp/>}</highlight></codeline>
<codeline lineno="3804"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"></highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Relays<sp/>to<sp/>internal<sp/>calls<sp/>to<sp/>malloc/free<sp/>from<sp/>realloc,<sp/>memalign<sp/>etc<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ONLY_MSPACES</highlight></codeline>
<codeline lineno="3809"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>internal_malloc(m,<sp/>b)<sp/>mspace_malloc(m,<sp/>b)</highlight></codeline>
<codeline lineno="3810"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>internal_free(m,<sp/>mem)<sp/>mspace_free(m,mem);</highlight></codeline>
<codeline lineno="3811"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3812"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>MSPACES</highlight></codeline>
<codeline lineno="3813"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>internal_malloc(m,<sp/>b)\</highlight></codeline>
<codeline lineno="3814"><highlight class="preprocessor"><sp/><sp/>((m<sp/>==<sp/>gm)?<sp/>dlmalloc(b)<sp/>:<sp/>mspace_malloc(m,<sp/>b))</highlight></codeline>
<codeline lineno="3815"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>internal_free(m,<sp/>mem)\</highlight></codeline>
<codeline lineno="3816"><highlight class="preprocessor"><sp/><sp/><sp/>if<sp/>(m<sp/>==<sp/>gm)<sp/>dlfree(mem);<sp/>else<sp/>mspace_free(m,mem);</highlight></codeline>
<codeline lineno="3817"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3818"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>internal_malloc(m,<sp/>b)<sp/>dlmalloc(b)</highlight></codeline>
<codeline lineno="3819"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>internal_free(m,<sp/>mem)<sp/>dlfree(mem)</highlight></codeline>
<codeline lineno="3820"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3821"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3822"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------<sp/><sp/>Direct-mmapping<sp/>chunks<sp/>-----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3826"><highlight class="comment"><sp/><sp/>Directly<sp/>mmapped<sp/>chunks<sp/>are<sp/>set<sp/>up<sp/>with<sp/>an<sp/>offset<sp/>to<sp/>the<sp/>start<sp/>of</highlight></codeline>
<codeline lineno="3827"><highlight class="comment"><sp/><sp/>the<sp/>mmapped<sp/>region<sp/>stored<sp/>in<sp/>the<sp/>prev_foot<sp/>field<sp/>of<sp/>the<sp/>chunk.<sp/>This</highlight></codeline>
<codeline lineno="3828"><highlight class="comment"><sp/><sp/>allows<sp/>reconstruction<sp/>of<sp/>the<sp/>required<sp/>argument<sp/>to<sp/>MUNMAP<sp/>when<sp/>freed,</highlight></codeline>
<codeline lineno="3829"><highlight class="comment"><sp/><sp/>and<sp/>also<sp/>allows<sp/>adjustment<sp/>of<sp/>the<sp/>returned<sp/>chunk<sp/>to<sp/>meet<sp/>alignment</highlight></codeline>
<codeline lineno="3830"><highlight class="comment"><sp/><sp/>requirements<sp/>(especially<sp/>in<sp/>memalign).</highlight></codeline>
<codeline lineno="3831"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Malloc<sp/>using<sp/>mmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mmap_alloc(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mmsize<sp/>=<sp/>mmap_align(nb<sp/>+<sp/>SIX_SIZE_T_SIZES<sp/>+<sp/>CHUNK_ALIGN_MASK);</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;footprint_limit<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fp<sp/>=<sp/>m-&gt;footprint<sp/>+<sp/>mmsize;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>&lt;=<sp/>m-&gt;footprint<sp/>||<sp/>fp<sp/>&gt;<sp/>m-&gt;footprint_limit)</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mmsize<sp/>&gt;<sp/>nb)<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>wrap<sp/>around<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mm<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_DIRECT_MMAP(mmsize));</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mm<sp/>!=<sp/>CMFAIL)<sp/>{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>align_offset(chunk2mem(mm));</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>mmsize<sp/>-<sp/>offset<sp/>-<sp/>MMAP_FOOT_PAD;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>(mchunkptr)(mm<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;prev_foot<sp/>=<sp/>offset;</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;head<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mark_inuse_foot(m,<sp/>p,<sp/>psize);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chunk_plus_offset(p,<sp/>psize)-&gt;head<sp/>=<sp/>FENCEPOST_HEAD;</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chunk_plus_offset(p,<sp/>psize+SIZE_T_SIZE)-&gt;head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;least_addr<sp/>==<sp/>0<sp/>||<sp/>mm<sp/>&lt;<sp/>m-&gt;least_addr)</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;least_addr<sp/>=<sp/>mm;</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m-&gt;footprint<sp/>+=<sp/>mmsize)<sp/>&gt;<sp/>m-&gt;max_footprint)</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;max_footprint<sp/>=<sp/>m-&gt;footprint;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(is_aligned(chunk2mem(p)));</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_mmapped_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Realloc<sp/>using<sp/>mmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>mchunkptr<sp/>mmap_resize(mstate<sp/>m,<sp/>mchunkptr<sp/>oldp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldsize<sp/>=<sp/>chunksize(oldp);</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>(void)flags;<sp/></highlight><highlight class="comment">/*<sp/>placate<sp/>people<sp/>compiling<sp/>-Wunused<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small(nb))<sp/></highlight><highlight class="comment">/*<sp/>Can&apos;t<sp/>shrink<sp/>mmap<sp/>regions<sp/>below<sp/>small<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Keep<sp/>old<sp/>chunk<sp/>if<sp/>big<sp/>enough<sp/>but<sp/>not<sp/>too<sp/>big<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldsize<sp/>&gt;=<sp/>nb<sp/>+<sp/>SIZE_T_SIZE<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(oldsize<sp/>-<sp/>nb)<sp/>&lt;=<sp/>(mparams.granularity<sp/>&lt;&lt;<sp/>1))</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldp;</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>oldp-&gt;prev_foot;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldmmsize<sp/>=<sp/>oldsize<sp/>+<sp/>offset<sp/>+<sp/>MMAP_FOOT_PAD;</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newmmsize<sp/>=<sp/>mmap_align(nb<sp/>+<sp/>SIX_SIZE_T_SIZES<sp/>+<sp/>CHUNK_ALIGN_MASK);</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>cp<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)CALL_MREMAP((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)oldp<sp/>-<sp/>offset,</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldmmsize,<sp/>newmmsize,<sp/>flags);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>!=<sp/>CMFAIL)<sp/>{</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>(mchunkptr)(cp<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>newmmsize<sp/>-<sp/>offset<sp/>-<sp/>MMAP_FOOT_PAD;</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newp-&gt;head<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mark_inuse_foot(m,<sp/>newp,<sp/>psize);</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chunk_plus_offset(newp,<sp/>psize)-&gt;head<sp/>=<sp/>FENCEPOST_HEAD;</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chunk_plus_offset(newp,<sp/>psize+SIZE_T_SIZE)-&gt;head<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&lt;<sp/>m-&gt;least_addr)</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;least_addr<sp/>=<sp/>cp;</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m-&gt;footprint<sp/>+=<sp/>newmmsize<sp/>-<sp/>oldmmsize)<sp/>&gt;<sp/>m-&gt;max_footprint)</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;max_footprint<sp/>=<sp/>m-&gt;footprint;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_mmapped_chunk(m,<sp/>newp);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newp;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------<sp/>mspace<sp/>management<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>top<sp/>chunk<sp/>and<sp/>its<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_top(mstate<sp/>m,<sp/>mchunkptr<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize)<sp/>{</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>alignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>align_offset(chunk2mem(p));</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>(mchunkptr)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p<sp/>+<sp/>offset);</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/>psize<sp/>-=<sp/>offset;</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/>m-&gt;top<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/>m-&gt;topsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/>p-&gt;head<sp/>=<sp/>psize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>size<sp/>of<sp/>fake<sp/>trailing<sp/>chunk<sp/>holding<sp/>overhead<sp/>space<sp/>only<sp/>once<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/>chunk_plus_offset(p,<sp/>psize)-&gt;head<sp/>=<sp/>TOP_FOOT_SIZE;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/>m-&gt;trim_check<sp/>=<sp/>mparams.trim_threshold;<sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>on<sp/>each<sp/>update<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Initialize<sp/>bins<sp/>for<sp/>a<sp/>new<sp/>mstate<sp/>that<sp/>is<sp/>otherwise<sp/>zeroed<sp/>out<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_bins(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Establish<sp/>circular<sp/>links<sp/>for<sp/>smallbins<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/>bindex_t<sp/>i;</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NSMALLBINS;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/>sbinptr<sp/>bin<sp/>=<sp/>smallbin_at(m,i);</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/>bin-&gt;fd<sp/>=<sp/>bin-&gt;bk<sp/>=<sp/>bin;</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3926"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PROCEED_ON_ERROR</highlight></codeline>
<codeline lineno="3929"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>default<sp/>corruption<sp/>action<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_on_error(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/>++malloc_corruption_error_count;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reinitialize<sp/>fields<sp/>to<sp/>forget<sp/>about<sp/>all<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>m-&gt;smallmap<sp/>=<sp/>m-&gt;treemap<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>m-&gt;topsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>m-&gt;seg.base<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>m-&gt;seg.size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/>m-&gt;seg.next<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/>m-&gt;top<sp/>=<sp/>m-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NTREEBINS;<sp/>++i)</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/>*treebin_at(m,<sp/>i)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/>init_bins(m);</highlight></codeline>
<codeline lineno="3944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>PROCEED_ON_ERROR<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="3946"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>chunk<sp/>and<sp/>prepend<sp/>remainder<sp/>with<sp/>chunk<sp/>in<sp/>successor<sp/>base.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>prepend_alloc(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>newbase,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>oldbase,</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>align_as_chunk(newbase);</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>oldfirst<sp/>=<sp/>align_as_chunk(oldbase);</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)oldfirst<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>q<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>qsize<sp/>=<sp/>psize<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/>assert((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)oldfirst<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)q);</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/>assert(pinuse(oldfirst));</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/>assert(qsize<sp/>&gt;=<sp/>MIN_CHUNK_SIZE);</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>remainder<sp/>with<sp/>first<sp/>chunk<sp/>of<sp/>old<sp/>base<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldfirst<sp/>==<sp/>m-&gt;top)<sp/>{</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>m-&gt;topsize<sp/>+=<sp/>qsize;</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;top<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/>q-&gt;head<sp/>=<sp/>tsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/>check_top_chunk(m,<sp/>q);</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldfirst<sp/>==<sp/>m-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize<sp/>=<sp/>m-&gt;dvsize<sp/>+=<sp/>qsize;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;dv<sp/>=<sp/>q;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(q,<sp/>dsize);</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_inuse(oldfirst))<sp/>{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsize<sp/>=<sp/>chunksize(oldfirst);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(m,<sp/>oldfirst,<sp/>nsize);</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldfirst<sp/>=<sp/>chunk_plus_offset(oldfirst,<sp/>nsize);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>qsize<sp/>+=<sp/>nsize;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/>set_free_with_pinuse(q,<sp/>qsize,<sp/>oldfirst);</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/>insert_chunk(m,<sp/>q,<sp/>qsize);</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/>check_free_chunk(m,<sp/>q);</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/>check_malloced_chunk(m,<sp/>chunk2mem(p),<sp/>nb);</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Add<sp/>a<sp/>segment<sp/>to<sp/>hold<sp/>a<sp/>new<sp/>noncontiguous<sp/>region<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_segment(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tbase,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize,<sp/>flag_t<sp/>mmapped)<sp/>{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>locations<sp/>and<sp/>sizes<sp/>of<sp/>segment,<sp/>fenceposts,<sp/>old<sp/>top<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>old_top<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)m-&gt;top;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>oldsp<sp/>=<sp/>segment_holding(m,<sp/>old_top);</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>old_end<sp/>=<sp/>oldsp-&gt;base<sp/>+<sp/>oldsp-&gt;size;</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ssize<sp/>=<sp/>pad_request(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmalloc__segment" kindref="compound">malloc_segment</ref>));</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rawsp<sp/>=<sp/>old_end<sp/>-<sp/>(ssize<sp/>+<sp/>FOUR_SIZE_T_SIZES<sp/>+<sp/>CHUNK_ALIGN_MASK);</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>align_offset(chunk2mem(rawsp));</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>asp<sp/>=<sp/>rawsp<sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>csp<sp/>=<sp/>(asp<sp/>&lt;<sp/>(old_top<sp/>+<sp/>MIN_CHUNK_SIZE))?<sp/>old_top<sp/>:<sp/>asp;</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>sp<sp/>=<sp/>(mchunkptr)csp;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>ss<sp/>=<sp/>(msegmentptr)(chunk2mem(sp));</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>tnext<sp/>=<sp/>chunk_plus_offset(sp,<sp/>ssize);</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>tnext;</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nfences<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>top<sp/>to<sp/>new<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>init_top(m,<sp/>(mchunkptr)tbase,<sp/>tsize<sp/>-<sp/>TOP_FOOT_SIZE);</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>segment<sp/>record<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/>assert(is_aligned(ss));</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>sp,<sp/>ssize);</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>*ss<sp/>=<sp/>m-&gt;seg;<sp/></highlight><highlight class="comment">/*<sp/>Push<sp/>current<sp/>record<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/>m-&gt;seg.base<sp/>=<sp/>tbase;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/>m-&gt;seg.size<sp/>=<sp/>tsize;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/>m-&gt;seg.sflags<sp/>=<sp/>mmapped;</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/>m-&gt;seg.next<sp/>=<sp/>ss;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"></highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>trailing<sp/>fenceposts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>nextp<sp/>=<sp/>chunk_plus_offset(p,<sp/>SIZE_T_SIZE);</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;head<sp/>=<sp/>FENCEPOST_HEAD;</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/>++nfences;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;(nextp-&gt;head))<sp/>&lt;<sp/>old_end)</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>nextp;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/>assert(nfences<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>rest<sp/>of<sp/>old<sp/>top<sp/>into<sp/>a<sp/>bin<sp/>as<sp/>an<sp/>ordinary<sp/>free<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(csp<sp/>!=<sp/>old_top)<sp/>{</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>q<sp/>=<sp/>(mchunkptr)old_top;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>csp<sp/>-<sp/>old_top;</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>tn<sp/>=<sp/>chunk_plus_offset(q,<sp/>psize);</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/>set_free_with_pinuse(q,<sp/>psize,<sp/>tn);</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/>insert_chunk(m,<sp/>q,<sp/>psize);</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>check_top_chunk(m,<sp/>m-&gt;top);</highlight></codeline>
<codeline lineno="4040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------------<sp/>System<sp/>allocation<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>memory<sp/>from<sp/>system<sp/>using<sp/>MORECORE<sp/>or<sp/>MMAP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>sys_alloc(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tbase<sp/>=<sp/>CMFAIL;</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/>flag_t<sp/>mmap_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>asize;<sp/></highlight><highlight class="comment">/*<sp/>allocation<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Directly<sp/>map<sp/>large<sp/>chunks,<sp/>but<sp/>only<sp/>if<sp/>already<sp/>initialized<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_mmap(m)<sp/>&amp;&amp;<sp/>nb<sp/>&gt;=<sp/>mparams.mmap_threshold<sp/>&amp;&amp;<sp/>m-&gt;topsize<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>mmap_alloc(m,<sp/>nb);</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/>asize<sp/>=<sp/>granularity_align(nb<sp/>+<sp/>SYS_ALLOC_PADDING);</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asize<sp/>&lt;=<sp/>nb)</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>wraparound<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;footprint_limit<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fp<sp/>=<sp/>m-&gt;footprint<sp/>+<sp/>asize;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fp<sp/>&lt;=<sp/>m-&gt;footprint<sp/>||<sp/>fp<sp/>&gt;<sp/>m-&gt;footprint_limit)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4070"><highlight class="comment"><sp/><sp/><sp/><sp/>Try<sp/>getting<sp/>memory<sp/>in<sp/>any<sp/>of<sp/>three<sp/>ways<sp/>(in<sp/>most-preferred<sp/>to</highlight></codeline>
<codeline lineno="4071"><highlight class="comment"><sp/><sp/><sp/><sp/>least-preferred<sp/>order):</highlight></codeline>
<codeline lineno="4072"><highlight class="comment"><sp/><sp/><sp/><sp/>1.<sp/>A<sp/>call<sp/>to<sp/>MORECORE<sp/>that<sp/>can<sp/>normally<sp/>contiguously<sp/>extend<sp/>memory.</highlight></codeline>
<codeline lineno="4073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(disabled<sp/>if<sp/>not<sp/>MORECORE_CONTIGUOUS<sp/>or<sp/>not<sp/>HAVE_MORECORE<sp/>or</highlight></codeline>
<codeline lineno="4074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>main<sp/>space<sp/>is<sp/>mmapped<sp/>or<sp/>a<sp/>previous<sp/>contiguous<sp/>call<sp/>failed)</highlight></codeline>
<codeline lineno="4075"><highlight class="comment"><sp/><sp/><sp/><sp/>2.<sp/>A<sp/>call<sp/>to<sp/>MMAP<sp/>new<sp/>space<sp/>(disabled<sp/>if<sp/>not<sp/>HAVE_MMAP).</highlight></codeline>
<codeline lineno="4076"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Note<sp/>that<sp/>under<sp/>the<sp/>default<sp/>settings,<sp/>if<sp/>MORECORE<sp/>is<sp/>unable<sp/>to</highlight></codeline>
<codeline lineno="4077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fulfill<sp/>a<sp/>request,<sp/>and<sp/>HAVE_MMAP<sp/>is<sp/>true,<sp/>then<sp/>mmap<sp/>is</highlight></codeline>
<codeline lineno="4078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>as<sp/>a<sp/>noncontiguous<sp/>system<sp/>allocator.<sp/>This<sp/>is<sp/>a<sp/>useful<sp/>backup</highlight></codeline>
<codeline lineno="4079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strategy<sp/>for<sp/>systems<sp/>with<sp/>holes<sp/>in<sp/>address<sp/>spaces<sp/>--<sp/>in<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="4080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbrk<sp/>cannot<sp/>contiguously<sp/>expand<sp/>the<sp/>heap,<sp/>but<sp/>mmap<sp/>may<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="4081"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>find<sp/>space.</highlight></codeline>
<codeline lineno="4082"><highlight class="comment"><sp/><sp/><sp/><sp/>3.<sp/>A<sp/>call<sp/>to<sp/>MORECORE<sp/>that<sp/>cannot<sp/>usually<sp/>contiguously<sp/>extend<sp/>memory.</highlight></codeline>
<codeline lineno="4083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(disabled<sp/>if<sp/>not<sp/>HAVE_MORECORE)</highlight></codeline>
<codeline lineno="4084"><highlight class="comment"></highlight></codeline>
<codeline lineno="4085"><highlight class="comment"><sp/><sp/><sp/>In<sp/>all<sp/>cases,<sp/>we<sp/>need<sp/>to<sp/>request<sp/>enough<sp/>bytes<sp/>from<sp/>system<sp/>to<sp/>ensure</highlight></codeline>
<codeline lineno="4086"><highlight class="comment"><sp/><sp/><sp/>we<sp/>can<sp/>malloc<sp/>nb<sp/>bytes<sp/>upon<sp/>success,<sp/>so<sp/>pad<sp/>with<sp/>enough<sp/>space<sp/>for</highlight></codeline>
<codeline lineno="4087"><highlight class="comment"><sp/><sp/><sp/>top_foot,<sp/>plus<sp/>alignment-pad<sp/>to<sp/>make<sp/>sure<sp/>we<sp/>don&apos;t<sp/>lose<sp/>bytes<sp/>if</highlight></codeline>
<codeline lineno="4088"><highlight class="comment"><sp/><sp/><sp/>not<sp/>on<sp/>boundary,<sp/>and<sp/>round<sp/>this<sp/>up<sp/>to<sp/>a<sp/>granularity<sp/>unit.</highlight></codeline>
<codeline lineno="4089"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(MORECORE_CONTIGUOUS<sp/>&amp;&amp;<sp/>!use_noncontiguous(m))<sp/>{</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>br<sp/>=<sp/>CMFAIL;</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ssize<sp/>=<sp/>asize;<sp/></highlight><highlight class="comment">/*<sp/>sbrk<sp/>call<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>msegmentptr<sp/>ss<sp/>=<sp/>(m-&gt;top<sp/>==<sp/>0)?<sp/>0<sp/>:<sp/>segment_holding(m,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)m-&gt;top);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/>ACQUIRE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>time<sp/>through<sp/>or<sp/>recovery<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>base<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)CALL_MORECORE(0);</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(base<sp/>!=<sp/>CMFAIL)<sp/>{</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>fp;</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>to<sp/>end<sp/>on<sp/>a<sp/>page<sp/>boundary<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_page_aligned(base))</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize<sp/>+=<sp/>(page_align((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)base)<sp/>-<sp/>(size_t)base);</highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>m-&gt;footprint<sp/>+<sp/>ssize;<sp/></highlight><highlight class="comment">/*<sp/>recheck<sp/>limits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssize<sp/>&gt;<sp/>nb<sp/>&amp;&amp;<sp/>ssize<sp/>&lt;<sp/>HALF_MAX_SIZE_T<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(m-&gt;footprint_limit<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fp<sp/>&gt;<sp/>m-&gt;footprint<sp/>&amp;&amp;<sp/>fp<sp/>&lt;=<sp/>m-&gt;footprint_limit))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(ssize)))<sp/>==<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbase<sp/>=<sp/>base;</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsize<sp/>=<sp/>ssize;</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Subtract<sp/>out<sp/>existing<sp/>available<sp/>top<sp/>space<sp/>from<sp/>MORECORE<sp/>request.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ssize<sp/>=<sp/>granularity_align(nb<sp/>-<sp/>m-&gt;topsize<sp/>+<sp/>SYS_ALLOC_PADDING);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>mem<sp/>here<sp/>only<sp/>if<sp/>it<sp/>did<sp/>continuously<sp/>extend<sp/>old<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssize<sp/>&lt;<sp/>HALF_MAX_SIZE_T<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(ssize)))<sp/>==<sp/>ss-&gt;base+ss-&gt;size)<sp/>{</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbase<sp/>=<sp/>br;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsize<sp/>=<sp/>ssize;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbase<sp/>==<sp/>CMFAIL)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cope<sp/>with<sp/>partial<sp/>failure<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(br<sp/>!=<sp/>CMFAIL)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>use/extend<sp/>the<sp/>space<sp/>we<sp/>did<sp/>get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssize<sp/>&lt;<sp/>HALF_MAX_SIZE_T<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize<sp/>&lt;<sp/>nb<sp/>+<sp/>SYS_ALLOC_PADDING)<sp/>{</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>esize<sp/>=<sp/>granularity_align(nb<sp/>+<sp/>SYS_ALLOC_PADDING<sp/>-<sp/>ssize);</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(esize<sp/>&lt;<sp/>HALF_MAX_SIZE_T)<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)CALL_MORECORE(esize);</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>!=<sp/>CMFAIL)</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssize<sp/>+=<sp/>esize;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can&apos;t<sp/>use;<sp/>try<sp/>to<sp/>release<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>CALL_MORECORE(-ssize);</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br<sp/>=<sp/>CMFAIL;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(br<sp/>!=<sp/>CMFAIL)<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>space<sp/>we<sp/>did<sp/>get<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbase<sp/>=<sp/>br;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsize<sp/>=<sp/>ssize;</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disable_contiguous(m);<sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>try<sp/>contiguous<sp/>path<sp/>in<sp/>the<sp/>future<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/>RELEASE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_MMAP<sp/>&amp;&amp;<sp/>tbase<sp/>==<sp/>CMFAIL)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>MMAP<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mp<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MMAP(asize));</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mp<sp/>!=<sp/>CMFAIL)<sp/>{</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tbase<sp/>=<sp/>mp;</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tsize<sp/>=<sp/>asize;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mmap_flag<sp/>=<sp/>USE_MMAP_BIT;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"></highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_MORECORE<sp/>&amp;&amp;<sp/>tbase<sp/>==<sp/>CMFAIL)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>noncontiguous<sp/>MORECORE<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(asize<sp/>&lt;<sp/>HALF_MAX_SIZE_T)<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>br<sp/>=<sp/>CMFAIL;</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/>CMFAIL;</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ACQUIRE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(asize));</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(0));</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(br<sp/>!=<sp/>CMFAIL<sp/>&amp;&amp;<sp/>end<sp/>!=<sp/>CMFAIL<sp/>&amp;&amp;<sp/>br<sp/>&lt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ssize<sp/>=<sp/>end<sp/>-<sp/>br;</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ssize<sp/>&gt;<sp/>nb<sp/>+<sp/>TOP_FOOT_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tbase<sp/>=<sp/>br;</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tsize<sp/>=<sp/>ssize;</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbase<sp/>!=<sp/>CMFAIL)<sp/>{</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((m-&gt;footprint<sp/>+=<sp/>tsize)<sp/>&gt;<sp/>m-&gt;max_footprint)</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;max_footprint<sp/>=<sp/>m-&gt;footprint;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_initialized(m))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>first-time<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;least_addr<sp/>==<sp/>0<sp/>||<sp/>tbase<sp/>&lt;<sp/>m-&gt;least_addr)</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;least_addr<sp/>=<sp/>tbase;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;seg.base<sp/>=<sp/>tbase;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;seg.size<sp/>=<sp/>tsize;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;seg.sflags<sp/>=<sp/>mmap_flag;</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;magic<sp/>=<sp/>mparams.magic;</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;release_checks<sp/>=<sp/>MAX_RELEASE_CHECK_RATE;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>init_bins(m);</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight></codeline>
<codeline lineno="4194"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_global(m))</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_top(m,<sp/>(mchunkptr)tbase,<sp/>tsize<sp/>-<sp/>TOP_FOOT_SIZE);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Offset<sp/>top<sp/>by<sp/>embedded<sp/>malloc_state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>mn<sp/>=<sp/>next_chunk(mem2chunk(m));</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_top(m,<sp/>mn,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)((tbase<sp/>+<sp/>tsize)<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mn)<sp/>-TOP_FOOT_SIZE);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>merge<sp/>with<sp/>an<sp/>existing<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>consider<sp/>most<sp/>recent<sp/>segment<sp/>if<sp/>traversal<sp/>suppressed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>tbase<sp/>!=<sp/>sp-&gt;base<sp/>+<sp/>sp-&gt;size)</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>(NO_SEGMENT_TRAVERSAL)<sp/>?<sp/>0<sp/>:<sp/>sp-&gt;next;</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sp<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_extern_segment(sp)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sp-&gt;sflags<sp/>&amp;<sp/>USE_MMAP_BIT)<sp/>==<sp/>mmap_flag<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>segment_holds(sp,<sp/>m-&gt;top))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>append<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;size<sp/>+=<sp/>tsize;</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_top(m,<sp/>m-&gt;top,<sp/>m-&gt;topsize<sp/>+<sp/>tsize);</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbase<sp/>&lt;<sp/>m-&gt;least_addr)</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;least_addr<sp/>=<sp/>tbase;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>sp-&gt;base<sp/>!=<sp/>tbase<sp/>+<sp/>tsize)</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>(NO_SEGMENT_TRAVERSAL)<sp/>?<sp/>0<sp/>:<sp/>sp-&gt;next;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sp<sp/>!=<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!is_extern_segment(sp)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sp-&gt;sflags<sp/>&amp;<sp/>USE_MMAP_BIT)<sp/>==<sp/>mmap_flag)<sp/>{</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>oldbase<sp/>=<sp/>sp-&gt;base;</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;base<sp/>=<sp/>tbase;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;size<sp/>+=<sp/>tsize;</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prepend_alloc(m,<sp/>tbase,<sp/>oldbase,<sp/>nb);</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>add_segment(m,<sp/>tbase,<sp/>tsize,<sp/>mmap_flag);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&lt;<sp/>m-&gt;topsize)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>from<sp/>new<sp/>or<sp/>extended<sp/>top<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>m-&gt;topsize<sp/>-=<sp/>nb;</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>m-&gt;top;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>m-&gt;top<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;head<sp/>=<sp/>rsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_top_chunk(m,<sp/>m-&gt;top);</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(m,<sp/>chunk2mem(p),<sp/>nb);</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/>MALLOC_FAILURE_ACTION;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------<sp/><sp/>system<sp/>deallocation<sp/>--------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"></highlight></codeline>
<codeline lineno="4255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unmap<sp/>and<sp/>unlink<sp/>any<sp/>mmapped<sp/>segments<sp/>that<sp/>don&apos;t<sp/>contain<sp/>used<sp/>chunks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>release_unused_segments(mstate<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>released<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsegs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>pred<sp/>=<sp/>&amp;m-&gt;seg;</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>pred-&gt;next;</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>base<sp/>=<sp/>sp-&gt;base;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>sp-&gt;size;</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/>msegmentptr<sp/>next<sp/>=<sp/>sp-&gt;next;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/>++nsegs;</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped_segment(sp)<sp/>&amp;&amp;<sp/>!is_extern_segment(sp))<sp/>{</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>align_as_chunk(base);</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can<sp/>unmap<sp/>if<sp/>first<sp/>chunk<sp/>holds<sp/>entire<sp/>segment<sp/>and<sp/>not<sp/>pinned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_inuse(p)<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p<sp/>+<sp/>psize<sp/>&gt;=<sp/>base<sp/>+<sp/>size<sp/>-<sp/>TOP_FOOT_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>tp<sp/>=<sp/>(tchunkptr)p;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(segment_holds(sp,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)sp));</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>m-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_large_chunk(m,<sp/>tp);</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CALL_MUNMAP(base,<sp/>size)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>released<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;footprint<sp/>-=<sp/>size;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unlink<sp/>obsoleted<sp/>record<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>pred;</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;next<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>back<sp/>out<sp/>if<sp/>cannot<sp/>unmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_large_chunk(m,<sp/>tp,<sp/>psize);</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NO_SEGMENT_TRAVERSAL)<sp/></highlight><highlight class="comment">/*<sp/>scan<sp/>only<sp/>first<sp/>segment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/>pred<sp/>=<sp/>sp;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>check<sp/>counter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>m-&gt;release_checks<sp/>=<sp/>(((size_t)<sp/>nsegs<sp/>&gt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>MAX_RELEASE_CHECK_RATE)?</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>nsegs<sp/>:<sp/>(size_t)<sp/>MAX_RELEASE_CHECK_RATE);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>released;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sys_trim(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pad)<sp/>{</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>released<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pad<sp/>&lt;<sp/>MAX_REQUEST<sp/>&amp;&amp;<sp/>is_initialized(m))<sp/>{</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/>pad<sp/>+=<sp/>TOP_FOOT_SIZE;<sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>enough<sp/>room<sp/>for<sp/>segment<sp/>overhead<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4308"><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;topsize<sp/>&gt;<sp/>pad)<sp/>{</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Shrink<sp/>top<sp/>space<sp/>in<sp/>granularity-size<sp/>units,<sp/>keeping<sp/>at<sp/>least<sp/>one<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>unit<sp/>=<sp/>mparams.granularity;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extra<sp/>=<sp/>((m-&gt;topsize<sp/>-<sp/>pad<sp/>+<sp/>(unit<sp/>-<sp/>SIZE_T_ONE))<sp/>/<sp/>unit<sp/>-</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE_T_ONE)<sp/>*<sp/>unit;</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>segment_holding(m,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)m-&gt;top);</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_extern_segment(sp))<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped_segment(sp))<sp/>{</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_MMAP<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;size<sp/>&gt;=<sp/>extra<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!has_segment_link(m,<sp/>sp))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>can&apos;t<sp/>shrink<sp/>if<sp/>pinned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>sp-&gt;size<sp/>-<sp/>extra;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)newsize;<sp/></highlight><highlight class="comment">/*<sp/>placate<sp/>people<sp/>compiling<sp/>-Wunused-variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prefer<sp/>mremap,<sp/>fall<sp/>back<sp/>to<sp/>munmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CALL_MREMAP(sp-&gt;base,<sp/>sp-&gt;size,<sp/>newsize,<sp/>0)<sp/>!=<sp/>MFAIL)<sp/>||</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CALL_MUNMAP(sp-&gt;base<sp/>+<sp/>newsize,<sp/>extra)<sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>released<sp/>=<sp/>extra;</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_MORECORE)<sp/>{</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extra<sp/>&gt;=<sp/>HALF_MAX_SIZE_T)<sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>wrapping<sp/>negative<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>=<sp/>(HALF_MAX_SIZE_T)<sp/>+<sp/>SIZE_T_ONE<sp/>-<sp/>unit;</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ACQUIRE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>end<sp/>of<sp/>memory<sp/>is<sp/>where<sp/>we<sp/>last<sp/>set<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>old_br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(0));</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_br<sp/>==<sp/>sp-&gt;base<sp/>+<sp/>sp-&gt;size)<sp/>{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rel_br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(-extra));</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>new_br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MORECORE(0));</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rel_br<sp/>!=<sp/>CMFAIL<sp/>&amp;&amp;<sp/>new_br<sp/>&lt;<sp/>old_br)</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>released<sp/>=<sp/>old_br<sp/>-<sp/>new_br;</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RELEASE_MALLOC_GLOBAL_LOCK();</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(released<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sp-&gt;size<sp/>-=<sp/>released;</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;footprint<sp/>-=<sp/>released;</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_top(m,<sp/>m-&gt;top,<sp/>m-&gt;topsize<sp/>-<sp/>released);</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_top_chunk(m,<sp/>m-&gt;top);</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unmap<sp/>any<sp/>unused<sp/>mmapped<sp/>segments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAVE_MMAP)</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>released<sp/>+=<sp/>release_unused_segments(m);</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>On<sp/>failure,<sp/>disable<sp/>autotrim<sp/>to<sp/>avoid<sp/>repeated<sp/>failed<sp/>future<sp/>calls<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(released<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>m-&gt;topsize<sp/>&gt;<sp/>m-&gt;trim_check)</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;trim_check<sp/>=<sp/>MAX_SIZE_T;</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"></highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(released<sp/>!=<sp/>0)?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"></highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Consolidate<sp/>and<sp/>bin<sp/>a<sp/>chunk.<sp/>Differs<sp/>from<sp/>exported<sp/>versions</highlight></codeline>
<codeline lineno="4369"><highlight class="comment"><sp/><sp/><sp/>of<sp/>free<sp/>mainly<sp/>in<sp/>that<sp/>the<sp/>chunk<sp/>need<sp/>not<sp/>be<sp/>marked<sp/>as<sp/>inuse.</highlight></codeline>
<codeline lineno="4370"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dispose_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize)<sp/>{</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>chunk_plus_offset(p,<sp/>psize);</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pinuse(p))<sp/>{</highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>prev;</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prevsize<sp/>=<sp/>p-&gt;prev_foot;</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped(p))<sp/>{</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>prevsize<sp/>+<sp/>MMAP_FOOT_PAD;</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CALL_MUNMAP((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p<sp/>-<sp/>prevsize,<sp/>psize)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;footprint<sp/>-=<sp/>psize;</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/>chunk_minus_offset(p,<sp/>prevsize);</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>prevsize;</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(m,<sp/>prev)))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>backward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>m-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(m,<sp/>p,<sp/>prevsize);</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((next-&gt;head<sp/>&amp;<sp/>INUSE_BITS)<sp/>==<sp/>INUSE_BITS)<sp/>{</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_free_with_pinuse(p,<sp/>psize,<sp/>next);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(m);</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(m,<sp/>next)))<sp/>{</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cinuse(next))<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>forward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>m-&gt;top)<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>m-&gt;topsize<sp/>+=<sp/>psize;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;top<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;head<sp/>=<sp/>tsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>m-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>m-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize<sp/>=<sp/>m-&gt;dvsize<sp/>+=<sp/>psize;</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dv<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>dsize);</highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsize<sp/>=<sp/>chunksize(next);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>nsize;</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(m,<sp/>next,<sp/>nsize);</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>psize);</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>m-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_free_with_pinuse(p,<sp/>psize,<sp/>next);</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/>insert_chunk(m,<sp/>p,<sp/>psize);</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(m);</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"></highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>malloc<sp/>---------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>allocate<sp/>a<sp/>large<sp/>request<sp/>from<sp/>the<sp/>best<sp/>fitting<sp/>chunk<sp/>in<sp/>a<sp/>treebin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tmalloc_large(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>tchunkptr<sp/>v<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>-nb;<sp/></highlight><highlight class="comment">/*<sp/>Unsigned<sp/>negation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>tchunkptr<sp/>t;</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/>bindex_t<sp/>idx;</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/>compute_tree_index(nb,<sp/>idx);</highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((t<sp/>=<sp/>*treebin_at(m,<sp/>idx))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Traverse<sp/>tree<sp/>for<sp/>this<sp/>bin<sp/>looking<sp/>for<sp/>node<sp/>with<sp/>size<sp/>==<sp/>nb<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizebits<sp/>=<sp/>nb<sp/>&lt;&lt;<sp/>leftshift_for_tree_index(idx);</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/>tchunkptr<sp/>rst<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>deepest<sp/>untaken<sp/>right<sp/>subtree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>rt;</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trem<sp/>=<sp/>chunksize(t)<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trem<sp/>&lt;<sp/>rsize)<sp/>{</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rsize<sp/>=<sp/>trem)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rt<sp/>=<sp/>t-&gt;child[1];</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t-&gt;child[(sizebits<sp/>&gt;&gt;<sp/>(SIZE_T_BITSIZE-SIZE_T_ONE))<sp/>&amp;<sp/>1];</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rt<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>rt<sp/>!=<sp/>t)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rst<sp/>=<sp/>rt;</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>rst;<sp/></highlight><highlight class="comment">/*<sp/>set<sp/>t<sp/>to<sp/>least<sp/>subtree<sp/>holding<sp/>sizes<sp/>&gt;<sp/>nb<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sizebits<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>v<sp/>==<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>set<sp/>t<sp/>to<sp/>root<sp/>of<sp/>next<sp/>non-empty<sp/>treebin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/>binmap_t<sp/>leftbits<sp/>=<sp/>left_bits(idx2bit(idx))<sp/>&amp;<sp/>m-&gt;treemap;</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(leftbits<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindex_t<sp/>i;</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>leastbit<sp/>=<sp/>least_bit(leftbits);</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compute_bit2idx(leastbit,<sp/>i);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>*treebin_at(m,<sp/>i);</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>find<sp/>smallest<sp/>of<sp/>tree<sp/>or<sp/>subtree<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trem<sp/>=<sp/>chunksize(t)<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trem<sp/>&lt;<sp/>rsize)<sp/>{</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rsize<sp/>=<sp/>trem;</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>leftmost_child(t);</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"></highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>If<sp/>dv<sp/>is<sp/>a<sp/>better<sp/>fit,<sp/>return<sp/>0<sp/>so<sp/>malloc<sp/>will<sp/>use<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>rsize<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(m-&gt;dvsize<sp/>-<sp/>nb))<sp/>{</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(m,<sp/>v)))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>split<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>chunk_plus_offset(v,<sp/>nb);</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(chunksize(v)<sp/>==<sp/>rsize<sp/>+<sp/>nb);</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_next(v,<sp/>r)))<sp/>{</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_large_chunk(m,<sp/>v);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsize<sp/>&lt;<sp/>MIN_CHUNK_SIZE)</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(m,<sp/>v,<sp/>(rsize<sp/>+<sp/>nb));</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>v,<sp/>nb);</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_chunk(m,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunk2mem(v);</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(m);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>allocate<sp/>a<sp/>small<sp/>request<sp/>from<sp/>the<sp/>best<sp/>fitting<sp/>chunk<sp/>in<sp/>a<sp/>treebin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>tmalloc_small(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/>tchunkptr<sp/>t,<sp/>v;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/>bindex_t<sp/>i;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/>binmap_t<sp/>leastbit<sp/>=<sp/>least_bit(m-&gt;treemap);</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/>compute_bit2idx(leastbit,<sp/>i);</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/>v<sp/>=<sp/>t<sp/>=<sp/>*treebin_at(m,<sp/>i);</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/>rsize<sp/>=<sp/>chunksize(t)<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"></highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((t<sp/>=<sp/>leftmost_child(t))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trem<sp/>=<sp/>chunksize(t)<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(trem<sp/>&lt;<sp/>rsize)<sp/>{</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rsize<sp/>=<sp/>trem;</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4529"><highlight class="normal"></highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(m,<sp/>v)))<sp/>{</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>chunk_plus_offset(v,<sp/>nb);</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(chunksize(v)<sp/>==<sp/>rsize<sp/>+<sp/>nb);</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_next(v,<sp/>r)))<sp/>{</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>unlink_large_chunk(m,<sp/>v);</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsize<sp/>&lt;<sp/>MIN_CHUNK_SIZE)</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(m,<sp/>v,<sp/>(rsize<sp/>+<sp/>nb));</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>v,<sp/>nb);</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace_dv(m,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunk2mem(v);</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/>CORRUPTION_ERROR_ACTION(m);</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight></codeline>
<codeline lineno="4551"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlmalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Basic<sp/>algorithm:</highlight></codeline>
<codeline lineno="4555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>small<sp/>request<sp/>(&lt;<sp/>256<sp/>bytes<sp/>minus<sp/>per-chunk<sp/>overhead):</highlight></codeline>
<codeline lineno="4556"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>If<sp/>one<sp/>exists,<sp/>use<sp/>a<sp/>remainderless<sp/>chunk<sp/>in<sp/>associated<sp/>smallbin.</highlight></codeline>
<codeline lineno="4557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Remainderless<sp/>means<sp/>that<sp/>there<sp/>are<sp/>too<sp/>few<sp/>excess<sp/>bytes<sp/>to</highlight></codeline>
<codeline lineno="4558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>represent<sp/>as<sp/>a<sp/>chunk.)</highlight></codeline>
<codeline lineno="4559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>If<sp/>it<sp/>is<sp/>big<sp/>enough,<sp/>use<sp/>the<sp/>dv<sp/>chunk,<sp/>which<sp/>is<sp/>normally<sp/>the</highlight></codeline>
<codeline lineno="4560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk<sp/>adjacent<sp/>to<sp/>the<sp/>one<sp/>used<sp/>for<sp/>the<sp/>most<sp/>recent<sp/>small<sp/>request.</highlight></codeline>
<codeline lineno="4561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>If<sp/>one<sp/>exists,<sp/>split<sp/>the<sp/>smallest<sp/>available<sp/>chunk<sp/>in<sp/>a<sp/>bin,</highlight></codeline>
<codeline lineno="4562"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saving<sp/>remainder<sp/>in<sp/>dv.</highlight></codeline>
<codeline lineno="4563"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>If<sp/>it<sp/>is<sp/>big<sp/>enough,<sp/>use<sp/>the<sp/>top<sp/>chunk.</highlight></codeline>
<codeline lineno="4564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>If<sp/>available,<sp/>get<sp/>memory<sp/>from<sp/>system<sp/>and<sp/>use<sp/>it</highlight></codeline>
<codeline lineno="4565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Otherwise,<sp/>for<sp/>a<sp/>large<sp/>request:</highlight></codeline>
<codeline lineno="4566"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.<sp/>Find<sp/>the<sp/>smallest<sp/>available<sp/>binned<sp/>chunk<sp/>that<sp/>fits,<sp/>and<sp/>use<sp/>it</highlight></codeline>
<codeline lineno="4567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>it<sp/>is<sp/>better<sp/>fitting<sp/>than<sp/>dv<sp/>chunk,<sp/>splitting<sp/>if<sp/>necessary.</highlight></codeline>
<codeline lineno="4568"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.<sp/>If<sp/>better<sp/>fitting<sp/>than<sp/>any<sp/>binned<sp/>chunk,<sp/>use<sp/>the<sp/>dv<sp/>chunk.</highlight></codeline>
<codeline lineno="4569"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.<sp/>If<sp/>it<sp/>is<sp/>big<sp/>enough,<sp/>use<sp/>the<sp/>top<sp/>chunk.</highlight></codeline>
<codeline lineno="4570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.<sp/>If<sp/>request<sp/>size<sp/>&gt;=<sp/>mmap<sp/>threshold,<sp/>try<sp/>to<sp/>directly<sp/>mmap<sp/>this<sp/>chunk.</highlight></codeline>
<codeline lineno="4571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.<sp/>If<sp/>available,<sp/>get<sp/>memory<sp/>from<sp/>system<sp/>and<sp/>use<sp/>it</highlight></codeline>
<codeline lineno="4572"><highlight class="comment"></highlight></codeline>
<codeline lineno="4573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>ugly<sp/>goto&apos;s<sp/>here<sp/>ensure<sp/>that<sp/>postaction<sp/>occurs<sp/>along<sp/>all<sp/>paths.</highlight></codeline>
<codeline lineno="4574"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_LOCKS</highlight></codeline>
<codeline lineno="4577"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>ensure_initialization();<sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>in<sp/>sys_alloc<sp/>if<sp/>not<sp/>using<sp/>locks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="4579"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(gm))<sp/>{</highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem;</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb;</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&lt;=<sp/>MAX_SMALL_REQUEST)<sp/>{</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindex_t<sp/>idx;</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>smallbits;</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>(bytes<sp/>&lt;<sp/>MIN_REQUEST)?<sp/>MIN_CHUNK_SIZE<sp/>:<sp/>pad_request(bytes);</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>small_index(nb);</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>smallbits<sp/>=<sp/>gm-&gt;smallmap<sp/>&gt;&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((smallbits<sp/>&amp;<sp/>0x3U)<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Remainderless<sp/>fit<sp/>to<sp/>a<sp/>smallbin.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>b,<sp/>p;</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>+=<sp/>~smallbits<sp/>&amp;<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Uses<sp/>next<sp/>bin<sp/>if<sp/>idx<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>smallbin_at(gm,<sp/>idx);</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>b-&gt;fd;</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(chunksize(p)<sp/>==<sp/>small_index2size(idx));</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_first_small_chunk(gm,<sp/>b,<sp/>p,<sp/>idx);</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(gm,<sp/>p,<sp/>small_index2size(idx));</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(gm,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&gt;<sp/>gm-&gt;dvsize)<sp/>{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallbits<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>chunk<sp/>in<sp/>next<sp/>nonempty<sp/>smallbin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>b,<sp/>p,<sp/>r;</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize;</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindex_t<sp/>i;</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>leftbits<sp/>=<sp/>(smallbits<sp/>&lt;&lt;<sp/>idx)<sp/>&amp;<sp/>left_bits(idx2bit(idx));</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>leastbit<sp/>=<sp/>least_bit(leftbits);</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_bit2idx(leastbit,<sp/>i);</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>smallbin_at(gm,<sp/>i);</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>b-&gt;fd;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(chunksize(p)<sp/>==<sp/>small_index2size(i));</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_first_small_chunk(gm,<sp/>b,<sp/>p,<sp/>i);</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsize<sp/>=<sp/>small_index2size(i)<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fit<sp/>here<sp/>cannot<sp/>be<sp/>remainderless<sp/>if<sp/>4byte<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SIZE_T_SIZE<sp/>!=<sp/>4<sp/>&amp;&amp;<sp/>rsize<sp/>&lt;<sp/>MIN_CHUNK_SIZE)</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(gm,<sp/>p,<sp/>small_index2size(i));</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(gm,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace_dv(gm,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(gm,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gm-&gt;treemap<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(mem<sp/>=<sp/>tmalloc_small(gm,<sp/>nb))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(gm,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST)</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>MAX_SIZE_T;<sp/></highlight><highlight class="comment">/*<sp/>Too<sp/>big<sp/>to<sp/>allocate.<sp/>Force<sp/>failure<sp/>(in<sp/>sys<sp/>alloc)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>pad_request(bytes);</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gm-&gt;treemap<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(mem<sp/>=<sp/>tmalloc_large(gm,<sp/>nb))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(gm,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&lt;=<sp/>gm-&gt;dvsize)<sp/>{</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>gm-&gt;dvsize<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>gm-&gt;dv;</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsize<sp/>&gt;=<sp/>MIN_CHUNK_SIZE)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>split<sp/>dv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>gm-&gt;dv<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gm-&gt;dvsize<sp/>=<sp/>rsize;</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(gm,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>exhaust<sp/>dv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dvs<sp/>=<sp/>gm-&gt;dvsize;</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gm-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gm-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(gm,<sp/>p,<sp/>dvs);</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(gm,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&lt;<sp/>gm-&gt;topsize)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>top<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>gm-&gt;topsize<sp/>-=<sp/>nb;</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>gm-&gt;top;</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>gm-&gt;top<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;head<sp/>=<sp/>rsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(gm,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_top_chunk(gm,<sp/>gm-&gt;top);</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(gm,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>sys_alloc(gm,<sp/>nb);</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"></highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/>postaction:</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(gm);</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----------------------------<sp/>free<sp/>---------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"></highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dlfree(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem)<sp/>{</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Consolidate<sp/>freed<sp/>chunks<sp/>with<sp/>preceeding<sp/>or<sp/>succeeding<sp/>bordering</highlight></codeline>
<codeline lineno="4693"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>free<sp/>chunks,<sp/>if<sp/>they<sp/>exist,<sp/>and<sp/>then<sp/>place<sp/>in<sp/>a<sp/>bin.<sp/><sp/>Intermixed</highlight></codeline>
<codeline lineno="4694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>with<sp/>special<sp/>cases<sp/>for<sp/>top,<sp/>dv,<sp/>mmapped<sp/>chunks,<sp/>and<sp/>usage<sp/>errors.</highlight></codeline>
<codeline lineno="4695"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/><sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FOOTERS</highlight></codeline>
<codeline lineno="4700"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>fm<sp/>=<sp/>get_mstate_for(p);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(fm))<sp/>{</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(fm,<sp/>p);</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="4706"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>fm<sp/>gm</highlight></codeline>
<codeline lineno="4707"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="4708"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(fm))<sp/>{</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(fm,<sp/>p);</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(fm,<sp/>p)<sp/>&amp;&amp;<sp/>ok_inuse(p)))<sp/>{</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>chunk_plus_offset(p,<sp/>psize);</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pinuse(p))<sp/>{</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prevsize<sp/>=<sp/>p-&gt;prev_foot;</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped(p))<sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>prevsize<sp/>+<sp/>MMAP_FOOT_PAD;</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CALL_MUNMAP((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p<sp/>-<sp/>prevsize,<sp/>psize)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;footprint<sp/>-=<sp/>psize;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>prev<sp/>=<sp/>chunk_minus_offset(p,<sp/>prevsize);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>prevsize;</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(fm,<sp/>prev)))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>backward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(fm,<sp/>p,<sp/>prevsize);</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((next-&gt;head<sp/>&amp;<sp/>INUSE_BITS)<sp/>==<sp/>INUSE_BITS)<sp/>{</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dvsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_free_with_pinuse(p,<sp/>psize,<sp/>next);</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>erroraction;</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_next(p,<sp/>next)<sp/>&amp;&amp;<sp/>ok_pinuse(next)))<sp/>{</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cinuse(next))<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>forward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>fm-&gt;top)<sp/>{</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>fm-&gt;topsize<sp/>+=<sp/>psize;</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;top<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;head<sp/>=<sp/>tsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_trim(fm,<sp/>tsize))</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_trim(fm,<sp/>0);</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize<sp/>=<sp/>fm-&gt;dvsize<sp/>+=<sp/>psize;</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dv<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>dsize);</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsize<sp/>=<sp/>chunksize(next);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>nsize;</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(fm,<sp/>next,<sp/>nsize);</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>psize);</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dvsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_free_with_pinuse(p,<sp/>psize,<sp/>next);</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"></highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small(psize))<sp/>{</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_small_chunk(fm,<sp/>p,<sp/>psize);</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_free_chunk(fm,<sp/>p);</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>tp<sp/>=<sp/>(tchunkptr)p;</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_large_chunk(fm,<sp/>tp,<sp/>psize);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_free_chunk(fm,<sp/>p);</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--fm-&gt;release_checks<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_unused_segments(fm);</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/>erroraction:</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(fm,<sp/>p);</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/>postaction:</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(fm);</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FOOTERS</highlight></codeline>
<codeline lineno="4795"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>fm</highlight></codeline>
<codeline lineno="4796"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="4797"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlcalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size)<sp/>{</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>req<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_elements<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/>req<sp/>=<sp/>n_elements<sp/>*<sp/>elem_size;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((n_elements<sp/>|<sp/>elem_size)<sp/>&amp;<sp/>~(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0xffff)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(req<sp/>/<sp/>n_elements<sp/>!=<sp/>elem_size))</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>MAX_SIZE_T;<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>downstream<sp/>failure<sp/>on<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/>mem<sp/>=<sp/>dlmalloc(req);</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>calloc_must_clear(mem2chunk(mem)))</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(mem,<sp/>0,<sp/>req);</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="4815"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------<sp/>Internal<sp/>support<sp/>for<sp/>realloc,<sp/>memalign,<sp/>etc<sp/>--------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>realloc;<sp/>only<sp/>in-place<sp/>unless<sp/>can_move<sp/>true<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>mchunkptr<sp/>try_realloc_chunk(mstate<sp/>m,<sp/>mchunkptr<sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb,</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>can_move)<sp/>{</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldsize<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>chunk_plus_offset(p,<sp/>oldsize);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(m,<sp/>p)<sp/>&amp;&amp;<sp/>ok_inuse(p)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok_next(p,<sp/>next)<sp/>&amp;&amp;<sp/>ok_pinuse(next)))<sp/>{</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped(p))<sp/>{</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newp<sp/>=<sp/>mmap_resize(m,<sp/>p,<sp/>nb,<sp/>can_move);</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldsize<sp/>&gt;=<sp/>nb)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>already<sp/>big<sp/>enough<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>oldsize<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsize<sp/>&gt;=<sp/>MIN_CHUNK_SIZE)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>off<sp/>remainder<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispose_chunk(m,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>m-&gt;top)<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>extend<sp/>into<sp/>top<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldsize<sp/>+<sp/>m-&gt;topsize<sp/>&gt;<sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>oldsize<sp/>+<sp/>m-&gt;topsize;</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newtopsize<sp/>=<sp/>newsize<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newtop<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newtop-&gt;head<sp/>=<sp/>newtopsize<sp/>|PINUSE_BIT;</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;top<sp/>=<sp/>newtop;</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;topsize<sp/>=<sp/>newtopsize;</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>m-&gt;dv)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>extend<sp/>into<sp/>dv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dvs<sp/>=<sp/>m-&gt;dvsize;</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldsize<sp/>+<sp/>dvs<sp/>&gt;=<sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize<sp/>=<sp/>oldsize<sp/>+<sp/>dvs<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dsize<sp/>&gt;=<sp/>MIN_CHUNK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>n<sp/>=<sp/>chunk_plus_offset(r,<sp/>dsize);</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>dsize);</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear_pinuse(n);</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>dsize;</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dv<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>exhaust<sp/>dv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>oldsize<sp/>+<sp/>dvs;</highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>newsize);</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cinuse(next))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>extend<sp/>into<sp/>next<sp/>free<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nextsize<sp/>=<sp/>chunksize(next);</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldsize<sp/>+<sp/>nextsize<sp/>&gt;=<sp/>nb)<sp/>{</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>oldsize<sp/>+<sp/>nextsize<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(m,<sp/>next,<sp/>nextsize);</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsize<sp/>&lt;<sp/>MIN_CHUNK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>oldsize<sp/>+<sp/>nextsize;</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>newsize);</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispose_chunk(m,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newp<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(m,<sp/>chunk2mem(p));</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newp;</highlight></codeline>
<codeline lineno="4896"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"></highlight></codeline>
<codeline lineno="4898"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>internal_memalign(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alignment<sp/>&lt;<sp/><sp/>MIN_CHUNK_SIZE)<sp/></highlight><highlight class="comment">/*<sp/>must<sp/>be<sp/>at<sp/>least<sp/>a<sp/>minimum<sp/>chunk<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><sp/><sp/>alignment<sp/>=<sp/>MIN_CHUNK_SIZE;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((alignment<sp/>&amp;<sp/>(alignment-SIZE_T_ONE))<sp/>!=<sp/>0)<sp/>{</highlight><highlight class="comment">/*<sp/>Ensure<sp/>a<sp/>power<sp/>of<sp/>2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>MALLOC_ALIGNMENT<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>alignment)<sp/>a<sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/>alignment<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST<sp/>-<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>0)<sp/><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Test<sp/>isn&apos;t<sp/>needed<sp/>but<sp/>avoids<sp/>compiler<sp/>warning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MALLOC_FAILURE_ACTION;</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>request2size(bytes);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>req<sp/>=<sp/>nb<sp/>+<sp/>alignment<sp/>+<sp/>MIN_CHUNK_SIZE<sp/>-<sp/>CHUNK_OVERHEAD;</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>internal_malloc(m,<sp/>req);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PREACTION(m))</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(mem))<sp/>&amp;<sp/>(alignment<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>misaligned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Find<sp/>an<sp/>aligned<sp/>spot<sp/>inside<sp/>chunk.<sp/><sp/>Since<sp/>we<sp/>need<sp/>to<sp/>give</highlight></codeline>
<codeline lineno="4923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>leading<sp/>space<sp/>in<sp/>a<sp/>chunk<sp/>of<sp/>at<sp/>least<sp/>MIN_CHUNK_SIZE,<sp/>if</highlight></codeline>
<codeline lineno="4924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>first<sp/>calculation<sp/>places<sp/>us<sp/>at<sp/>a<sp/>spot<sp/>with<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="4925"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MIN_CHUNK_SIZE<sp/>leader,<sp/>we<sp/>can<sp/>move<sp/>to<sp/>the<sp/>next<sp/>aligned<sp/>spot.</highlight></codeline>
<codeline lineno="4926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>We&apos;ve<sp/>allocated<sp/>enough<sp/>total<sp/>room<sp/>so<sp/>that<sp/>this<sp/>is<sp/>always</highlight></codeline>
<codeline lineno="4927"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>possible.</highlight></codeline>
<codeline lineno="4928"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>br<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mem2chunk((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(((size_t)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mem<sp/>+<sp/>alignment<sp/>-</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SIZE_T_ONE))<sp/>&amp;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-alignment));</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pos<sp/>=<sp/>((size_t)(br<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(p))<sp/>&gt;=<sp/>MIN_CHUNK_SIZE)?</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>br<sp/>:<sp/>br+alignment;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>(mchunkptr)pos;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>leadsize<sp/>=<sp/>pos<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(p);</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>chunksize(p)<sp/>-<sp/>leadsize;</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"></highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped(p))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>For<sp/>mmapped<sp/>chunks,<sp/>just<sp/>adjust<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newp-&gt;prev_foot<sp/>=<sp/>p-&gt;prev_foot<sp/>+<sp/>leadsize;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newp-&gt;head<sp/>=<sp/>newsize;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Otherwise,<sp/>give<sp/>back<sp/>leader,<sp/>use<sp/>the<sp/>rest<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>newp,<sp/>newsize);</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>leadsize);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispose_chunk(m,<sp/>p,<sp/>leadsize);</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>newp;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Give<sp/>back<sp/>spare<sp/>room<sp/>at<sp/>the<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_mmapped(p))<sp/>{</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>nb<sp/>+<sp/>MIN_CHUNK_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>remainder_size<sp/>=<sp/>size<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>remainder<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>remainder,<sp/>remainder_size);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispose_chunk(m,<sp/>remainder,<sp/>remainder_size);</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(chunksize(p)<sp/>&gt;=<sp/>nb);</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)mem<sp/>&amp;<sp/>(alignment<sp/>-<sp/>1))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="4970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4973"><highlight class="comment"><sp/><sp/>Common<sp/>support<sp/>for<sp/>independent_X<sp/>routines,<sp/>handling</highlight></codeline>
<codeline lineno="4974"><highlight class="comment"><sp/><sp/><sp/><sp/>all<sp/>of<sp/>the<sp/>combinations<sp/>that<sp/>can<sp/>result.</highlight></codeline>
<codeline lineno="4975"><highlight class="comment"><sp/><sp/>The<sp/>opts<sp/>arg<sp/>has:</highlight></codeline>
<codeline lineno="4976"><highlight class="comment"><sp/><sp/><sp/><sp/>bit<sp/>0<sp/>set<sp/>if<sp/>all<sp/>elements<sp/>are<sp/>same<sp/>size<sp/>(using<sp/>sizes[0])</highlight></codeline>
<codeline lineno="4977"><highlight class="comment"><sp/><sp/><sp/><sp/>bit<sp/>1<sp/>set<sp/>if<sp/>elements<sp/>should<sp/>be<sp/>zeroed</highlight></codeline>
<codeline lineno="4978"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ialloc(mstate<sp/>m,</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>sizes,</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opts,</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[])<sp/>{</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"></highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>element_size;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chunksize<sp/>of<sp/>each<sp/>element,<sp/>if<sp/>all<sp/>same<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>contents_size;<sp/><sp/></highlight><highlight class="comment">/*<sp/>total<sp/>size<sp/>of<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>array_size;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>request<sp/>size<sp/>of<sp/>pointer<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/>mem;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>malloced<sp/>aggregate<sp/>space<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>corresponding<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>remainder_size;<sp/></highlight><highlight class="comment">/*<sp/>remaining<sp/>bytes<sp/>while<sp/>splitting<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/><sp/><sp/><sp/>marray;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>either<sp/>&quot;chunks&quot;<sp/>or<sp/>malloced<sp/>ptr<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>array_chunk;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chunk<sp/>for<sp/>malloced<sp/>ptr<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/>flag_t<sp/><sp/><sp/><sp/>was_enabled;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>to<sp/>disable<sp/>mmap<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>i;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"></highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>array<sp/>length,<sp/>if<sp/>needed<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chunks<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_elements<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunks;<sp/></highlight><highlight class="comment">/*<sp/>nothing<sp/>to<sp/>do<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/>marray<sp/>=<sp/>chunks;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/>array_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>empty<sp/>req,<sp/>must<sp/>still<sp/>return<sp/>chunk<sp/>representing<sp/>empty<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_elements<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)internal_malloc(m,<sp/>0);</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/>marray<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/>array_size<sp/>=<sp/>request2size(n_elements<sp/>*<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)));</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>total<sp/>element<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts<sp/>&amp;<sp/>0x1)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>all-same-size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>element_size<sp/>=<sp/>request2size(*sizes);</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/>contents_size<sp/>=<sp/>n_elements<sp/>*<sp/>element_size;</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>add<sp/>up<sp/>all<sp/>the<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>element_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/><sp/><sp/>contents_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>n_elements;<sp/>++i)</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents_size<sp/>+=<sp/>request2size(sizes[i]);</highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/>size<sp/>=<sp/>contents_size<sp/>+<sp/>array_size;</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5028"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Allocate<sp/>the<sp/>aggregate<sp/>chunk.<sp/><sp/>First<sp/>disable<sp/>direct-mmapping<sp/>so</highlight></codeline>
<codeline lineno="5029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>malloc<sp/>won&apos;t<sp/>use<sp/>it,<sp/>since<sp/>we<sp/>would<sp/>not<sp/>be<sp/>able<sp/>to<sp/>later</highlight></codeline>
<codeline lineno="5030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>free/realloc<sp/>space<sp/>internal<sp/>to<sp/>a<sp/>segregated<sp/>mmap<sp/>region.</highlight></codeline>
<codeline lineno="5031"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/>was_enabled<sp/>=<sp/>use_mmap(m);</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/>disable_mmap(m);</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/>mem<sp/>=<sp/>internal_malloc(m,<sp/>size<sp/>-<sp/>CHUNK_OVERHEAD);</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(was_enabled)</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/><sp/><sp/>enable_mmap(m);</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(PREACTION(m))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/>p<sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/>remainder_size<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/>assert(!is_mmapped(p));</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts<sp/>&amp;<sp/>0x2)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>optionally<sp/>clear<sp/>the<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/><sp/><sp/>memset((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*)mem,<sp/>0,<sp/>remainder_size<sp/>-<sp/>SIZE_T_SIZE<sp/>-<sp/>array_size);</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>not<sp/>provided,<sp/>allocate<sp/>the<sp/>pointer<sp/>array<sp/>as<sp/>final<sp/>part<sp/>of<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marray<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/>array_chunk_size;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/>array_chunk<sp/>=<sp/>chunk_plus_offset(p,<sp/>contents_size);</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/>array_chunk_size<sp/>=<sp/>remainder_size<sp/>-<sp/>contents_size;</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/>marray<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)<sp/>(chunk2mem(array_chunk));</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>array_chunk,<sp/>array_chunk_size);</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/>remainder_size<sp/>=<sp/>contents_size;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>out<sp/>elements<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/>marray[i]<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>n_elements-1)<sp/>{</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element_size<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>element_size;</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>request2size(sizes[i]);</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remainder_size<sp/>-=<sp/>size;</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>p,<sp/>size);</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>chunk_plus_offset(p,<sp/>size);</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>the<sp/>final<sp/>element<sp/>absorbs<sp/>any<sp/>overallocation<sp/>slop<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(m,<sp/>p,<sp/>remainder_size);</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>DEBUG</highlight></codeline>
<codeline lineno="5079"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(marray<sp/>!=<sp/>chunks)<sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>final<sp/>element<sp/>must<sp/>have<sp/>exactly<sp/>exhausted<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element_size<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(remainder_size<sp/>==<sp/>element_size);</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(remainder_size<sp/>==<sp/>request2size(sizes[i]));</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>mem2chunk(marray));</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>n_elements;<sp/>++i)</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>mem2chunk(marray[i]));</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5093"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>marray;</highlight></codeline>
<codeline lineno="5096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Try<sp/>to<sp/>free<sp/>all<sp/>pointers<sp/>in<sp/>the<sp/>given<sp/>array.</highlight></codeline>
<codeline lineno="5099"><highlight class="comment"><sp/><sp/><sp/>Note:<sp/>this<sp/>could<sp/>be<sp/>made<sp/>faster,<sp/>by<sp/>delaying<sp/>consolidation,</highlight></codeline>
<codeline lineno="5100"><highlight class="comment"><sp/><sp/><sp/>at<sp/>the<sp/>price<sp/>of<sp/>disabling<sp/>some<sp/>user<sp/>integrity<sp/>checks,<sp/>We</highlight></codeline>
<codeline lineno="5101"><highlight class="comment"><sp/><sp/><sp/>still<sp/>optimize<sp/>some<sp/>consolidations<sp/>by<sp/>combining<sp/>adjacent</highlight></codeline>
<codeline lineno="5102"><highlight class="comment"><sp/><sp/><sp/>chunks<sp/>before<sp/>freeing,<sp/>which<sp/>will<sp/>occur<sp/>often<sp/>if<sp/>allocated</highlight></codeline>
<codeline lineno="5103"><highlight class="comment"><sp/><sp/><sp/>with<sp/>ialloc<sp/>or<sp/>the<sp/>array<sp/>is<sp/>sorted.</highlight></codeline>
<codeline lineno="5104"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5105"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>internal_bulk_free(mstate<sp/>m,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>array[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nelem)<sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>unfreed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>a;</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>fence<sp/>=<sp/>&amp;(array[nelem]);</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(a<sp/>=<sp/>array;<sp/>a<sp/>!=<sp/>fence;<sp/>++a)<sp/>{</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FOOTERS</highlight></codeline>
<codeline lineno="5116"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_mstate_for(p)<sp/>!=<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++unfreed;</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="5121"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>p);</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(m,<sp/>p)<sp/>&amp;&amp;<sp/>ok_inuse(p)))<sp/>{</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**<sp/>b<sp/>=<sp/>a<sp/>+<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>try<sp/>to<sp/>merge<sp/>with<sp/>next<sp/>chunk<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>next_chunk(p);</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>fence<sp/>&amp;&amp;<sp/>*b<sp/>==<sp/>chunk2mem(next))<sp/>{</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newsize<sp/>=<sp/>chunksize(next)<sp/>+<sp/>psize;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse(m,<sp/>p,<sp/>newsize);</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispose_chunk(m,<sp/>p,<sp/>psize);</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CORRUPTION_ERROR_ACTION(m);</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_trim(m,<sp/>m-&gt;topsize))</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sys_trim(m,<sp/>0);</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unfreed;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Traversal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MALLOC_INSPECT_ALL</highlight></codeline>
<codeline lineno="5149"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>internal_inspect_all(mstate<sp/>m,</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*handler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>used_bytes,</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>callback_arg),</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_initialized(m))<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>top<sp/>=<sp/>m-&gt;top;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/>msegmentptr<sp/>s;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>&amp;m-&gt;seg;<sp/>s<sp/>!=<sp/>0;<sp/>s<sp/>=<sp/>s-&gt;next)<sp/>{</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>q<sp/>=<sp/>align_as_chunk(s-&gt;base);</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(segment_holds(s,<sp/>q)<sp/>&amp;&amp;<sp/>q-&gt;head<sp/>!=<sp/>FENCEPOST_HEAD)<sp/>{</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>next_chunk(q);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>chunksize(q);</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>used;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>start;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_inuse(q))<sp/>{</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/>sz<sp/>-<sp/>CHUNK_OVERHEAD;<sp/></highlight><highlight class="comment">/*<sp/>must<sp/>not<sp/>be<sp/>mmapped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>chunk2mem(q);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small(sz))<sp/>{<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>offset<sp/>by<sp/>possible<sp/>bookkeeping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)q<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__chunk" kindref="compound">malloc_chunk</ref>));</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)q<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmalloc__tree__chunk" kindref="compound">malloc_tree_chunk</ref>));</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)next)<sp/><sp/></highlight><highlight class="comment">/*<sp/>skip<sp/>if<sp/>all<sp/>space<sp/>is<sp/>bookkeeping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler(start,<sp/>next,<sp/>used,<sp/>arg);</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q<sp/>==<sp/>top)</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLOC_INSPECT_ALL<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5188"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------<sp/>Exported<sp/>realloc,<sp/>memalign,<sp/>etc<sp/>--------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!ONLY_MSPACES</highlight></codeline>
<codeline lineno="5192"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlrealloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>oldmem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldmem<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>dlmalloc(bytes);</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST)<sp/>{</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/>MALLOC_FAILURE_ACTION;</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>REALLOC_ZERO_BYTES_FREES</highlight></codeline>
<codeline lineno="5202"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/>dlfree(oldmem);</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>REALLOC_ZERO_BYTES_FREES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5206"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>request2size(bytes);</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>oldp<sp/>=<sp/>mem2chunk(oldmem);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>FOOTERS</highlight></codeline>
<codeline lineno="5210"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>gm;</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5212"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>get_mstate_for(oldp);</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(m))<sp/>{</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(m,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5218"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>try_realloc_chunk(m,<sp/>oldp,<sp/>nb,<sp/>1);</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newp<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>newp);</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(newp);</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>internal_malloc(m,<sp/>bytes);</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>chunksize(oldp)<sp/>-<sp/>overhead_for(oldp);</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(mem,<sp/>oldmem,<sp/>(oc<sp/>&lt;<sp/>bytes)?<sp/>oc<sp/>:<sp/>bytes);</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal_free(m,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="5236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlrealloc_in_place(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>oldmem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldmem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST)<sp/>{</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MALLOC_FAILURE_ACTION;</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>request2size(bytes);</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>oldp<sp/>=<sp/>mem2chunk(oldmem);</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>FOOTERS</highlight></codeline>
<codeline lineno="5248"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>gm;</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5250"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>get_mstate_for(oldp);</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(m))<sp/>{</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(m,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5256"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>try_realloc_chunk(m,<sp/>oldp,<sp/>nb,<sp/>0);</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newp<sp/>==<sp/>oldp)<sp/>{</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>newp);</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>oldmem;</highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="5267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight></codeline>
<codeline lineno="5269"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlmemalign(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alignment<sp/>&lt;=<sp/>MALLOC_ALIGNMENT)<sp/>{</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dlmalloc(bytes);</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_memalign(gm,<sp/>alignment,<sp/>bytes);</highlight></codeline>
<codeline lineno="5274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"></highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlposix_memalign(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>pp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alignment<sp/>==<sp/>MALLOC_ALIGNMENT)</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>dlmalloc(bytes);</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>alignment<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>alignment<sp/>%<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0<sp/>||<sp/>d<sp/>==<sp/>0<sp/>||<sp/>(d<sp/>&amp;<sp/>(d-SIZE_T_ONE))<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EINVAL;</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&lt;=<sp/>MAX_REQUEST<sp/>-<sp/>alignment)<sp/>{</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alignment<sp/>&lt;<sp/><sp/>MIN_CHUNK_SIZE)</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alignment<sp/>=<sp/>MIN_CHUNK_SIZE;</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>internal_memalign(gm,<sp/>alignment,<sp/>bytes);</highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ENOMEM;</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/>*pp<sp/>=<sp/>mem;</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlvalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pagesz;</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/>pagesz<sp/>=<sp/>mparams.page_size;</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dlmemalign(pagesz,<sp/>bytes);</highlight></codeline>
<codeline lineno="5304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dlpvalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pagesz;</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/>pagesz<sp/>=<sp/>mparams.page_size;</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dlmemalign(pagesz,<sp/>(bytes<sp/>+<sp/>pagesz<sp/>-<sp/>SIZE_T_ONE)<sp/>&amp;<sp/>~(pagesz<sp/>-<sp/>SIZE_T_ONE));</highlight></codeline>
<codeline lineno="5311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>dlindependent_calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size,</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[])<sp/>{</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>elem_size;<sp/></highlight><highlight class="comment">/*<sp/>serves<sp/>as<sp/>1-element<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ialloc(gm,<sp/>n_elements,<sp/>&amp;sz,<sp/>3,<sp/>chunks);</highlight></codeline>
<codeline lineno="5317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>dlindependent_comalloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizes[],</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[])<sp/>{</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ialloc(gm,<sp/>n_elements,<sp/>sizes,<sp/>0,<sp/>chunks);</highlight></codeline>
<codeline lineno="5322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlbulk_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>array[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nelem)<sp/>{</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_bulk_free(gm,<sp/>array,<sp/>nelem);</highlight></codeline>
<codeline lineno="5326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"></highlight></codeline>
<codeline lineno="5328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MALLOC_INSPECT_ALL</highlight></codeline>
<codeline lineno="5329"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dlmalloc_inspect_all(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*handler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>used_bytes,</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>callback_arg),</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(gm))<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_inspect_all(gm,<sp/>handler,<sp/>arg);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(gm);</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLOC_INSPECT_ALL<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5341"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlmalloc_trim(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pad)<sp/>{</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(gm))<sp/>{</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>sys_trim(gm,<sp/>pad);</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(gm);</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_footprint(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gm-&gt;footprint;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_max_footprint(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gm-&gt;max_footprint;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_footprint_limit(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maf<sp/>=<sp/>gm-&gt;footprint_limit;</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maf<sp/>==<sp/>0<sp/>?<sp/>MAX_SIZE_T<sp/>:<sp/>maf;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_set_footprint_limit(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result;<sp/><sp/></highlight><highlight class="comment">/*<sp/>invert<sp/>sense<sp/>of<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>granularity_align(1);<sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>minimal<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>MAX_SIZE_T)</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>granularity_align(bytes);</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gm-&gt;footprint_limit<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="5374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight></codeline>
<codeline lineno="5377"><highlight class="preprocessor"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>dlmallinfo(void)<sp/>{</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_mallinfo(gm);</highlight></codeline>
<codeline lineno="5379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5381"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5382"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLOC_STATS</highlight></codeline>
<codeline lineno="5383"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dlmalloc_stats()<sp/>{</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/>internal_malloc_stats(gm);</highlight></codeline>
<codeline lineno="5385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLOC_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5387"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5388"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dlmallopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>change_mparam(param_number,<sp/>value);</highlight></codeline>
<codeline lineno="5390"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dlmalloc_usable_size(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem)<sp/>{</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_inuse(p))</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunksize(p)<sp/>-<sp/>overhead_for(p);</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"></highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!ONLY_MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5402"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5403"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------<sp/>user<sp/>mspaces<sp/>----------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5404"><highlight class="normal"></highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MSPACES</highlight></codeline>
<codeline lineno="5406"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>mstate<sp/>init_user_mstate(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tbase,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize)<sp/>{</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msize<sp/>=<sp/>pad_request(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmalloc__state" kindref="compound">malloc_state</ref>));</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>mn;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/>mchunkptr<sp/>msp<sp/>=<sp/>align_as_chunk(tbase);</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/>mstate<sp/>m<sp/>=<sp/>(mstate)(chunk2mem(msp));</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/>memset(m,<sp/>0,<sp/>msize);</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/>(void)INITIAL_LOCK(&amp;m-&gt;mutex);</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"><sp/><sp/>msp-&gt;head<sp/>=<sp/>(msize|INUSE_BITS);</highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/>m-&gt;seg.base<sp/>=<sp/>m-&gt;least_addr<sp/>=<sp/>tbase;</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/>m-&gt;seg.size<sp/>=<sp/>m-&gt;footprint<sp/>=<sp/>m-&gt;max_footprint<sp/>=<sp/>tsize;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"><sp/><sp/>m-&gt;magic<sp/>=<sp/>mparams.magic;</highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/>m-&gt;release_checks<sp/>=<sp/>MAX_RELEASE_CHECK_RATE;</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/>m-&gt;mflags<sp/>=<sp/>mparams.default_mflags;</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/>m-&gt;extp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"><sp/><sp/>m-&gt;exts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/>disable_contiguous(m);</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/>init_bins(m);</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/>mn<sp/>=<sp/>next_chunk(mem2chunk(m));</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/>init_top(m,<sp/>mn,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)((tbase<sp/>+<sp/>tsize)<sp/>-<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)mn)<sp/>-<sp/>TOP_FOOT_SIZE);</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/>check_top_chunk(m,<sp/>m-&gt;top);</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"></highlight></codeline>
<codeline lineno="5430"><highlight class="normal">mspace<sp/>create_mspace(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked)<sp/>{</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/>mstate<sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msize;</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/>msize<sp/>=<sp/>pad_request(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmalloc__state" kindref="compound">malloc_state</ref>));</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>-(msize<sp/>+<sp/>TOP_FOOT_SIZE<sp/>+<sp/>mparams.page_size))<sp/>{</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rs<sp/>=<sp/>((capacity<sp/>==<sp/>0)?<sp/>mparams.granularity<sp/>:</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(capacity<sp/>+<sp/>TOP_FOOT_SIZE<sp/>+<sp/>msize));</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>granularity_align(rs);</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tbase<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(CALL_MMAP(tsize));</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tbase<sp/>!=<sp/>CMFAIL)<sp/>{</highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>init_user_mstate(tbase,<sp/>tsize);</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;seg.sflags<sp/>=<sp/>USE_MMAP_BIT;</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_lock(m,<sp/>locked);</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mspace)m;</highlight></codeline>
<codeline lineno="5447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal">mspace<sp/>create_mspace_with_base(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>base,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>locked)<sp/>{</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/>mstate<sp/>m<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>msize;</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"><sp/><sp/>ensure_initialization();</highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/>msize<sp/>=<sp/>pad_request(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmalloc__state" kindref="compound">malloc_state</ref>));</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity<sp/>&gt;<sp/>msize<sp/>+<sp/>TOP_FOOT_SIZE<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>capacity<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>-(msize<sp/>+<sp/>TOP_FOOT_SIZE<sp/>+<sp/>mparams.page_size))<sp/>{</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>init_user_mstate((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)base,<sp/>capacity);</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/>m-&gt;seg.sflags<sp/>=<sp/>EXTERN_BIT;</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/>set_lock(m,<sp/>locked);</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mspace)m;</highlight></codeline>
<codeline lineno="5461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"></highlight></codeline>
<codeline lineno="5463"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_track_large_chunks(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enable)<sp/>{</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(ms))<sp/>{</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!use_mmap(ms))<sp/>{</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!enable)<sp/>{</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>enable_mmap(ms);</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>disable_mmap(ms);</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(ms);</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="5478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight></codeline>
<codeline lineno="5480"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>destroy_mspace(mspace<sp/>msp)<sp/>{</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>freed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/>msegmentptr<sp/>sp<sp/>=<sp/>&amp;ms-&gt;seg;</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)DESTROY_LOCK(&amp;ms-&gt;mutex);<sp/></highlight><highlight class="comment">/*<sp/>destroy<sp/>before<sp/>unmapped<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(sp<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>base<sp/>=<sp/>sp-&gt;base;</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>sp-&gt;size;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>flag_t<sp/>flag<sp/>=<sp/>sp-&gt;sflags;</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(void)base;<sp/></highlight><highlight class="comment">/*<sp/>placate<sp/>people<sp/>compiling<sp/>-Wunused-variable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sp<sp/>=<sp/>sp-&gt;next;</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flag<sp/>&amp;<sp/>USE_MMAP_BIT)<sp/>&amp;&amp;<sp/>!(flag<sp/>&amp;<sp/>EXTERN_BIT)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CALL_MUNMAP(base,<sp/>size)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freed<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>freed;</highlight></codeline>
<codeline lineno="5501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5504"><highlight class="comment"><sp/><sp/>mspace<sp/>versions<sp/>of<sp/>routines<sp/>are<sp/>near-clones<sp/>of<sp/>the<sp/>global</highlight></codeline>
<codeline lineno="5505"><highlight class="comment"><sp/><sp/>versions.<sp/>This<sp/>is<sp/>not<sp/>so<sp/>nice<sp/>but<sp/>better<sp/>than<sp/>the<sp/>alternatives.</highlight></codeline>
<codeline lineno="5506"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_malloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(ms))<sp/>{</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem;</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb;</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&lt;=<sp/>MAX_SMALL_REQUEST)<sp/>{</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bindex_t<sp/>idx;</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>smallbits;</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>(bytes<sp/>&lt;<sp/>MIN_REQUEST)?<sp/>MIN_CHUNK_SIZE<sp/>:<sp/>pad_request(bytes);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>=<sp/>small_index(nb);</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>smallbits<sp/>=<sp/>ms-&gt;smallmap<sp/>&gt;&gt;<sp/>idx;</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((smallbits<sp/>&amp;<sp/>0x3U)<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Remainderless<sp/>fit<sp/>to<sp/>a<sp/>smallbin.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>b,<sp/>p;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>+=<sp/>~smallbits<sp/>&amp;<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Uses<sp/>next<sp/>bin<sp/>if<sp/>idx<sp/>empty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>smallbin_at(ms,<sp/>idx);</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>b-&gt;fd;</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(chunksize(p)<sp/>==<sp/>small_index2size(idx));</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_first_small_chunk(ms,<sp/>b,<sp/>p,<sp/>idx);</highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(ms,<sp/>p,<sp/>small_index2size(idx));</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(ms,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"></highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&gt;<sp/>ms-&gt;dvsize)<sp/>{</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(smallbits<sp/>!=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>chunk<sp/>in<sp/>next<sp/>nonempty<sp/>smallbin<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>b,<sp/>p,<sp/>r;</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize;</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bindex_t<sp/>i;</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>leftbits<sp/>=<sp/>(smallbits<sp/>&lt;&lt;<sp/>idx)<sp/>&amp;<sp/>left_bits(idx2bit(idx));</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binmap_t<sp/>leastbit<sp/>=<sp/>least_bit(leftbits);</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute_bit2idx(leastbit,<sp/>i);</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>smallbin_at(ms,<sp/>i);</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>b-&gt;fd;</highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(chunksize(p)<sp/>==<sp/>small_index2size(i));</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_first_small_chunk(ms,<sp/>b,<sp/>p,<sp/>i);</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rsize<sp/>=<sp/>small_index2size(i)<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fit<sp/>here<sp/>cannot<sp/>be<sp/>remainderless<sp/>if<sp/>4byte<sp/>sizes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SIZE_T_SIZE<sp/>!=<sp/>4<sp/>&amp;&amp;<sp/>rsize<sp/>&lt;<sp/>MIN_CHUNK_SIZE)</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(ms,<sp/>p,<sp/>small_index2size(i));</highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(ms,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>rsize);</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace_dv(ms,<sp/>r,<sp/>rsize);</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(ms,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"></highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ms-&gt;treemap<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(mem<sp/>=<sp/>tmalloc_small(ms,<sp/>nb))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(ms,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST)</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>MAX_SIZE_T;<sp/></highlight><highlight class="comment">/*<sp/>Too<sp/>big<sp/>to<sp/>allocate.<sp/>Force<sp/>failure<sp/>(in<sp/>sys<sp/>alloc)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nb<sp/>=<sp/>pad_request(bytes);</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ms-&gt;treemap<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(mem<sp/>=<sp/>tmalloc_large(ms,<sp/>nb))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(ms,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5579"><highlight class="normal"></highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&lt;=<sp/>ms-&gt;dvsize)<sp/>{</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>ms-&gt;dvsize<sp/>-<sp/>nb;</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>ms-&gt;dv;</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rsize<sp/>&gt;=<sp/>MIN_CHUNK_SIZE)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>split<sp/>dv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>ms-&gt;dv<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms-&gt;dvsize<sp/>=<sp/>rsize;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(r,<sp/>rsize);</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(ms,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>exhaust<sp/>dv<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dvs<sp/>=<sp/>ms-&gt;dvsize;</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_inuse_and_pinuse(ms,<sp/>p,<sp/>dvs);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(ms,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"></highlight></codeline>
<codeline lineno="5600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nb<sp/>&lt;<sp/>ms-&gt;topsize)<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>top<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rsize<sp/>=<sp/>ms-&gt;topsize<sp/>-=<sp/>nb;</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>ms-&gt;top;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>r<sp/>=<sp/>ms-&gt;top<sp/>=<sp/>chunk_plus_offset(p,<sp/>nb);</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;head<sp/>=<sp/>rsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_inuse_chunk(ms,<sp/>p,<sp/>nb);</highlight></codeline>
<codeline lineno="5606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(p);</highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_top_chunk(ms,<sp/>ms-&gt;top);</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_malloced_chunk(ms,<sp/>mem,<sp/>nb);</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"></highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>sys_alloc(ms,<sp/>nb);</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"></highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/>postaction:</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>POSTACTION(ms);</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"></highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5621"><highlight class="normal"></highlight></codeline>
<codeline lineno="5622"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_free(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem)<sp/>{</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/><sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FOOTERS</highlight></codeline>
<codeline lineno="5626"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>fm<sp/>=<sp/>get_mstate_for(p);</highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)msp;<sp/></highlight><highlight class="comment">/*<sp/>placate<sp/>people<sp/>compiling<sp/>-Wunused<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5628"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5629"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>fm<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5631"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(fm))<sp/>{</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(fm,<sp/>p);</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(fm))<sp/>{</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(fm,<sp/>p);</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(fm,<sp/>p)<sp/>&amp;&amp;<sp/>ok_inuse(p)))<sp/>{</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>psize<sp/>=<sp/>chunksize(p);</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>next<sp/>=<sp/>chunk_plus_offset(p,<sp/>psize);</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pinuse(p))<sp/>{</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>prevsize<sp/>=<sp/>p-&gt;prev_foot;</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_mmapped(p))<sp/>{</highlight></codeline>
<codeline lineno="5643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>prevsize<sp/>+<sp/>MMAP_FOOT_PAD;</highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CALL_MUNMAP((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)p<sp/>-<sp/>prevsize,<sp/>psize)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;footprint<sp/>-=<sp/>psize;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>prev<sp/>=<sp/>chunk_minus_offset(p,<sp/>prevsize);</highlight></codeline>
<codeline lineno="5650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>prevsize;</highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_address(fm,<sp/>prev)))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>backward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(fm,<sp/>p,<sp/>prevsize);</highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((next-&gt;head<sp/>&amp;<sp/>INUSE_BITS)<sp/>==<sp/>INUSE_BITS)<sp/>{</highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dvsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_free_with_pinuse(p,<sp/>psize,<sp/>next);</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>erroraction;</highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"></highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RTCHECK(ok_next(p,<sp/>next)<sp/>&amp;&amp;<sp/>ok_pinuse(next)))<sp/>{</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cinuse(next))<sp/>{<sp/><sp/></highlight><highlight class="comment">/*<sp/>consolidate<sp/>forward<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>fm-&gt;top)<sp/>{</highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tsize<sp/>=<sp/>fm-&gt;topsize<sp/>+=<sp/>psize;</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;top<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;head<sp/>=<sp/>tsize<sp/>|<sp/>PINUSE_BIT;</highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dvsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(should_trim(fm,<sp/>tsize))</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sys_trim(fm,<sp/>0);</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dsize<sp/>=<sp/>fm-&gt;dvsize<sp/>+=<sp/>psize;</highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dv<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>dsize);</highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsize<sp/>=<sp/>chunksize(next);</highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psize<sp/>+=<sp/>nsize;</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlink_chunk(fm,<sp/>next,<sp/>nsize);</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_size_and_pinuse_of_free_chunk(p,<sp/>psize);</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>fm-&gt;dv)<sp/>{</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fm-&gt;dvsize<sp/>=<sp/>psize;</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_free_with_pinuse(p,<sp/>psize,<sp/>next);</highlight></codeline>
<codeline lineno="5700"><highlight class="normal"></highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_small(psize))<sp/>{</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_small_chunk(fm,<sp/>p,<sp/>psize);</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_free_chunk(fm,<sp/>p);</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tchunkptr<sp/>tp<sp/>=<sp/>(tchunkptr)p;</highlight></codeline>
<codeline lineno="5707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insert_large_chunk(fm,<sp/>tp,<sp/>psize);</highlight></codeline>
<codeline lineno="5708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_free_chunk(fm,<sp/>p);</highlight></codeline>
<codeline lineno="5709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--fm-&gt;release_checks<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>release_unused_segments(fm);</highlight></codeline>
<codeline lineno="5711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>postaction;</highlight></codeline>
<codeline lineno="5713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5715"><highlight class="normal"><sp/><sp/><sp/><sp/>erroraction:</highlight></codeline>
<codeline lineno="5716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(fm,<sp/>p);</highlight></codeline>
<codeline lineno="5717"><highlight class="normal"><sp/><sp/><sp/><sp/>postaction:</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(fm);</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight></codeline>
<codeline lineno="5723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_calloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size)<sp/>{</highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem;</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>req<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_elements<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/>req<sp/>=<sp/>n_elements<sp/>*<sp/>elem_size;</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((n_elements<sp/>|<sp/>elem_size)<sp/>&amp;<sp/>~(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)0xffff)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(req<sp/>/<sp/>n_elements<sp/>!=<sp/>elem_size))</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>MAX_SIZE_T;<sp/></highlight><highlight class="comment">/*<sp/>force<sp/>downstream<sp/>failure<sp/>on<sp/>overflow<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/>mem<sp/>=<sp/>internal_malloc(ms,<sp/>req);</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>calloc_must_clear(mem2chunk(mem)))</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(mem,<sp/>0,<sp/>req);</highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="5741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"></highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_realloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>oldmem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldmem<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>mspace_malloc(msp,<sp/>bytes);</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST)<sp/>{</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"><sp/><sp/><sp/><sp/>MALLOC_FAILURE_ACTION;</highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>REALLOC_ZERO_BYTES_FREES</highlight></codeline>
<codeline lineno="5752"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"><sp/><sp/><sp/><sp/>mspace_free(msp,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>REALLOC_ZERO_BYTES_FREES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5756"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>request2size(bytes);</highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>oldp<sp/>=<sp/>mem2chunk(oldmem);</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>FOOTERS</highlight></codeline>
<codeline lineno="5760"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5762"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>get_mstate_for(oldp);</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(m))<sp/>{</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(m,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5768"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>try_realloc_chunk(m,<sp/>oldp,<sp/>nb,<sp/>1);</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newp<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>newp);</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>chunk2mem(newp);</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>mspace_malloc(m,<sp/>bytes);</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oc<sp/>=<sp/>chunksize(oldp)<sp/>-<sp/>overhead_for(oldp);</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(mem,<sp/>oldmem,<sp/>(oc<sp/>&lt;<sp/>bytes)?<sp/>oc<sp/>:<sp/>bytes);</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mspace_free(m,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="5786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5787"><highlight class="normal"></highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_realloc_in_place(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>oldmem,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldmem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>&gt;=<sp/>MAX_REQUEST)<sp/>{</highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MALLOC_FAILURE_ACTION;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nb<sp/>=<sp/>request2size(bytes);</highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>oldp<sp/>=<sp/>mem2chunk(oldmem);</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>FOOTERS</highlight></codeline>
<codeline lineno="5798"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5800"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstate<sp/>m<sp/>=<sp/>get_mstate_for(oldp);</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(void)msp;<sp/></highlight><highlight class="comment">/*<sp/>placate<sp/>people<sp/>compiling<sp/>-Wunused<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(m))<sp/>{</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(m,<sp/>oldmem);</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>FOOTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5807"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(m))<sp/>{</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mchunkptr<sp/>newp<sp/>=<sp/>try_realloc_chunk(m,<sp/>oldp,<sp/>nb,<sp/>0);</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(m);</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newp<sp/>==<sp/>oldp)<sp/>{</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_inuse_chunk(m,<sp/>newp);</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>oldmem;</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mem;</highlight></codeline>
<codeline lineno="5818"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"></highlight></codeline>
<codeline lineno="5820"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mspace_memalign(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alignment<sp/>&lt;=<sp/>MALLOC_ALIGNMENT)</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mspace_malloc(msp,<sp/>bytes);</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_memalign(ms,<sp/>alignment,<sp/>bytes);</highlight></codeline>
<codeline lineno="5829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>mspace_independent_calloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>elem_size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[])<sp/>{</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>elem_size;<sp/></highlight><highlight class="comment">/*<sp/>serves<sp/>as<sp/>1-element<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ialloc(ms,<sp/>n_elements,<sp/>&amp;sz,<sp/>3,<sp/>chunks);</highlight></codeline>
<codeline lineno="5840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"></highlight></codeline>
<codeline lineno="5842"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>mspace_independent_comalloc(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_elements,</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizes[],<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>chunks[])<sp/>{</highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ialloc(ms,<sp/>n_elements,<sp/>sizes,<sp/>0,<sp/>chunks);</highlight></codeline>
<codeline lineno="5850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"></highlight></codeline>
<codeline lineno="5852"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_bulk_free(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>array[],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nelem)<sp/>{</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_bulk_free((mstate)msp,<sp/>array,<sp/>nelem);</highlight></codeline>
<codeline lineno="5854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"></highlight></codeline>
<codeline lineno="5856"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>MALLOC_INSPECT_ALL</highlight></codeline>
<codeline lineno="5857"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_inspect_all(mspace<sp/>msp,</highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*handler)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*start,</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*end,</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>used_bytes,</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>callback_arg),</highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(ms))<sp/>{</highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal_inspect_all(ms,<sp/>handler,<sp/>arg);</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(ms);</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MALLOC_INSPECT_ALL<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5875"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5876"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_trim(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pad)<sp/>{</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!PREACTION(ms))<sp/>{</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>sys_trim(ms,<sp/>pad);</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>POSTACTION(ms);</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5890"><highlight class="normal"></highlight></codeline>
<codeline lineno="5891"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLOC_STATS</highlight></codeline>
<codeline lineno="5892"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mspace_malloc_stats(mspace<sp/>msp)<sp/>{</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"><sp/><sp/><sp/><sp/>internal_malloc_stats(ms);</highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5900"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5901"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLOC_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5902"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_footprint(mspace<sp/>msp)<sp/>{</highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>ms-&gt;footprint;</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5913"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"></highlight></codeline>
<codeline lineno="5915"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_max_footprint(mspace<sp/>msp)<sp/>{</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>ms-&gt;max_footprint;</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"></highlight></codeline>
<codeline lineno="5927"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_footprint_limit(mspace<sp/>msp)<sp/>{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maf<sp/>=<sp/>ms-&gt;footprint_limit;</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>(maf<sp/>==<sp/>0)<sp/>?<sp/>MAX_SIZE_T<sp/>:<sp/>maf;</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight></codeline>
<codeline lineno="5940"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_set_footprint_limit(mspace<sp/>msp,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>granularity_align(1);<sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>minimal<sp/>size<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes<sp/>==<sp/>MAX_SIZE_T)</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>granularity_align(bytes);</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"><sp/><sp/><sp/><sp/>ms-&gt;footprint_limit<sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="5956"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5957"><highlight class="normal"></highlight></codeline>
<codeline lineno="5958"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NO_MALLINFO</highlight></codeline>
<codeline lineno="5959"><highlight class="preprocessor"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmallinfo" kindref="compound">mallinfo</ref><sp/>mspace_mallinfo(mspace<sp/>msp)<sp/>{</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/>mstate<sp/>ms<sp/>=<sp/>(mstate)msp;</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok_magic(ms))<sp/>{</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/>USAGE_ERROR_ACTION(ms,ms);</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal_mallinfo(ms);</highlight></codeline>
<codeline lineno="5965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NO_MALLINFO<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5967"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5968"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mspace_usable_size(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mem)<sp/>{</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/>mchunkptr<sp/>p<sp/>=<sp/>mem2chunk(mem);</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_inuse(p))</highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chunksize(p)<sp/>-<sp/>overhead_for(p);</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="5975"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5976"><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mspace_mallopt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>param_number,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="5978"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>change_mparam(param_number,<sp/>value);</highlight></codeline>
<codeline lineno="5979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5980"><highlight class="normal"></highlight></codeline>
<codeline lineno="5981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>MSPACES<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="5982"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5983"><highlight class="normal"></highlight></codeline>
<codeline lineno="5984"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--------------------<sp/>Alternative<sp/>MORECORE<sp/>functions<sp/>-------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5985"><highlight class="normal"></highlight></codeline>
<codeline lineno="5986"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="5987"><highlight class="comment"><sp/><sp/>Guidelines<sp/>for<sp/>creating<sp/>a<sp/>custom<sp/>version<sp/>of<sp/>MORECORE:</highlight></codeline>
<codeline lineno="5988"><highlight class="comment"></highlight></codeline>
<codeline lineno="5989"><highlight class="comment"><sp/><sp/>*<sp/>For<sp/>best<sp/>performance,<sp/>MORECORE<sp/>should<sp/>allocate<sp/>in<sp/>multiples<sp/>of<sp/>pagesize.</highlight></codeline>
<codeline lineno="5990"><highlight class="comment"><sp/><sp/>*<sp/>MORECORE<sp/>may<sp/>allocate<sp/>more<sp/>memory<sp/>than<sp/>requested.<sp/>(Or<sp/>even<sp/>less,</highlight></codeline>
<codeline lineno="5991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>this<sp/>will<sp/>usually<sp/>result<sp/>in<sp/>a<sp/>malloc<sp/>failure.)</highlight></codeline>
<codeline lineno="5992"><highlight class="comment"><sp/><sp/>*<sp/>MORECORE<sp/>must<sp/>not<sp/>allocate<sp/>memory<sp/>when<sp/>given<sp/>argument<sp/>zero,<sp/>but</highlight></codeline>
<codeline lineno="5993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>instead<sp/>return<sp/>one<sp/>past<sp/>the<sp/>end<sp/>address<sp/>of<sp/>memory<sp/>from<sp/>previous</highlight></codeline>
<codeline lineno="5994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>nonzero<sp/>call.</highlight></codeline>
<codeline lineno="5995"><highlight class="comment"><sp/><sp/>*<sp/>For<sp/>best<sp/>performance,<sp/>consecutive<sp/>calls<sp/>to<sp/>MORECORE<sp/>with<sp/>positive</highlight></codeline>
<codeline lineno="5996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>arguments<sp/>should<sp/>return<sp/>increasing<sp/>addresses,<sp/>indicating<sp/>that</highlight></codeline>
<codeline lineno="5997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>space<sp/>has<sp/>been<sp/>contiguously<sp/>extended.</highlight></codeline>
<codeline lineno="5998"><highlight class="comment"><sp/><sp/>*<sp/>Even<sp/>though<sp/>consecutive<sp/>calls<sp/>to<sp/>MORECORE<sp/>need<sp/>not<sp/>return<sp/>contiguous</highlight></codeline>
<codeline lineno="5999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>addresses,<sp/>it<sp/>must<sp/>be<sp/>OK<sp/>for<sp/>malloc&apos;ed<sp/>chunks<sp/>to<sp/>span<sp/>multiple</highlight></codeline>
<codeline lineno="6000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>regions<sp/>in<sp/>those<sp/>cases<sp/>where<sp/>they<sp/>do<sp/>happen<sp/>to<sp/>be<sp/>contiguous.</highlight></codeline>
<codeline lineno="6001"><highlight class="comment"><sp/><sp/>*<sp/>MORECORE<sp/>need<sp/>not<sp/>handle<sp/>negative<sp/>arguments<sp/>--<sp/>it<sp/>may<sp/>instead</highlight></codeline>
<codeline lineno="6002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>just<sp/>return<sp/>MFAIL<sp/>when<sp/>given<sp/>negative<sp/>arguments.</highlight></codeline>
<codeline lineno="6003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Negative<sp/>arguments<sp/>are<sp/>always<sp/>multiples<sp/>of<sp/>pagesize.<sp/>MORECORE</highlight></codeline>
<codeline lineno="6004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>not<sp/>misinterpret<sp/>negative<sp/>args<sp/>as<sp/>large<sp/>positive<sp/>unsigned</highlight></codeline>
<codeline lineno="6005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>args.<sp/>You<sp/>can<sp/>suppress<sp/>all<sp/>such<sp/>calls<sp/>from<sp/>even<sp/>occurring<sp/>by<sp/>defining</highlight></codeline>
<codeline lineno="6006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>MORECORE_CANNOT_TRIM,</highlight></codeline>
<codeline lineno="6007"><highlight class="comment"></highlight></codeline>
<codeline lineno="6008"><highlight class="comment"><sp/><sp/>As<sp/>an<sp/>example<sp/>alternative<sp/>MORECORE,<sp/>here<sp/>is<sp/>a<sp/>custom<sp/>allocator</highlight></codeline>
<codeline lineno="6009"><highlight class="comment"><sp/><sp/>kindly<sp/>contributed<sp/>for<sp/>pre-OSX<sp/>macOS.<sp/><sp/>It<sp/>uses<sp/>virtually<sp/>but<sp/>not</highlight></codeline>
<codeline lineno="6010"><highlight class="comment"><sp/><sp/>necessarily<sp/>physically<sp/>contiguous<sp/>non-paged<sp/>memory<sp/>(locked<sp/>in,</highlight></codeline>
<codeline lineno="6011"><highlight class="comment"><sp/><sp/>present<sp/>and<sp/>won&apos;t<sp/>get<sp/>swapped<sp/>out).<sp/><sp/>You<sp/>can<sp/>use<sp/>it<sp/>by<sp/>uncommenting</highlight></codeline>
<codeline lineno="6012"><highlight class="comment"><sp/><sp/>this<sp/>section,<sp/>adding<sp/>some<sp/>#includes,<sp/>and<sp/>setting<sp/>up<sp/>the<sp/>appropriate</highlight></codeline>
<codeline lineno="6013"><highlight class="comment"><sp/><sp/>defines<sp/>above:</highlight></codeline>
<codeline lineno="6014"><highlight class="comment"></highlight></codeline>
<codeline lineno="6015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>MORECORE<sp/>osMoreCore</highlight></codeline>
<codeline lineno="6016"><highlight class="comment"></highlight></codeline>
<codeline lineno="6017"><highlight class="comment"><sp/><sp/>There<sp/>is<sp/>also<sp/>a<sp/>shutdown<sp/>routine<sp/>that<sp/>should<sp/>somehow<sp/>be<sp/>called<sp/>for</highlight></codeline>
<codeline lineno="6018"><highlight class="comment"><sp/><sp/>cleanup<sp/>upon<sp/>program<sp/>exit.</highlight></codeline>
<codeline lineno="6019"><highlight class="comment"></highlight></codeline>
<codeline lineno="6020"><highlight class="comment"><sp/><sp/>#define<sp/>MAX_POOL_ENTRIES<sp/>100</highlight></codeline>
<codeline lineno="6021"><highlight class="comment"><sp/><sp/>#define<sp/>MINIMUM_MORECORE_SIZE<sp/><sp/>(64<sp/>*<sp/>1024U)</highlight></codeline>
<codeline lineno="6022"><highlight class="comment"><sp/><sp/>static<sp/>int<sp/>next_os_pool;</highlight></codeline>
<codeline lineno="6023"><highlight class="comment"><sp/><sp/>void<sp/>*our_os_pools[MAX_POOL_ENTRIES];</highlight></codeline>
<codeline lineno="6024"><highlight class="comment"></highlight></codeline>
<codeline lineno="6025"><highlight class="comment"><sp/><sp/>void<sp/>*osMoreCore(int<sp/>size)</highlight></codeline>
<codeline lineno="6026"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6027"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>*ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6028"><highlight class="comment"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>*sbrk_top<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6029"><highlight class="comment"></highlight></codeline>
<codeline lineno="6030"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(size<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="6031"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(size<sp/>&lt;<sp/>MINIMUM_MORECORE_SIZE)</highlight></codeline>
<codeline lineno="6033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>MINIMUM_MORECORE_SIZE;</highlight></codeline>
<codeline lineno="6034"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(CurrentExecutionLevel()<sp/>==<sp/>kTaskLevel)</highlight></codeline>
<codeline lineno="6035"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>PoolAllocateResident(size<sp/>+<sp/>RM_PAGE_SIZE,<sp/>0);</highlight></codeline>
<codeline lineno="6036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ptr<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="6037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(void<sp/>*)<sp/>MFAIL;</highlight></codeline>
<codeline lineno="6039"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6040"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>save<sp/>ptrs<sp/>so<sp/>they<sp/>can<sp/>be<sp/>freed<sp/>during<sp/>cleanup</highlight></codeline>
<codeline lineno="6041"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>our_os_pools[next_os_pool]<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="6042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>next_os_pool++;</highlight></codeline>
<codeline lineno="6043"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(void<sp/>*)<sp/>((((size_t)<sp/>ptr)<sp/>+<sp/>RM_PAGE_MASK)<sp/>&amp;<sp/>~RM_PAGE_MASK);</highlight></codeline>
<codeline lineno="6044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sbrk_top<sp/>=<sp/>(char<sp/>*)<sp/>ptr<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="6045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>ptr;</highlight></codeline>
<codeline lineno="6046"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6047"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(size<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="6048"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>don&apos;t<sp/>currently<sp/>support<sp/>shrink<sp/>behavior</highlight></codeline>
<codeline lineno="6050"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(void<sp/>*)<sp/>MFAIL;</highlight></codeline>
<codeline lineno="6051"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6052"><highlight class="comment"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="6053"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>sbrk_top;</highlight></codeline>
<codeline lineno="6055"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6056"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6057"><highlight class="comment"></highlight></codeline>
<codeline lineno="6058"><highlight class="comment"><sp/><sp/>//<sp/>cleanup<sp/>any<sp/>allocated<sp/>memory<sp/>pools</highlight></codeline>
<codeline lineno="6059"><highlight class="comment"><sp/><sp/>//<sp/>called<sp/>as<sp/>last<sp/>thing<sp/>before<sp/>shutting<sp/>down<sp/>driver</highlight></codeline>
<codeline lineno="6060"><highlight class="comment"></highlight></codeline>
<codeline lineno="6061"><highlight class="comment"><sp/><sp/>void<sp/>osCleanupMem(void)</highlight></codeline>
<codeline lineno="6062"><highlight class="comment"><sp/><sp/>{</highlight></codeline>
<codeline lineno="6063"><highlight class="comment"><sp/><sp/><sp/><sp/>void<sp/>**ptr;</highlight></codeline>
<codeline lineno="6064"><highlight class="comment"></highlight></codeline>
<codeline lineno="6065"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(ptr<sp/>=<sp/>our_os_pools;<sp/>ptr<sp/>&lt;<sp/>&amp;our_os_pools[MAX_POOL_ENTRIES];<sp/>ptr++)</highlight></codeline>
<codeline lineno="6066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(*ptr)</highlight></codeline>
<codeline lineno="6067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="6068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PoolDeallocate(*ptr);</highlight></codeline>
<codeline lineno="6069"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6071"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="6072"><highlight class="comment"></highlight></codeline>
<codeline lineno="6073"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6074"><highlight class="normal"></highlight></codeline>
<codeline lineno="6075"><highlight class="normal"></highlight></codeline>
<codeline lineno="6076"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----------------------------------------------------------------------</highlight></codeline>
<codeline lineno="6077"><highlight class="comment">History:</highlight></codeline>
<codeline lineno="6078"><highlight class="comment"><sp/><sp/><sp/><sp/>v2.8.6<sp/>Wed<sp/>Aug<sp/>29<sp/>06:57:58<sp/>2012<sp/><sp/>Doug<sp/>Lea</highlight></codeline>
<codeline lineno="6079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>fix<sp/>bad<sp/>comparison<sp/>in<sp/>dlposix_memalign</highlight></codeline>
<codeline lineno="6080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>don&apos;t<sp/>reuse<sp/>adjusted<sp/>asize<sp/>in<sp/>sys_alloc</highlight></codeline>
<codeline lineno="6081"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>add<sp/>LOCK_AT_FORK<sp/>--<sp/>thanks<sp/>to<sp/>Kirill<sp/>Artamonov<sp/>for<sp/>the<sp/>suggestion</highlight></codeline>
<codeline lineno="6082"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>reduce<sp/>compiler<sp/>warnings<sp/>--<sp/>thanks<sp/>to<sp/>all<sp/>who<sp/>reported/suggested<sp/>these</highlight></codeline>
<codeline lineno="6083"><highlight class="comment"></highlight></codeline>
<codeline lineno="6084"><highlight class="comment"><sp/><sp/><sp/><sp/>v2.8.5<sp/>Sun<sp/>May<sp/>22<sp/>10:26:02<sp/>2011<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Always<sp/>perform<sp/>unlink<sp/>checks<sp/>unless<sp/>INSECURE</highlight></codeline>
<codeline lineno="6086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>posix_memalign.</highlight></codeline>
<codeline lineno="6087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Improve<sp/>realloc<sp/>to<sp/>expand<sp/>in<sp/>more<sp/>cases;<sp/>expose<sp/>realloc_in_place.</highlight></codeline>
<codeline lineno="6088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>Peter<sp/>Buhr<sp/>for<sp/>the<sp/>suggestion.</highlight></codeline>
<codeline lineno="6089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>footprint_limit,<sp/>inspect_all,<sp/>bulk_free.<sp/>Thanks</highlight></codeline>
<codeline lineno="6090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>Barry<sp/>Hayes<sp/>and<sp/>others<sp/>for<sp/>the<sp/>suggestions.</highlight></codeline>
<codeline lineno="6091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Internal<sp/>refactorings<sp/>to<sp/>avoid<sp/>calls<sp/>while<sp/>holding<sp/>locks</highlight></codeline>
<codeline lineno="6092"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>non-reentrant<sp/>locks<sp/>by<sp/>default.<sp/>Thanks<sp/>to<sp/>Roland<sp/>McGrath</highlight></codeline>
<codeline lineno="6093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>the<sp/>suggestion.</highlight></codeline>
<codeline lineno="6094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Small<sp/>fixes<sp/>to<sp/>mspace_destroy,<sp/>reset_on_error.</highlight></codeline>
<codeline lineno="6095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Various<sp/>configuration<sp/>extensions/changes.<sp/>Thanks</highlight></codeline>
<codeline lineno="6096"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>all<sp/>who<sp/>contributed<sp/>these.</highlight></codeline>
<codeline lineno="6097"><highlight class="comment"></highlight></codeline>
<codeline lineno="6098"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.8.4a<sp/>Thu<sp/>Apr<sp/>28<sp/>14:39:43<sp/>2011<sp/>(dl<sp/>at<sp/>gee.cs.oswego.edu)</highlight></codeline>
<codeline lineno="6099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/>Creative<sp/>Commons<sp/>URL</highlight></codeline>
<codeline lineno="6100"><highlight class="comment"></highlight></codeline>
<codeline lineno="6101"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.8.4<sp/>Wed<sp/>May<sp/>27<sp/>09:56:23<sp/>2009<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>zeros<sp/>instead<sp/>of<sp/>prev<sp/>foot<sp/>for<sp/>is_mmapped</highlight></codeline>
<codeline lineno="6103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>mspace_track_large_chunks;<sp/>thanks<sp/>to<sp/>Jean<sp/>Brouwers</highlight></codeline>
<codeline lineno="6104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>set_inuse<sp/>in<sp/>internal_realloc;<sp/>thanks<sp/>to<sp/>Jean<sp/>Brouwers</highlight></codeline>
<codeline lineno="6105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>insufficient<sp/>sys_alloc<sp/>padding<sp/>when<sp/>using<sp/>16byte<sp/>alignment</highlight></codeline>
<codeline lineno="6106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>bad<sp/>error<sp/>check<sp/>in<sp/>mspace_footprint</highlight></codeline>
<codeline lineno="6107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Adaptations<sp/>for<sp/>ptmalloc;<sp/>thanks<sp/>to<sp/>Wolfram<sp/>Gloger.</highlight></codeline>
<codeline lineno="6108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Reentrant<sp/>spin<sp/>locks;<sp/>thanks<sp/>to<sp/>Earl<sp/>Chew<sp/>and<sp/>others</highlight></codeline>
<codeline lineno="6109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Win32<sp/>improvements;<sp/>thanks<sp/>to<sp/>Niall<sp/>Douglas<sp/>and<sp/>Earl<sp/>Chew</highlight></codeline>
<codeline lineno="6110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>NO_SEGMENT_TRAVERSAL<sp/>and<sp/>MAX_RELEASE_CHECK_RATE<sp/>options</highlight></codeline>
<codeline lineno="6111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Extension<sp/>hook<sp/>in<sp/>malloc_state</highlight></codeline>
<codeline lineno="6112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Various<sp/>small<sp/>adjustments<sp/>to<sp/>reduce<sp/>warnings<sp/>on<sp/>some<sp/>compilers</highlight></codeline>
<codeline lineno="6113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Various<sp/>configuration<sp/>extensions/changes<sp/>for<sp/>more<sp/>platforms.<sp/>Thanks</highlight></codeline>
<codeline lineno="6114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>all<sp/>who<sp/>contributed<sp/>these.</highlight></codeline>
<codeline lineno="6115"><highlight class="comment"></highlight></codeline>
<codeline lineno="6116"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.8.3<sp/>Thu<sp/>Sep<sp/>22<sp/>11:16:32<sp/>2005<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>max_footprint<sp/>functions</highlight></codeline>
<codeline lineno="6118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Ensure<sp/>all<sp/>appropriate<sp/>literals<sp/>are<sp/>size_t</highlight></codeline>
<codeline lineno="6119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>conditional<sp/>compilation<sp/>problem<sp/>for<sp/>some<sp/>#define<sp/>settings</highlight></codeline>
<codeline lineno="6120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Avoid<sp/>concatenating<sp/>segments<sp/>with<sp/>the<sp/>one<sp/>provided</highlight></codeline>
<codeline lineno="6121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>create_mspace_with_base</highlight></codeline>
<codeline lineno="6122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Rename<sp/>some<sp/>variables<sp/>to<sp/>avoid<sp/>compiler<sp/>shadowing<sp/>warnings</highlight></codeline>
<codeline lineno="6123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>explicit<sp/>lock<sp/>initialization.</highlight></codeline>
<codeline lineno="6124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Better<sp/>handling<sp/>of<sp/>sbrk<sp/>interference.</highlight></codeline>
<codeline lineno="6125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Simplify<sp/>and<sp/>fix<sp/>segment<sp/>insertion,<sp/>trimming<sp/>and<sp/>mspace_destroy</highlight></codeline>
<codeline lineno="6126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Reinstate<sp/>REALLOC_ZERO_BYTES_FREES<sp/>option<sp/>from<sp/>2.7.x</highlight></codeline>
<codeline lineno="6127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Thanks<sp/>especially<sp/>to<sp/>Dennis<sp/>Flanagan<sp/>for<sp/>help<sp/>on<sp/>these.</highlight></codeline>
<codeline lineno="6128"><highlight class="comment"></highlight></codeline>
<codeline lineno="6129"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.8.2<sp/>Sun<sp/>Jun<sp/>12<sp/>16:01:10<sp/>2005<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>memalign<sp/>brace<sp/>error.</highlight></codeline>
<codeline lineno="6131"><highlight class="comment"></highlight></codeline>
<codeline lineno="6132"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.8.1<sp/>Wed<sp/>Jun<sp/><sp/>8<sp/>16:11:46<sp/>2005<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>improper<sp/>#endif<sp/>nesting<sp/>in<sp/>C++</highlight></codeline>
<codeline lineno="6134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>explicit<sp/>casts<sp/>needed<sp/>for<sp/>C++</highlight></codeline>
<codeline lineno="6135"><highlight class="comment"></highlight></codeline>
<codeline lineno="6136"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.8.0<sp/>Mon<sp/>May<sp/>30<sp/>14:09:02<sp/>2005<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>trees<sp/>for<sp/>large<sp/>bins</highlight></codeline>
<codeline lineno="6138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Support<sp/>mspaces</highlight></codeline>
<codeline lineno="6139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>segments<sp/>to<sp/>unify<sp/>sbrk-based<sp/>and<sp/>mmap-based<sp/>system<sp/>allocation,</highlight></codeline>
<codeline lineno="6140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removing<sp/>need<sp/>for<sp/>emulation<sp/>on<sp/>most<sp/>platforms<sp/>without<sp/>sbrk.</highlight></codeline>
<codeline lineno="6141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Default<sp/>safety<sp/>checks</highlight></codeline>
<codeline lineno="6142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Optional<sp/>footer<sp/>checks.<sp/>Thanks<sp/>to<sp/>William<sp/>Robertson<sp/>for<sp/>the<sp/>idea.</highlight></codeline>
<codeline lineno="6143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Internal<sp/>code<sp/>refactoring</highlight></codeline>
<codeline lineno="6144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Incorporate<sp/>suggestions<sp/>and<sp/>platform-specific<sp/>changes.</highlight></codeline>
<codeline lineno="6145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>Dennis<sp/>Flanagan,<sp/>Colin<sp/>Plumb,<sp/>Niall<sp/>Douglas,</highlight></codeline>
<codeline lineno="6146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Aaron<sp/>Bachmann,<sp/><sp/>Emery<sp/>Berger,<sp/>and<sp/>others.</highlight></codeline>
<codeline lineno="6147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Speed<sp/>up<sp/>non-fastbin<sp/>processing<sp/>enough<sp/>to<sp/>remove<sp/>fastbins.</highlight></codeline>
<codeline lineno="6148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Remove<sp/>useless<sp/>cfree()<sp/>to<sp/>avoid<sp/>conflicts<sp/>with<sp/>other<sp/>apps.</highlight></codeline>
<codeline lineno="6149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Remove<sp/>internal<sp/>memcpy,<sp/>memset.<sp/>Compilers<sp/>handle<sp/>builtins<sp/>better.</highlight></codeline>
<codeline lineno="6150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Remove<sp/>some<sp/>options<sp/>that<sp/>no<sp/>one<sp/>ever<sp/>used<sp/>and<sp/>rename<sp/>others.</highlight></codeline>
<codeline lineno="6151"><highlight class="comment"></highlight></codeline>
<codeline lineno="6152"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.7.2<sp/>Sat<sp/>Aug<sp/>17<sp/>09:07:30<sp/>2002<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>malloc_state<sp/>bitmap<sp/>array<sp/>misdeclaration</highlight></codeline>
<codeline lineno="6154"><highlight class="comment"></highlight></codeline>
<codeline lineno="6155"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.7.1<sp/>Thu<sp/>Jul<sp/>25<sp/>10:58:03<sp/>2002<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Allow<sp/>tuning<sp/>of<sp/>FIRST_SORTED_BIN_SIZE</highlight></codeline>
<codeline lineno="6157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>PTR_UINT<sp/>as<sp/>type<sp/>for<sp/>all<sp/>ptr-&gt;int<sp/>casts.<sp/>Thanks<sp/>to<sp/>John<sp/>Belmonte.</highlight></codeline>
<codeline lineno="6158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Better<sp/>detection<sp/>and<sp/>support<sp/>for<sp/>non-contiguousness<sp/>of<sp/>MORECORE.</highlight></codeline>
<codeline lineno="6159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>Andreas<sp/>Mueller,<sp/>Conal<sp/>Walsh,<sp/>and<sp/>Wolfram<sp/>Gloger</highlight></codeline>
<codeline lineno="6160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Bypass<sp/>most<sp/>of<sp/>malloc<sp/>if<sp/>no<sp/>frees.<sp/>Thanks<sp/>To<sp/>Emery<sp/>Berger.</highlight></codeline>
<codeline lineno="6161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>freeing<sp/>of<sp/>old<sp/>top<sp/>non-contiguous<sp/>chunk<sp/>im<sp/>sysmalloc.</highlight></codeline>
<codeline lineno="6162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Raised<sp/>default<sp/>trim<sp/>and<sp/>map<sp/>thresholds<sp/>to<sp/>256K.</highlight></codeline>
<codeline lineno="6163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>mmap-related<sp/>#defines.<sp/>Thanks<sp/>to<sp/>Lubos<sp/>Lunak.</highlight></codeline>
<codeline lineno="6164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>copy<sp/>macros;<sp/>added<sp/>LACKS_FCNTL_H.<sp/>Thanks<sp/>to<sp/>Neal<sp/>Walfield.</highlight></codeline>
<codeline lineno="6165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Branch-free<sp/>bin<sp/>calculation</highlight></codeline>
<codeline lineno="6166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Default<sp/>trim<sp/>and<sp/>mmap<sp/>thresholds<sp/>now<sp/>256K.</highlight></codeline>
<codeline lineno="6167"><highlight class="comment"></highlight></codeline>
<codeline lineno="6168"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.7.0<sp/>Sun<sp/>Mar<sp/>11<sp/>14:14:06<sp/>2001<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Introduce<sp/>independent_comalloc<sp/>and<sp/>independent_calloc.</highlight></codeline>
<codeline lineno="6170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>Michael<sp/>Pachos<sp/>for<sp/>motivation<sp/>and<sp/>help.</highlight></codeline>
<codeline lineno="6171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Make<sp/>optional<sp/>.h<sp/>file<sp/>available</highlight></codeline>
<codeline lineno="6172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Allow<sp/>&gt;<sp/>2GB<sp/>requests<sp/>on<sp/>32bit<sp/>systems.</highlight></codeline>
<codeline lineno="6173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>new<sp/>WIN32<sp/>sbrk,<sp/>mmap,<sp/>munmap,<sp/>lock<sp/>code<sp/>from<sp/>&lt;Walter@GeNeSys-e.de&gt;.</highlight></codeline>
<codeline lineno="6174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>also<sp/>to<sp/>Andreas<sp/>Mueller<sp/>&lt;a.mueller<sp/>at<sp/>paradatec.de&gt;,</highlight></codeline>
<codeline lineno="6175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>Anonymous.</highlight></codeline>
<codeline lineno="6176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Allow<sp/>override<sp/>of<sp/>MALLOC_ALIGNMENT<sp/>(Thanks<sp/>to<sp/>Ruud<sp/>Waij<sp/>for</highlight></codeline>
<codeline lineno="6177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>helping<sp/>test<sp/>this.)</highlight></codeline>
<codeline lineno="6178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>memalign:<sp/>check<sp/>alignment<sp/>arg</highlight></codeline>
<codeline lineno="6179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>realloc:<sp/>don&apos;t<sp/>try<sp/>to<sp/>shift<sp/>chunks<sp/>backwards,<sp/>since<sp/>this</highlight></codeline>
<codeline lineno="6180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leads<sp/>to<sp/><sp/>more<sp/>fragmentation<sp/>in<sp/>some<sp/>programs<sp/>and<sp/>doesn&apos;t</highlight></codeline>
<codeline lineno="6181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seem<sp/>to<sp/>help<sp/>in<sp/>any<sp/>others.</highlight></codeline>
<codeline lineno="6182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Collect<sp/>all<sp/>cases<sp/>in<sp/>malloc<sp/>requiring<sp/>system<sp/>memory<sp/>into<sp/>sysmalloc</highlight></codeline>
<codeline lineno="6183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>mmap<sp/>as<sp/>backup<sp/>to<sp/>sbrk</highlight></codeline>
<codeline lineno="6184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Place<sp/>all<sp/>internal<sp/>state<sp/>in<sp/>malloc_state</highlight></codeline>
<codeline lineno="6185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Introduce<sp/>fastbins<sp/>(although<sp/>similar<sp/>to<sp/>2.5.1)</highlight></codeline>
<codeline lineno="6186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Many<sp/>minor<sp/>tunings<sp/>and<sp/>cosmetic<sp/>improvements</highlight></codeline>
<codeline lineno="6187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Introduce<sp/>USE_PUBLIC_MALLOC_WRAPPERS,<sp/>USE_MALLOC_LOCK</highlight></codeline>
<codeline lineno="6188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Introduce<sp/>MALLOC_FAILURE_ACTION,<sp/>MORECORE_CONTIGUOUS</highlight></codeline>
<codeline lineno="6189"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Thanks<sp/>to<sp/>Tony<sp/>E.<sp/>Bennett<sp/>&lt;tbennett@nvidia.com&gt;<sp/>and<sp/>others.</highlight></codeline>
<codeline lineno="6190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Include<sp/>errno.h<sp/>to<sp/>support<sp/>default<sp/>failure<sp/>action.</highlight></codeline>
<codeline lineno="6191"><highlight class="comment"></highlight></codeline>
<codeline lineno="6192"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.6.6<sp/>Sun<sp/>Dec<sp/><sp/>5<sp/>07:42:19<sp/>1999<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>return<sp/>null<sp/>for<sp/>negative<sp/>arguments</highlight></codeline>
<codeline lineno="6194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>Several<sp/>WIN32<sp/>cleanups<sp/>from<sp/>Martin<sp/>C.<sp/>Fong<sp/>&lt;mcfong<sp/>at<sp/>yahoo.com&gt;</highlight></codeline>
<codeline lineno="6195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>&apos;LACKS_SYS_PARAM_H&apos;<sp/>for<sp/>those<sp/>systems<sp/>without<sp/>&apos;sys/param.h&apos;</highlight></codeline>
<codeline lineno="6196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(e.g.<sp/>WIN32<sp/>platforms)</highlight></codeline>
<codeline lineno="6197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Cleanup<sp/>header<sp/>file<sp/>inclusion<sp/>for<sp/>WIN32<sp/>platforms</highlight></codeline>
<codeline lineno="6198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Cleanup<sp/>code<sp/>to<sp/>avoid<sp/>Microsoft<sp/>Visual<sp/>C++<sp/>compiler<sp/>complaints</highlight></codeline>
<codeline lineno="6199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>&apos;USE_DL_PREFIX&apos;<sp/>to<sp/>quickly<sp/>allow<sp/>co-existence<sp/>with<sp/>existing</highlight></codeline>
<codeline lineno="6200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>allocation<sp/>routines</highlight></codeline>
<codeline lineno="6201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>&apos;malloc_getpagesize&apos;<sp/>for<sp/>WIN32<sp/>platforms<sp/>(needs<sp/>more<sp/>work)</highlight></codeline>
<codeline lineno="6202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>&apos;assert&apos;<sp/>rather<sp/>than<sp/>&apos;ASSERT&apos;<sp/>in<sp/>WIN32<sp/>code<sp/>to<sp/>conform<sp/>to</highlight></codeline>
<codeline lineno="6203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usage<sp/>of<sp/>&apos;assert&apos;<sp/>in<sp/>non-WIN32<sp/>code</highlight></codeline>
<codeline lineno="6204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Improve<sp/>WIN32<sp/>&apos;sbrk()&apos;<sp/>emulation&apos;s<sp/>&apos;findRegion()&apos;<sp/>routine<sp/>to</highlight></codeline>
<codeline lineno="6205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avoid<sp/>infinite<sp/>loop</highlight></codeline>
<codeline lineno="6206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Always<sp/>call<sp/>&apos;fREe()&apos;<sp/>rather<sp/>than<sp/>&apos;free()&apos;</highlight></codeline>
<codeline lineno="6207"><highlight class="comment"></highlight></codeline>
<codeline lineno="6208"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.6.5<sp/>Wed<sp/>Jun<sp/>17<sp/>15:57:31<sp/>1998<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fixed<sp/>ordering<sp/>problem<sp/>with<sp/>boundary-stamping</highlight></codeline>
<codeline lineno="6210"><highlight class="comment"></highlight></codeline>
<codeline lineno="6211"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.6.3<sp/>Sun<sp/>May<sp/>19<sp/>08:17:58<sp/>1996<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>pvalloc,<sp/>as<sp/>recommended<sp/>by<sp/>H.J.<sp/>Liu</highlight></codeline>
<codeline lineno="6213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>64bit<sp/>pointer<sp/>support<sp/>mainly<sp/>from<sp/>Wolfram<sp/>Gloger</highlight></codeline>
<codeline lineno="6214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>anonymously<sp/>donated<sp/>WIN32<sp/>sbrk<sp/>emulation</highlight></codeline>
<codeline lineno="6215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Malloc,<sp/>calloc,<sp/>getpagesize:<sp/>add<sp/>optimizations<sp/>from<sp/>Raymond<sp/>Nijssen</highlight></codeline>
<codeline lineno="6216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>malloc_extend_top:<sp/>fix<sp/>mask<sp/>error<sp/>that<sp/>caused<sp/>wastage<sp/>after</highlight></codeline>
<codeline lineno="6217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foreign<sp/>sbrks</highlight></codeline>
<codeline lineno="6218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>linux<sp/>mremap<sp/>support<sp/>code<sp/>from<sp/>HJ<sp/>Liu</highlight></codeline>
<codeline lineno="6219"><highlight class="comment"></highlight></codeline>
<codeline lineno="6220"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.6.2<sp/>Tue<sp/>Dec<sp/><sp/>5<sp/>06:52:55<sp/>1995<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6221"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Integrated<sp/>most<sp/>documentation<sp/>with<sp/>the<sp/>code.</highlight></codeline>
<codeline lineno="6222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>support<sp/>for<sp/>mmap,<sp/>with<sp/>help<sp/>from</highlight></codeline>
<codeline lineno="6223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Wolfram<sp/>Gloger<sp/>(Gloger@lrz.uni-muenchen.de).</highlight></codeline>
<codeline lineno="6224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>last_remainder<sp/>in<sp/>more<sp/>cases.</highlight></codeline>
<codeline lineno="6225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Pack<sp/>bins<sp/>using<sp/>idea<sp/>from<sp/><sp/>colin@nyx10.cs.du.edu</highlight></codeline>
<codeline lineno="6226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>ordered<sp/>bins<sp/>instead<sp/>of<sp/>best-fit<sp/>threshhold</highlight></codeline>
<codeline lineno="6227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Eliminate<sp/>block-local<sp/>decls<sp/>to<sp/>simplify<sp/>tracing<sp/>and<sp/>debugging.</highlight></codeline>
<codeline lineno="6228"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Support<sp/>another<sp/>case<sp/>of<sp/>realloc<sp/>via<sp/>move<sp/>into<sp/>top</highlight></codeline>
<codeline lineno="6229"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Fix<sp/>error<sp/>occuring<sp/>when<sp/>initial<sp/>sbrk_base<sp/>not<sp/>word-aligned.</highlight></codeline>
<codeline lineno="6230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Rely<sp/>on<sp/>page<sp/>size<sp/>for<sp/>units<sp/>instead<sp/>of<sp/>SBRK_UNIT<sp/>to</highlight></codeline>
<codeline lineno="6231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avoid<sp/>surprises<sp/>about<sp/>sbrk<sp/>alignment<sp/>conventions.</highlight></codeline>
<codeline lineno="6232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>mallinfo,<sp/>mallopt.<sp/>Thanks<sp/>to<sp/>Raymond<sp/>Nijssen</highlight></codeline>
<codeline lineno="6233"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(raymond@es.ele.tue.nl)<sp/>for<sp/>the<sp/>suggestion.</highlight></codeline>
<codeline lineno="6234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>`pad&apos;<sp/>argument<sp/>to<sp/>malloc_trim<sp/>and<sp/>top_pad<sp/>mallopt<sp/>parameter.</highlight></codeline>
<codeline lineno="6235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>precautions<sp/>for<sp/>cases<sp/>where<sp/>other<sp/>routines<sp/>call<sp/>sbrk,</highlight></codeline>
<codeline lineno="6236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>courtesy<sp/>of<sp/>Wolfram<sp/>Gloger<sp/>(Gloger@lrz.uni-muenchen.de).</highlight></codeline>
<codeline lineno="6237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>macros<sp/>etc.,<sp/>allowing<sp/>use<sp/>in<sp/>linux<sp/>libc<sp/>from</highlight></codeline>
<codeline lineno="6238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H.J.<sp/>Lu<sp/>(hjl@gnu.ai.mit.edu)</highlight></codeline>
<codeline lineno="6239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Inverted<sp/>this<sp/>history<sp/>list</highlight></codeline>
<codeline lineno="6240"><highlight class="comment"></highlight></codeline>
<codeline lineno="6241"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.6.1<sp/>Sat<sp/>Dec<sp/><sp/>2<sp/>14:10:57<sp/>1995<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Re-tuned<sp/>and<sp/>fixed<sp/>to<sp/>behave<sp/>more<sp/>nicely<sp/>with<sp/>V2.6.0<sp/>changes.</highlight></codeline>
<codeline lineno="6243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Removed<sp/>all<sp/>preallocation<sp/>code<sp/>since<sp/>under<sp/>current<sp/>scheme</highlight></codeline>
<codeline lineno="6244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>work<sp/>required<sp/>to<sp/>undo<sp/>bad<sp/>preallocations<sp/>exceeds</highlight></codeline>
<codeline lineno="6245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>work<sp/>saved<sp/>in<sp/>good<sp/>cases<sp/>for<sp/>most<sp/>test<sp/>programs.</highlight></codeline>
<codeline lineno="6246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>longer<sp/>use<sp/>return<sp/>list<sp/>or<sp/>unconsolidated<sp/>bins<sp/>since</highlight></codeline>
<codeline lineno="6247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>no<sp/>scheme<sp/>using<sp/>them<sp/>consistently<sp/>outperforms<sp/>those<sp/>that<sp/>don&apos;t</highlight></codeline>
<codeline lineno="6248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>given<sp/>above<sp/>changes.</highlight></codeline>
<codeline lineno="6249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>best<sp/>fit<sp/>for<sp/>very<sp/>large<sp/>chunks<sp/>to<sp/>prevent<sp/>some<sp/>worst-cases.</highlight></codeline>
<codeline lineno="6250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>some<sp/>support<sp/>for<sp/>debugging</highlight></codeline>
<codeline lineno="6251"><highlight class="comment"></highlight></codeline>
<codeline lineno="6252"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.6.0<sp/>Sat<sp/>Nov<sp/><sp/>4<sp/>07:05:23<sp/>1995<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Removed<sp/>footers<sp/>when<sp/>chunks<sp/>are<sp/>in<sp/>use.<sp/>Thanks<sp/>to</highlight></codeline>
<codeline lineno="6254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Paul<sp/>Wilson<sp/>(wilson@cs.texas.edu)<sp/>for<sp/>the<sp/>suggestion.</highlight></codeline>
<codeline lineno="6255"><highlight class="comment"></highlight></codeline>
<codeline lineno="6256"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.5.4<sp/>Wed<sp/>Nov<sp/><sp/>1<sp/>07:54:51<sp/>1995<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>gee)</highlight></codeline>
<codeline lineno="6257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Added<sp/>malloc_trim,<sp/>with<sp/>help<sp/>from<sp/>Wolfram<sp/>Gloger</highlight></codeline>
<codeline lineno="6258"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(wmglo@Dent.MED.Uni-Muenchen.DE).</highlight></codeline>
<codeline lineno="6259"><highlight class="comment"></highlight></codeline>
<codeline lineno="6260"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.5.3<sp/>Tue<sp/>Apr<sp/>26<sp/>10:16:01<sp/>1994<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>g)</highlight></codeline>
<codeline lineno="6261"><highlight class="comment"></highlight></codeline>
<codeline lineno="6262"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.5.2<sp/>Tue<sp/>Apr<sp/><sp/>5<sp/>16:20:40<sp/>1994<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>g)</highlight></codeline>
<codeline lineno="6263"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>realloc:<sp/>try<sp/>to<sp/>expand<sp/>in<sp/>both<sp/>directions</highlight></codeline>
<codeline lineno="6264"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>malloc:<sp/>swap<sp/>order<sp/>of<sp/>clean-bin<sp/>strategy;</highlight></codeline>
<codeline lineno="6265"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>realloc:<sp/>only<sp/>conditionally<sp/>expand<sp/>backwards</highlight></codeline>
<codeline lineno="6266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Try<sp/>not<sp/>to<sp/>scavenge<sp/>used<sp/>bins</highlight></codeline>
<codeline lineno="6267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Use<sp/>bin<sp/>counts<sp/>as<sp/>a<sp/>guide<sp/>to<sp/>preallocation</highlight></codeline>
<codeline lineno="6268"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Occasionally<sp/>bin<sp/>return<sp/>list<sp/>chunks<sp/>in<sp/>first<sp/>scan</highlight></codeline>
<codeline lineno="6269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>a<sp/>few<sp/>optimizations<sp/>from<sp/>colin@nyx10.cs.du.edu</highlight></codeline>
<codeline lineno="6270"><highlight class="comment"></highlight></codeline>
<codeline lineno="6271"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.5.1<sp/>Sat<sp/>Aug<sp/>14<sp/>15:40:43<sp/>1993<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>g)</highlight></codeline>
<codeline lineno="6272"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>faster<sp/>bin<sp/>computation<sp/>&amp;<sp/>slightly<sp/>different<sp/>binning</highlight></codeline>
<codeline lineno="6273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>merged<sp/>all<sp/>consolidations<sp/>to<sp/>one<sp/>part<sp/>of<sp/>malloc<sp/>proper</highlight></codeline>
<codeline lineno="6274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(eliminating<sp/>old<sp/>malloc_find_space<sp/>&amp;<sp/>malloc_clean_bin)</highlight></codeline>
<codeline lineno="6275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Scan<sp/>2<sp/>returns<sp/>chunks<sp/>(not<sp/>just<sp/>1)</highlight></codeline>
<codeline lineno="6276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Propagate<sp/>failure<sp/>in<sp/>realloc<sp/>if<sp/>malloc<sp/>returns<sp/>0</highlight></codeline>
<codeline lineno="6277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Add<sp/>stuff<sp/>to<sp/>allow<sp/>compilation<sp/>on<sp/>non-ANSI<sp/>compilers</highlight></codeline>
<codeline lineno="6278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>kpv@research.att.com</highlight></codeline>
<codeline lineno="6279"><highlight class="comment"></highlight></codeline>
<codeline lineno="6280"><highlight class="comment"><sp/><sp/><sp/><sp/>V2.5<sp/>Sat<sp/>Aug<sp/><sp/>7<sp/>07:41:59<sp/>1993<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>g.oswego.edu)</highlight></codeline>
<codeline lineno="6281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>potential<sp/>for<sp/>odd<sp/>address<sp/>access<sp/>in<sp/>prev_chunk</highlight></codeline>
<codeline lineno="6282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>removed<sp/>dependency<sp/>on<sp/>getpagesize.h</highlight></codeline>
<codeline lineno="6283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>misc<sp/>cosmetics<sp/>and<sp/>a<sp/>bit<sp/>more<sp/>internal<sp/>documentation</highlight></codeline>
<codeline lineno="6284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>anticosmetics:<sp/>mangled<sp/>names<sp/>in<sp/>macros<sp/>to<sp/>evade<sp/>debugger<sp/>strangeness</highlight></codeline>
<codeline lineno="6285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>tested<sp/>on<sp/>sparc,<sp/>hp-700,<sp/>dec-mips,<sp/>rs6000</highlight></codeline>
<codeline lineno="6286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>with<sp/>gcc<sp/>&amp;<sp/>native<sp/>cc<sp/>(hp,<sp/>dec<sp/>only)<sp/>allowing</highlight></codeline>
<codeline lineno="6287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detlefs<sp/>&amp;<sp/>Zorn<sp/>comparison<sp/>study<sp/>(in<sp/>SIGPLAN<sp/>Notices.)</highlight></codeline>
<codeline lineno="6288"><highlight class="comment"></highlight></codeline>
<codeline lineno="6289"><highlight class="comment"><sp/><sp/><sp/><sp/>Trial<sp/>version<sp/>Fri<sp/>Aug<sp/>28<sp/>13:14:29<sp/>1992<sp/><sp/>Doug<sp/>Lea<sp/><sp/>(dl<sp/>at<sp/>g.oswego.edu)</highlight></codeline>
<codeline lineno="6290"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Based<sp/>loosely<sp/>on<sp/>libg++-1.2X<sp/>malloc.<sp/>(It<sp/>retains<sp/>some<sp/>of<sp/>the<sp/>overall</highlight></codeline>
<codeline lineno="6291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>structure<sp/>of<sp/>old<sp/>version,<sp/><sp/>but<sp/>most<sp/>details<sp/>differ.)</highlight></codeline>
<codeline lineno="6292"><highlight class="comment"></highlight></codeline>
<codeline lineno="6293"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>!__GNU__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/library/clib/malloc.c"/>
  </compounddef>
</doxygen>
