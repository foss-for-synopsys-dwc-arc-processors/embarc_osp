<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="pwm_8c" kind="file">
    <compoundname>pwm.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="pwm_8h" local="yes">pwm.h</includes>
    <includes local="yes">io_config.h</includes>
    <includes local="yes">apexextensions.h</includes>
    <incdepgraph>
      <node id="6911">
        <label>stdbool.h</label>
      </node>
      <node id="6905">
        <label>stdint.h</label>
      </node>
      <node id="6903">
        <label>stdlib.h</label>
      </node>
      <node id="6909">
        <label>embARC_toolchain.h</label>
        <link refid="emb_a_r_c__toolchain_8h"/>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6910" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6911" relation="include">
        </childnode>
      </node>
      <node id="6912">
        <label>arc.h</label>
        <link refid="arc_8h"/>
        <childnode refid="6913" relation="include">
        </childnode>
      </node>
      <node id="6904">
        <label>stddef.h</label>
      </node>
      <node id="6910">
        <label>limits.h</label>
      </node>
      <node id="6913">
        <label>arc_feature_config.h</label>
        <link refid="arc__feature__config_8h"/>
      </node>
      <node id="6915">
        <label>io_config.h</label>
      </node>
      <node id="6908">
        <label>arc_exception.h</label>
        <link refid="arc__exception_8h"/>
        <childnode refid="6909" relation="include">
        </childnode>
        <childnode refid="6912" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
      </node>
      <node id="6907">
        <label>ioctl.h</label>
        <link refid="ioctl_8h_source"/>
        <childnode refid="6908" relation="include">
        </childnode>
        <childnode refid="6914" relation="include">
        </childnode>
      </node>
      <node id="6902">
        <label>pwm.c</label>
        <link refid="pwm.c"/>
        <childnode refid="6903" relation="include">
        </childnode>
        <childnode refid="6904" relation="include">
        </childnode>
        <childnode refid="6905" relation="include">
        </childnode>
        <childnode refid="6906" relation="include">
        </childnode>
        <childnode refid="6915" relation="include">
        </childnode>
        <childnode refid="6916" relation="include">
        </childnode>
      </node>
      <node id="6906">
        <label>pwm.h</label>
        <link refid="pwm_8h_source"/>
        <childnode refid="6907" relation="include">
        </childnode>
      </node>
      <node id="6916">
        <label>apexextensions.h</label>
      </node>
      <node id="6914">
        <label>arc_builtin.h</label>
        <link refid="arc__builtin_8h"/>
        <childnode refid="6909" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structpwm__info__struct" prot="public">pwm_info_struct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="pwm_8c_1a4505cffbcc03025d8f51aaa7ba09b7fd" prot="public" static="no">
        <name>PWM_CTRL</name>
        <initializer>(0x000)   /* PWM control register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="42" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a891731c1f31e7a49a1e838fc789c30a1" prot="public" static="no">
        <name>PWM_CHN_CONFIG</name>
        <initializer>(0x001)   /* PWM channel config register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="43" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1ac73e1d801c052d3e7bdb9f5a9938885c" prot="public" static="no">
        <name>PWM_TRIGGER</name>
        <initializer>(0x002)   /* PWM trigger register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="44" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1aa1566f0c92d8b06329e3babf07979886" prot="public" static="no">
        <name>PWM_FAULT</name>
        <initializer>(0x003)   /* PWM fault register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="45" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a0e713156db4f4dc1445b618c10ae1069" prot="public" static="no">
        <name>PWM_EVENTS</name>
        <initializer>(0x004)   /* PWM events register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="46" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a65dcf14d07fe40be4ffbd608540ab914" prot="public" static="no">
        <name>PWM_INTCTRL</name>
        <initializer>(0x005)   /* PWM interrupt control register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="47" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a1f47cf9e89c233b4a8fe40fab0e15c13" prot="public" static="no">
        <name>PWM_INTSTAT</name>
        <initializer>(0x006)   /* PWM interrupt status register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="48" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1ae01be08e4ff627f3253fa488defc5bc6" prot="public" static="no">
        <name>PWM_INTCLR</name>
        <initializer>(0x007)   /* PWM interrupt clear register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="49" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1adc26b01377f05f4b07580431e049ea88" prot="public" static="no">
        <name>PWM_THRESHOLD_01</name>
        <initializer>(0x008)   /* PWM threshold register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="50" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1af4faa1d5a6a49c298b75799ce3e7fecb" prot="public" static="no">
        <name>PWM_DEADZONE_01</name>
        <initializer>(0x00c)   /* PWM deadzone register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="51" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1af3e63cf3704c7aa668192a3185216b6d" prot="public" static="no">
        <name>PWM_TIMER_MAX</name>
        <initializer>(0x010)   /* PWM timer max register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="52" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a93f5a666aa09d8d3cb8744a5f516ba0f" prot="public" static="no">
        <name>PWM_NPERIODS</name>
        <initializer>(0x011)   /* PWM no of periods register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="53" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a680fc8585c191039bb924276bb28533b" prot="public" static="no">
        <name>PWM_CLK_DIV</name>
        <initializer>(0x012)   /* PWM clock divider register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="54" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1af7c8714032fd1f63321c296d4b266555" prot="public" static="no">
        <name>PWM_CLKEN</name>
        <initializer>(0x020)   /* PWM clock enable register */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="55" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a63ff70be9dd1f57bb40d7f4b5d942c1e" prot="public" static="no">
        <name>PWM_TIMER_MODE_MSK</name>
        <initializer>(0xc)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="59" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a6ec327f00a1a182cf8a571d59e44bc5d" prot="public" static="no">
        <name>PWM_TIMER_MODE_POS</name>
        <initializer>(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="60" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a1e765701ccac89c72b21616170f06e21" prot="public" static="no">
        <name>PWM_POL_CHANS_MSK</name>
        <initializer>(0x3 &lt;&lt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="61" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a74785b60e1ac883bbf0b0c2f1115d9e8" prot="public" static="no">
        <name>PWM_POL_CHANS_POS</name>
        <initializer>(16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="62" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a159bda90d29862fc2037539fc328fb1c" prot="public" static="no">
        <name>PWM_MASK_CHAN_MSK</name>
        <initializer>(0x1 &lt;&lt; 8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="63" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1ab5182b6a549df8941e626fbf9fba0f64" prot="public" static="no">
        <name>PWM_MASK_CHAN_POS</name>
        <initializer>(8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="64" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1aefe6f7c9fde01f6a7b3a5e60734ce00d" prot="public" static="no">
        <name>PWM_ENABLE_CHAN_MSK</name>
        <initializer>(0x1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="65" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a88b43a1a93459e9c0bb9f13f1c098d27" prot="public" static="no">
        <name>PWM_TRIGGER_WIDTH_MSK</name>
        <initializer>(0x7 &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="66" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1af105da78c2dafb5829383e52e47d9491" prot="public" static="no">
        <name>PWM_TRIGGER_WIDTH_POS</name>
        <initializer>(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="67" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a2b7e6711f066d22be1bf88b91ed39e60" prot="public" static="no">
        <name>PWM_TRIGGER_MODE_MSK</name>
        <initializer>(0x3 &lt;&lt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="68" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1ad286982dffcfd3c6b53f5c4c51753550" prot="public" static="no">
        <name>PWM_TRIGGER_MODE_POS</name>
        <initializer>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="69" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a74dc59de1277538ecd140b601e4c6d97" prot="public" static="no">
        <name>PWM_FAULT_RECOVER_MSK</name>
        <initializer>(0x1 &lt;&lt; 23)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="70" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a449d6207d2648f8e255997d342510bca" prot="public" static="no">
        <name>PWM_FAULT_RECOVER_POS</name>
        <initializer>(23)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="71" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a8a57c3a14610673c76e945a9b79b7006" prot="public" static="no">
        <name>PWM_FAULT_INPUT_POL_MSK</name>
        <initializer>(0x1 &lt;&lt; 20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="72" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1af675ad32f03d5110be797cb2ab32ad1e" prot="public" static="no">
        <name>PWM_FAULT_INPUT_POL_POS</name>
        <initializer>(20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="73" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1aafd2aaec0a0703bdf55e4313f28c7172" prot="public" static="no">
        <name>PWM_FAULT_MODE_MSK</name>
        <initializer>(0x3 &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="74" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a135b1966cefee39335cb5887ac2927ab" prot="public" static="no">
        <name>PWM_FAULT_MODE_POS</name>
        <initializer>(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="75" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a6e5e6ac4d9d5a1eb73c0c6876c829ea9" prot="public" static="no">
        <name>PWM_FAULT_MASK_MSK</name>
        <initializer>(0x7 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="76" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1aa6ceacda1a0de06651f6fa64a1e7810a" prot="public" static="no">
        <name>PWM_FAULT_MASK_POS</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="77" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a1ea39585d893a2a0020f4f27985cca3f" prot="public" static="no">
        <name>PWM_FAULT_0_MASK_MSK</name>
        <initializer>(0x249) /* bit 0,3,6,9 */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="78" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1abef32f7910d21a280ddd1e8809a726a1" prot="public" static="no">
        <name>PWM_UPDM_INT_POS</name>
        <initializer>(4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="79" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a12e1e0a6284e6806451cd4f8133b3f52" prot="public" static="no">
        <name>PWM_TRIGGER_INT_POS</name>
        <initializer>(8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="80" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1ab63df959ecfb5b46f8972f4061773d91" prot="public" static="no">
        <name>PWM_FAULT_INT_POS</name>
        <initializer>(12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="81" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a6c8257fac50f1cd6c4a3e43c07bd5199" prot="public" static="no">
        <name>PWM_TX_INT_MSK</name>
        <initializer>(0xff1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="82" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pwm_8c_1a4503d3e78336e2499530b2232c879d81" prot="public" static="no">
        <name>PWM_ERR_INT_MSK</name>
        <initializer>(0x7 &lt;&lt; 12)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="83" column="9" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pwm_8c_1a7635f22fe24e0c5d8142d78bf41b9312" prot="public" static="no">
        <type>_Interrupt void(*</type>
        <definition>typedef _Interrupt void(* ISR)()</definition>
        <argsstring>)()</argsstring>
        <name>ISR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="85" column="1" bodyfile="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pwm_8c_1a2dcec836c715eee6cdf8c750931237a3" prot="public" static="no">
        <type>struct <ref refid="structpwm__info__struct" kindref="compound">pwm_info_struct</ref></type>
        <definition>typedef struct pwm_info_struct  pwm_info_t</definition>
        <argsstring></argsstring>
        <name>pwm_info_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="105" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="pwm_8c_1af7d7b943eda0338c64ebf91fb6fb3ddc" prot="public" static="no">
        <type>struct <ref refid="structpwm__info__struct" kindref="compound">pwm_info_struct</ref> *</type>
        <definition>typedef struct pwm_info_struct * pwm_info_pt</definition>
        <argsstring></argsstring>
        <name>pwm_info_pt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c" line="105" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>==========================================================================</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Synopsys<sp/>DesignWare<sp/>Sensor<sp/>and<sp/>Control<sp/>IP<sp/>Subsystem<sp/>IO<sp/>Software<sp/>Driver<sp/>and</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>documentation<sp/>(hereinafter,<sp/>&quot;Software&quot;)<sp/>is<sp/>an<sp/>Unsupported<sp/>proprietary<sp/>work</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>of<sp/>Synopsys,<sp/>Inc.<sp/>unless<sp/>otherwise<sp/>expressly<sp/>agreed<sp/>to<sp/>in<sp/>writing<sp/>between</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>Synopsys<sp/>and<sp/>you.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/>The<sp/>Software<sp/>IS<sp/>NOT<sp/>an<sp/>item<sp/>of<sp/>Licensed<sp/>Software<sp/>or<sp/>Licensed<sp/>Product<sp/>under</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>any<sp/>End<sp/>User<sp/>Software<sp/>License<sp/>Agreement<sp/>or<sp/>Agreement<sp/>for<sp/>Licensed<sp/>Product</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>with<sp/>Synopsys<sp/>or<sp/>any<sp/>supplement<sp/>thereto.<sp/>You<sp/>are<sp/>permitted<sp/>to<sp/>use<sp/>and</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>redistribute<sp/>this<sp/>Software<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>modification,<sp/>provided<sp/>that<sp/>redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>this</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/>notice.<sp/>You<sp/>may<sp/>not<sp/>view,<sp/>use,<sp/>disclose,<sp/>copy<sp/>or<sp/>distribute<sp/>this<sp/>file<sp/>or</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/>any<sp/>information<sp/>contained<sp/>herein<sp/>except<sp/>pursuant<sp/>to<sp/>this<sp/>license<sp/>grant<sp/>from</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>Synopsys.<sp/>If<sp/>you<sp/>do<sp/>not<sp/>agree<sp/>with<sp/>this<sp/>notice,<sp/>including<sp/>the<sp/>disclaimer</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/>below,<sp/>then<sp/>you<sp/>are<sp/>not<sp/>authorized<sp/>to<sp/>use<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>BEING<sp/>DISTRIBUTED<sp/>BY<sp/>SYNOPSYS<sp/>SOLELY<sp/>ON<sp/>AN<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/>ARE<sp/>HEREBY<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>SYNOPSYS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY</highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/>==========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*==========================================================================</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/>Library<sp/>DW_DFSS-2.1.13</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/>==========================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;pwm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;io_config.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;apexextensions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>EIA<sp/>PWM<sp/>device<sp/>registers<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PWM_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x000)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>control<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_CHN_CONFIG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x001)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>channel<sp/>config<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TRIGGER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x002)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>trigger<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x003)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>fault<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_EVENTS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x004)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>events<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_INTCTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x005)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>interrupt<sp/>control<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_INTSTAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x006)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>interrupt<sp/>status<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_INTCLR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x007)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>interrupt<sp/>clear<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_THRESHOLD_01<sp/><sp/><sp/><sp/><sp/><sp/>(0x008)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>threshold<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_DEADZONE_01<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x00c)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>deadzone<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TIMER_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x010)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>timer<sp/>max<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_NPERIODS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x011)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>no<sp/>of<sp/>periods<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_CLK_DIV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x012)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>clock<sp/>divider<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_CLKEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x020)<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>clock<sp/>enable<sp/>register<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PWM<sp/>specific<sp/>macros<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PWM_TIMER_MODE_MSK<sp/><sp/><sp/><sp/><sp/><sp/>(0xc)</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TIMER_MODE_POS<sp/><sp/><sp/><sp/><sp/><sp/>(2)</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_POL_CHANS_MSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x3<sp/>&lt;&lt;<sp/>16)</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_POL_CHANS_POS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(16)</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_MASK_CHAN_MSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1<sp/>&lt;&lt;<sp/>8)</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_MASK_CHAN_POS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(8)</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_ENABLE_CHAN_MSK<sp/><sp/><sp/><sp/><sp/>(0x1)</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TRIGGER_WIDTH_MSK<sp/><sp/><sp/>(0x7<sp/>&lt;&lt;<sp/>12)</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TRIGGER_WIDTH_POS<sp/><sp/><sp/>(12)</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TRIGGER_MODE_MSK<sp/><sp/><sp/><sp/>(0x3<sp/>&lt;&lt;<sp/>4)</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TRIGGER_MODE_POS<sp/><sp/><sp/><sp/>(4)</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_RECOVER_MSK<sp/><sp/><sp/>(0x1<sp/>&lt;&lt;<sp/>23)</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_RECOVER_POS<sp/><sp/><sp/>(23)</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_INPUT_POL_MSK<sp/>(0x1<sp/>&lt;&lt;<sp/>20)</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_INPUT_POL_POS<sp/>(20)</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_MODE_MSK<sp/><sp/><sp/><sp/><sp/><sp/>(0x3<sp/>&lt;&lt;<sp/>12)</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_MODE_POS<sp/><sp/><sp/><sp/><sp/><sp/>(12)</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_MASK_MSK<sp/><sp/><sp/><sp/><sp/><sp/>(0x7<sp/>&lt;&lt;<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_MASK_POS<sp/><sp/><sp/><sp/><sp/><sp/>(0)</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_0_MASK_MSK<sp/><sp/><sp/><sp/>(0x249)<sp/></highlight><highlight class="comment">/*<sp/>bit<sp/>0,3,6,9<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_UPDM_INT_POS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(4)</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TRIGGER_INT_POS<sp/><sp/><sp/><sp/><sp/>(8)</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_FAULT_INT_POS<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(12)</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_TX_INT_MSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0xff1)</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_ERR_INT_MSK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x7<sp/>&lt;&lt;<sp/>12)</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>_Interrupt<sp/>void<sp/>(*ISR)<sp/>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Private<sp/>data<sp/>structure<sp/>maintained<sp/>by<sp/>the<sp/>driver.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="structpwm__info__struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpwm__info__struct" kindref="compound">pwm_info_struct</ref><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg_base;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>base<sp/>address<sp/>of<sp/>device<sp/>register<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pwm<sp/>instance<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>instID;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>new_trig_cnt;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__trigger__cfg__t" kindref="compound">io_pwm_trigger_cfg_t</ref><sp/>new_triggers[4];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Callbacks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>IO_CB_FUNC<sp/>tx_cb;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>IO_CB_FUNC<sp/>err_cb;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupt<sp/>numbers<sp/>and<sp/>handlers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>new_periods_vector;<sp/></highlight><highlight class="comment">/*<sp/>ISR<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>missed_update_vector;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>trigger_vector;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>fault_vector;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>ISR<sp/>tx_isr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>PWM<sp/>device<sp/>ISRs<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>ISR<sp/>err_isr;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}<sp/><ref refid="structpwm__info__struct" kindref="compound">pwm_info_t</ref>,<sp/>*<ref refid="structpwm__info__struct" kindref="compound">pwm_info_pt</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM0_PRESENT</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_DEV_PRESENT</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM1_PRESENT</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_DEV_PRESENT</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM2_PRESENT</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_DEV_PRESENT</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM3_PRESENT</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>PWM_DEV_PRESENT</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PWM_DEV_PRESENT</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PWM_MAX_CNT<sp/>(4)</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm_tx_ISR_proc(uint32_t<sp/><ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm_err_ISR_proc(uint32_t<sp/><ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM0_PRESENT</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm0_tx_ISR()</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_tx_ISR_proc(0);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm0_err_ISR()</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_err_ISR_proc(0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM1_PRESENT</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm1_tx_ISR()</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_tx_ISR_proc(1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm1_err_ISR()</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_err_ISR_proc(1);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM2_PRESENT</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm2_tx_ISR()</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_tx_ISR_proc(2);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm2_err_ISR()</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_err_ISR_proc(2);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM3_PRESENT</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm3_tx_ISR()</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_tx_ISR_proc(3);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>_Interrupt<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm3_err_ISR()</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_err_ISR_proc(3);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SPI<sp/>master<sp/>devices<sp/>private<sp/>data<sp/>structures<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>pwm_info_pt<sp/>pwm_handles[PWM_MAX_CNT]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structpwm__info__struct" kindref="compound">pwm_info_t</ref><sp/>pwm_devs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM0_PRESENT</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{.instID<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.reg_base<sp/>=<sp/>AR_IO_PWM0_CTRL,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.new_periods_vector<sp/>=<sp/>IO_PWM0_INT_NEW_NPERIODS,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.missed_update_vector<sp/>=<sp/>IO_PWM0_INT_UPD_MISSED,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.trigger_vector<sp/>=<sp/>IO_PWM0_INT_TRG,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.fault_vector<sp/>=<sp/>IO_PWM0_INT_FAULT,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.tx_isr<sp/>=<sp/>pwm0_tx_ISR,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.err_isr<sp/>=<sp/>pwm0_err_ISR},</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM1_PRESENT</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{.instID<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.reg_base<sp/>=<sp/>AR_IO_PWM1_CTRL,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.new_periods_vector<sp/>=<sp/>IO_PWM1_INT_NEW_NPERIODS,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.missed_update_vector<sp/>=<sp/>IO_PWM1_INT_UPD_MISSED,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.trigger_vector<sp/>=<sp/>IO_PWM1_INT_TRG,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.fault_vector<sp/>=<sp/>IO_PWM1_INT_FAULT,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.tx_isr<sp/>=<sp/>pwm1_tx_ISR,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.err_isr<sp/>=<sp/>pwm1_err_ISR},</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM2_PRESENT</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{.instID<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.reg_base<sp/>=<sp/>AR_IO_PWM2_CTRL,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.new_periods_vector<sp/>=<sp/>IO_PWM2_INT_NEW_NPERIODS,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.missed_update_vector<sp/>=<sp/>IO_PWM2_INT_UPD_MISSED,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.trigger_vector<sp/>=<sp/>IO_PWM2_INT_TRG,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.fault_vector<sp/>=<sp/>IO_PWM2_INT_FAULT,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.tx_isr<sp/>=<sp/>pwm2_tx_ISR,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.err_isr<sp/>=<sp/>pwm2_err_ISR},</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#ifdef<sp/>IO_PWM3_PRESENT</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{.instID<sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.reg_base<sp/>=<sp/>AR_IO_PWM3_CTRL,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.new_periods_vector<sp/>=<sp/>IO_PWM3_INT_NEW_NPERIODS,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.missed_update_vector<sp/>=<sp/>IO_PWM3_INT_UPD_MISSED,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.trigger_vector<sp/>=<sp/>IO_PWM3_INT_TRG,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.fault_vector<sp/>=<sp/>IO_PWM3_INT_FAULT,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.tx_isr<sp/>=<sp/>pwm3_tx_ISR,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>.err_isr<sp/>=<sp/>pwm3_err_ISR},</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>{.instID<sp/>=<sp/>PWM_MAX_CNT}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>REG_WRITE(<sp/>reg,<sp/>x<sp/>)<sp/><sp/><sp/>_sr(<sp/>(unsigned)(x),<sp/>(unsigned)(dev-&gt;reg_base<sp/>+<sp/>reg)<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>REG_READ(<sp/>reg<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>_lr(<sp/>(unsigned)(dev-&gt;reg_base<sp/>+<sp/>reg)<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">uint32_t<sp/>io_pwm_open(uint32_t<sp/><ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_info_pt<sp/>dev;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((pwm_devs[h].instID<sp/>!=<sp/>dev_id)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(pwm_devs[h].instID<sp/>!=<sp/>PWM_MAX_CNT))<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>h++;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pwm_devs[h].instID<sp/>==<sp/>PWM_MAX_CNT)<sp/>||<sp/>(0<sp/>!=<sp/>pwm_handles[dev_id]))<sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>dev_id<sp/>not<sp/>part<sp/>of<sp/>design,<sp/>or<sp/>still<sp/>open<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>]<sp/>=<sp/>&amp;pwm_devs[h];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>dev<sp/>=<sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CLKEN,<sp/>0x1);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>automatically<sp/>recover<sp/>from<sp/>faults<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_FAULT,<sp/>PWM_FAULT_RECOVER_MSK);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>init<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;new_periods_vector,<sp/>dev-&gt;tx_isr);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;missed_update_vector,<sp/>dev-&gt;tx_isr);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;trigger_vector,<sp/>dev-&gt;tx_isr);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;fault_vector,<sp/>dev-&gt;err_isr);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;new_trig_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>io_pwm_close(uint32_t<sp/>dev_id)</highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_info_pt<sp/>dev<sp/>=<sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>];</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_EVENTS,<sp/>0x1);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>disable<sp/>clock<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CLKEN,<sp/>0);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;new_periods_vector,<sp/>NULL);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;missed_update_vector,<sp/>NULL);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;trigger_vector,<sp/>NULL);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>_setvecti(dev-&gt;fault_vector,<sp/>NULL);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;tx_cb<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;err_cb<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;new_trig_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>io_pwm_ioctl(uint32_t<sp/>dev_id,<sp/>uint32_t<sp/>cmd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_info_pt<sp/>dev<sp/>=<sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__timer__cfg__t" kindref="compound">io_pwm_timer_cfg_pt</ref><sp/>timer_cfg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__generator__cfg__t" kindref="compound">io_pwm_generator_cfg_pt</ref><sp/>gen_cfg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__chan__cfg__t" kindref="compound">io_pwm_chan_cfg_pt</ref><sp/>chan_cfg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__trigger__cfg__t" kindref="compound">io_pwm_trigger_cfg_pt</ref><sp/>trigger_cfg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__fault__cfg__t" kindref="compound">io_pwm_fault_cfg_pt</ref><sp/>fault_cfg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg_value<sp/>=<sp/>0,<sp/>reg_value2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(cmd)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_SET_CB_TX:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;tx_cb<sp/>=<sp/>((<ref refid="structio__cb__t" kindref="compound">io_cb_t</ref><sp/>*)<sp/>arg)-&gt;cb;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_SET_CB_ERR:</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>dev-&gt;err_cb<sp/>=<sp/>((<ref refid="structio__cb__t" kindref="compound">io_cb_t</ref><sp/>*)<sp/>arg)-&gt;cb;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_SET_CLKDIV:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CLK_DIV,<sp/>(*((uint32_t<sp/>*)<sp/>arg)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_SET_TIMER_CFG:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>timer_cfg<sp/>=<sp/>(<ref refid="struct__pwm__timer__cfg__t" kindref="compound">io_pwm_timer_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TIMER_MAX,<sp/>timer_cfg-&gt;max);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_NPERIODS,<sp/>(timer_cfg-&gt;periods<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>change<sp/>mode<sp/>only<sp/>when<sp/>timer<sp/>is<sp/>disabled<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_CTRL);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>0x2)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~PWM_TIMER_MODE_MSK;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CTRL,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(timer_cfg-&gt;mode<sp/>&lt;&lt;<sp/>PWM_TIMER_MODE_POS)));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_ENABLE_TIMER:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_CTRL);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~0x2;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CTRL,<sp/>(reg_value<sp/>|<sp/>((*((uint32_t<sp/>*)<sp/>arg))<sp/>&lt;&lt;<sp/>1)));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable/disable<sp/>nperiods<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTCTRL);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1<sp/>==<sp/>(*((uint32_t<sp/>*)<sp/>arg)))<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>|=<sp/>0x1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~0x1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCTRL,<sp/>reg_value);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_SET_GENERATOR_CFG:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>gen_cfg<sp/>=<sp/>(<ref refid="struct__pwm__generator__cfg__t" kindref="compound">io_pwm_generator_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE((PWM_THRESHOLD_01<sp/>+<sp/>gen_cfg-&gt;chans_id),</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen_cfg-&gt;threshold);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE((PWM_DEADZONE_01<sp/>+<sp/>gen_cfg-&gt;chans_id),</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gen_cfg-&gt;deadzone);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_CHN_CONFIG);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(PWM_POL_CHANS_MSK<sp/>&lt;&lt;<sp/>2<sp/>*<sp/>gen_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CHN_CONFIG,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(gen_cfg-&gt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>polarity<sp/>&lt;&lt;<sp/>(PWM_POL_CHANS_POS<sp/>+</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>gen_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_MASK_CHANNEL:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>chan_cfg<sp/>=<sp/>(<ref refid="struct__pwm__chan__cfg__t" kindref="compound">io_pwm_chan_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_CHN_CONFIG);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(PWM_MASK_CHAN_MSK<sp/>&lt;&lt;<sp/>chan_cfg-&gt;chan_id);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CHN_CONFIG,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chan_cfg-&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;<sp/>(PWM_MASK_CHAN_POS<sp/>+<sp/>chan_cfg-&gt;chan_id))));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_ENABLE_CHANNEL:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>chan_cfg<sp/>=<sp/>(<ref refid="struct__pwm__chan__cfg__t" kindref="compound">io_pwm_chan_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_CHN_CONFIG);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(PWM_ENABLE_CHAN_MSK<sp/>&lt;&lt;<sp/>chan_cfg-&gt;chan_id);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_CHN_CONFIG,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|<sp/>(chan_cfg-&gt;value<sp/>&lt;&lt;<sp/>chan_cfg-&gt;chan_id)));</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable/disable<sp/>missed<sp/>update<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTCTRL);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1<sp/>==<sp/>chan_cfg-&gt;value)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>|=<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_UPDM_INT_POS<sp/>+<sp/>chan_cfg-&gt;chan_id));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>(PWM_UPDM_INT_POS<sp/>+<sp/>chan_cfg-&gt;chan_id));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCTRL,<sp/>reg_value);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_SET_TRIGGER_CFG:</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>trigger_cfg<sp/>=<sp/>(<ref refid="struct__pwm__trigger__cfg__t" kindref="compound">io_pwm_trigger_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_CTRL);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>0x2)<sp/>==<sp/>0)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>timer<sp/>disabled,<sp/>program<sp/>trigger<sp/>register<sp/>immediately<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(PWM_TRIGGER_WIDTH_MSK<sp/>&lt;&lt;<sp/>3<sp/>*<sp/>trigger_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_WIDTH_POS<sp/>+</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>*<sp/>trigger_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(PWM_TRIGGER_MODE_MSK<sp/>&lt;&lt;<sp/>2<sp/>*<sp/>trigger_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_MODE_POS<sp/>+</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>trigger_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>trigger_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;is_enabled<sp/>&lt;&lt;<sp/>trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chans_id)));</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable/disable<sp/>trigger<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTCTRL);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(0x1<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_INT_POS<sp/>+<sp/>trigger_cfg-&gt;chans_id));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCTRL,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_enabled<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_INT_POS<sp/>+</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>timer<sp/>enable,<sp/>(at<sp/>most<sp/>4)<sp/>new<sp/>trigger<sp/>values<sp/>will<sp/>be<sp/>effectuated<sp/>when<sp/>servicing<sp/>the<sp/>nperiods<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;new_trig_cnt<sp/>!=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;new_triggers[dev-&gt;new_trig_cnt].chans_id<sp/>=</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_cfg-&gt;chans_id;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;new_triggers[dev-&gt;new_trig_cnt].width<sp/>=</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_cfg-&gt;width;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;new_triggers[dev-&gt;new_trig_cnt].mode<sp/>=</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_cfg-&gt;mode;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;new_triggers[dev-&gt;new_trig_cnt].is_enabled<sp/>=</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_cfg-&gt;is_enabled;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;new_trig_cnt++;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_ENABLE_TRIGGER:</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>chan_cfg<sp/>=<sp/>(<ref refid="struct__pwm__chan__cfg__t" kindref="compound">io_pwm_chan_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>chan_cfg-&gt;chan_id);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|<sp/>(chan_cfg-&gt;value<sp/>&lt;&lt;<sp/>chan_cfg-&gt;chan_id)));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable/disable<sp/>trigger<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTCTRL);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_INT_POS<sp/>+<sp/>chan_cfg-&gt;chan_id));</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCTRL,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chan_cfg-&gt;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_INT_POS<sp/>+<sp/>chan_cfg-&gt;chan_id))));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_SET_FAULT_INPUT_POL:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>chan_cfg<sp/>=<sp/>(<ref refid="struct__pwm__chan__cfg__t" kindref="compound">io_pwm_chan_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_FAULT);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(PWM_FAULT_INPUT_POL_MSK<sp/>&lt;&lt;<sp/>chan_cfg-&gt;chan_id);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_FAULT,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(chan_cfg-&gt;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;<sp/>(PWM_FAULT_INPUT_POL_POS<sp/>+</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chan_cfg-&gt;chan_id))));</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IO_PWM_SET_FAULT_CFG:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>fault_cfg<sp/>=<sp/>(<ref refid="struct__pwm__fault__cfg__t" kindref="compound">io_pwm_fault_cfg_pt</ref>)<sp/>arg;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_FAULT);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(PWM_FAULT_MODE_MSK<sp/>&lt;&lt;<sp/>2<sp/>*<sp/>fault_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_FAULT,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fault_cfg-&gt;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>&lt;&lt;<sp/>(PWM_FAULT_MODE_POS<sp/>+</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>fault_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_FAULT);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>&amp;=<sp/>~(PWM_FAULT_MASK_MSK<sp/>&lt;&lt;<sp/>3<sp/>*<sp/>fault_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>REG_WRITE(PWM_FAULT,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value<sp/>|</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fault_cfg-&gt;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask<sp/>&lt;&lt;<sp/>(PWM_FAULT_MASK_POS<sp/>+</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>*<sp/>fault_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enable/disable<sp/>fault<sp/>interrupt<sp/>when<sp/>any<sp/>mask<sp/>enables<sp/>it<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(h<sp/>=<sp/>0;<sp/>h<sp/>!=<sp/>3;<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_FAULT);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>=<sp/>REG_READ(PWM_INTCTRL);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>(PWM_FAULT_0_MASK_MSK<sp/>&lt;&lt;<sp/>h))<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>(PWM_FAULT_INT_POS<sp/>+<sp/>h));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>|=<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_FAULT_INT_POS<sp/>+<sp/>h));</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCTRL,<sp/>reg_value2);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm_tx_ISR_proc(uint32_t<sp/>dev_id)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_info_pt<sp/>dev<sp/>=<sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__pwm__trigger__cfg__t" kindref="compound">io_pwm_trigger_cfg_pt</ref><sp/>trigger_cfg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg_value<sp/>=<sp/>0,<sp/>reg_value2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cb_arg<sp/>=<sp/>IO_PWM_CB_DEV(dev_id);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nperiod,<sp/>missed<sp/>update,<sp/>or<sp/>trigger<sp/>interrupt<sp/>that<sp/>has<sp/>impact<sp/>on<sp/>a<sp/>channel<sp/>pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTSTAT);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>PWM_TX_INT_MSK)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>nperiod<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>0x1)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>update<sp/>trigger<sp/>configuration,<sp/>if<sp/>available<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(h<sp/>=<sp/>0;<sp/>h<sp/>!=<sp/>dev-&gt;new_trig_cnt;<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger_cfg<sp/>=<sp/>&amp;(dev-&gt;new_triggers[h]);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>&amp;=</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(PWM_TRIGGER_WIDTH_MSK<sp/>&lt;&lt;<sp/>3<sp/>*<sp/>trigger_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value2<sp/>|</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_WIDTH_POS<sp/>+</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3<sp/>*<sp/>trigger_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>&amp;=</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~(PWM_TRIGGER_MODE_MSK<sp/>&lt;&lt;<sp/>2<sp/>*<sp/>trigger_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value2<sp/>|</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_MODE_POS<sp/>+</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>trigger_cfg-&gt;chans_id))));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>=<sp/>REG_READ(PWM_TRIGGER);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value2<sp/>&amp;=<sp/>~(0x1<sp/>&lt;&lt;<sp/>trigger_cfg-&gt;chans_id);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_TRIGGER,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(reg_value2<sp/>|</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(trigger_cfg-&gt;is_enabled<sp/>&lt;&lt;<sp/>trigger_cfg-&gt;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chans_id)));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>missed<sp/>update<sp/>interrupt<sp/>for<sp/>this<sp/>channel,<sp/>if<sp/>any<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCLR,</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x1<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(PWM_UPDM_INT_POS<sp/>+<sp/>trigger_cfg-&gt;chans_id)));</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;new_trig_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>notify<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;tx_cb<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;tx_cb(cb_arg<sp/>|<sp/>IO_PWM_CB_NPERIODS);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCLR,<sp/>0x1);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTSTAT);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>missed<sp/>update<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(h<sp/>=<sp/>0;<sp/>h<sp/>!=<sp/>4;<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_UPDM_INT_POS<sp/>+<sp/>h)))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>notify<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;tx_cb<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;tx_cb(cb_arg<sp/>|<sp/>IO_PWM_CB_UPD_MISSED(h));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCLR,<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_UPDM_INT_POS<sp/>+<sp/>h)));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>trigger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(h<sp/>=<sp/>0;<sp/>h<sp/>!=<sp/>4;<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_INT_POS<sp/>+<sp/>h)))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>notify<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;tx_cb<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;tx_cb(cb_arg<sp/>|<sp/>IO_PWM_CB_TRIGGER(h));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCLR,<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_TRIGGER_INT_POS<sp/>+<sp/>h)));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTSTAT);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pwm_err_ISR_proc(uint32_t<sp/>dev_id)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>pwm_info_pt<sp/>dev<sp/>=<sp/>pwm_handles[<ref refid="group___d_e_v_i_c_e___h_a_l___c_o_m_m_o_n___d_e_v_i_d_1gae2dabafacb4a0fa4c5d6b7176b542e72" kindref="member">dev_id</ref>];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>reg_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>h<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cb_arg<sp/>=<sp/>IO_PWM_CB_DEV(dev_id);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fault<sp/>interrupt<sp/>that<sp/>has<sp/>impact<sp/>on<sp/>a<sp/>channel<sp/>pair<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTSTAT);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>PWM_ERR_INT_MSK)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(h<sp/>=<sp/>0;<sp/>h<sp/>!=<sp/>3;<sp/>h++)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((reg_value<sp/>&amp;<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_FAULT_INT_POS<sp/>+<sp/>h)))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>notify<sp/>application<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dev-&gt;err_cb<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dev-&gt;err_cb(cb_arg<sp/>|<sp/>IO_PWM_CB_FAULT(h));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>clear<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REG_WRITE(PWM_INTCLR,<sp/>(0x1<sp/>&lt;&lt;<sp/>(PWM_FAULT_INT_POS<sp/>+<sp/>h)));</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>reg_value<sp/>=<sp/>REG_READ(PWM_INTSTAT);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/slowfs/ru20arcjenkins/de02-arcjenkins2/slaves/ru20-gp-hw-linux105/workspace/arcoss_verification/sandbox_jingru/testing_jobs/embarc_osp_verification/embarc_osp_website/embarc_osp/device/ip/subsystem/pwm/pwm.c"/>
  </compounddef>
</doxygen>
