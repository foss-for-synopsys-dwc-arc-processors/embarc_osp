#define __ASSEMBLY__

#include "secureshield_board_config.h"

MEMORY {
	NORMAL_ROM :	ORIGIN = NORMAL_ROM_START,	LENGTH = NORMAL_ROM_SIZE
	SECURE_ROM :	ORIGIN = SECURE_ROM_START,	LENGTH = SECURE_ROM_SIZE
	NORMAL_RAM :	ORIGIN = NORMAL_RAM_START,	LENGTH = NORMAL_RAM_SIZE
	SECURE_RAM :	ORIGIN = SECURE_RAM_START,	LENGTH = SECURE_RAM_SIZE
}

ENTRY(_start)

SECTIONS {

	GROUP: {
		.rom.secureshieldruntime ALIGN(CONTAINER_ADDRESS_ALIGNMENT) : {
			/* secureshield secure code, rodata, data */
			. = ALIGN(4);
			_f_rom_secureshieldruntime = .;
			KEEP(*(.rom.secureshield.secure))


			/* the following are secureshield application configuration */
			_f_cfg_secureshield = .;
			/* secureshield container configuration tables */
			. = ALIGN(32);
			__secureshield_cfgtbl_start = .;
			KEEP(*(.keep.secureshield.cfgtbl))
			. = ALIGN(32);
			__secureshield_cfgtbl_end = .;

			/* pointers to secureshield secure shields configuration tables */
			/* note: no further alignment here, we need to have the exact list of pointers */
			 __secureshield_cfgtbl_ptr_start = .;
			KEEP(*(.keep.secureshield.cfgtbl_ptr_first))
			KEEP(*(.keep.secureshield.cfgtbl_ptr))
			 __secureshield_cfgtbl_ptr_end = .;

			KEEP(*(.keep.secureshield.ac_table))

			. = ALIGN(32);
			_e_cfg_secureshield = .;
#if  SECURESHIELD_VERSION == 1
			_e_rom_secureshieldruntime = _f_rom_secureshieldruntime + CONTAINER_SIZE_ALIGNMENT(. - _f_rom_secureshieldruntime);
#elif SECURESHIELD_VERSION == 2
			_e_rom_secureshieldruntime = ALIGN(CONTAINER_ADDRESS_ALIGNMENT);
#endif
		}
	} > SECURE_ROM

{% if secure_rom_section is defined %}
/* customized secure rom sections */
#if  SECURESHIELD_VERSION == 1
	.rom.gap.secure BIND(_e_rom_secureshieldruntime-4) : {
		FILL(4);
	} > SECURE_ROM
#endif
{%- for item in secure_rom_section %}
	/* secure rom sections {{item.section_name}} */
	.{{item.section_name}}.rom ALIGN({{item.alignment}}) : {
		_f_text_{{item.section_name}} = .;
		*(.{{item.section_name}}.text)
#if SECURESHIELD_VERSION == 2
		. = ALIGN(CONTAINER_ADDRESS_ALIGNMENT);
#endif
		_e_text_{{item.section_name}} = .;
		_f_rodata_{{item.section_name}} = .;
		*(.{{item.section_name}}.rodata)
		_e_rodata_{{item.section_name}} = ALIGN({{item.alignment}});
	} > SECURE_ROM
{% endfor %}
{%- endif %}

	GROUP (NOLOAD) : {
		.ram.secureshieldruntime ALIGN(CONTAINER_ADDRESS_ALIGNMENT) : {
			/* secureshield runtime data */
			. = ALIGN(4);
			_f_ram_secureshieldruntime = .;
			KEEP(*(.ram.secureshield.secure))
			KEEP(*(.ram.secureshield.stack))
#if  SECURESHIELD_VERSION == 1
			_e_ram_secureshieldruntime = _f_ram_secureshieldruntime + CONTAINER_SIZE_ALIGNMENT(. - _f_ram_secureshieldruntime);
#elif SECURESHIELD_VERSION == 2
			_e_ram_secureshieldruntime  = ALIGN(CONTAINER_ADDRESS_ALIGNMENT);
#endif
		}

	} > SECURE_RAM

{% if secure_ram_section is defined %}
/* customized secure ram sections */
#if  SECURESHIELD_VERSION == 1
	.ram.gap.secure BIND(_e_ram_secureshieldruntime-4) : {
		FILL(4);
	} > SECURE_RAM
#endif
{%- for item in secure_ram_section %}
	/* secure ram sections {{item.section_name}} */
	.{{item.section_name}}.ram.data ALIGN({{item.alignment}}) : {
		_f_data_{{item.section_name}} = .;
		*(.{{item.section_name}}.data)
		_e_data_{{item.section_name}} = .;
	} > SECURE_RAM AT > SECURE_ROM
	.{{item.section_name}}.ram.bss : {
		_f_bss_{{item.section_name}} = .;
		*(.{{item.section_name}}.bss)
		_e_bss_{{item.section_name}} = ALIGN({{item.alignment}});
	} > SECURE_RAM
	_f_data_load_{{item.section_name}} = LOADADDR(.{{item.section_name}}.ram.data);
{% endfor %}
{%- endif %}

/* background container's area */
	GROUP : {
		.init_bootstrap:{
			_f_text_background_container = .;
			_f_init = .;
			KEEP(*(.init_vector))
			KEEP(*(.init_bootstrap))
			_e_init = .;
		}

		.vector ALIGN(1024): {
			_f_vector = .;
			*(.vector)
			_e_vector = .;
		}

		/* . = ALIGN(SECURESHIELD_CONTAINER_ALIGNMENT); */
		.text ALIGN(4): {
			_f_text = .;
			*(TYPE text)
			_e_text = .;
		}

#if SECURESHIELD_VERSION == 2
		.rodata ALIGN(CONTAINER_ADDRESS_ALIGNMENT): {
#else
		.rodata ALIGN(4): {
#endif
			_e_text_background_container = .;
			_f_rodata_background_container = .;
			_f_rodata = .;
			_fctors = .;
			*(.ctors*)
			_ectors = .;
			_fdtors = .;
			*(.dtors*)
			_edtors = .;
			_feh_frame = .;
			*(.eh_frame*)
			_eeh_frame = .;

			*(TYPE lit)

			_e_rodata = .;
		}
#if  SECURESHIELD_VERSION == 1
		_e_rodata_background_container = _f_text_background_container + CONTAINER_SIZE_ALIGNMENT(. - _f_text_background_container);
#elif SECURESHIELD_VERSION == 2
		_e_rodata_background_container = ALIGN(CONTAINER_ADDRESS_ALIGNMENT);
#endif

	} > NORMAL_ROM

{% if normal_rom_section is defined %}
/* customized normal rom sections */
#if  SECURESHIELD_VERSION == 1
	.rom.gap BIND(_e_rodata_background_container-4) : {
		FILL(4);
	} > NORMAL_ROM
#endif
{%- for item in normal_rom_section %}
	/* normal rom sections {{item.section_name}} */
	.{{item.section_name}}.rom ALIGN({{item.alignment}}) : {
		_f_text_{{item.section_name}} = .;
		*(.{{item.section_name}}.text)
#if SECURESHIELD_VERSION == 2
		. = ALIGN(CONTAINER_ADDRESS_ALIGNMENT);
#endif
		_e_text_{{item.section_name}} = .;
		_f_rodata_{{item.section_name}} = .;
		*(.{{item.section_name}}.rodata)
		_e_rodata_{{item.section_name}} = ALIGN({{item.alignment}});
	} > NORMAL_ROM
{% endfor %}
{%- endif %}

	GROUP : {
		.data ALIGN(4): {
			_f_data_background_container = .;
			_f_data = .;
			_f_sdata = .;
			*(.sdata)
			*(.sbss)
			_e_sdata = .;
			*(TYPE data)
		}

		.tls ALIGN(4): {
			*(.tls*)
			_e_data = .;
			_e_data_background_container = .;
		}
	} > NORMAL_RAM AT > NORMAL_ROM

	GROUP (NOLOAD) : {

		.bss ALIGN(4): {
			_f_bss_background_container = .;
			_f_bss = .;
			*(TYPE bss)
			_e_bss = .;
		}
		.stack ALIGN(4) SIZE(_STACKSIZE): {}
		.heap  ALIGN(4) SIZE(_HEAPSIZE): {
		}
#if  SECURESHIELD_VERSION == 1
		_e_bss_background_container = _f_data_background_container + CONTAINER_SIZE_ALIGNMENT(. - _f_data_background_container);
#elif SECURESHIELD_VERSION == 2
		_e_bss_background_container = ALIGN(CONTAINER_ADDRESS_ALIGNMENT);
#endif
	} > NORMAL_RAM

{% if normal_ram_section is defined %}
/* customized normal ram sections */
#if  SECURESHIELD_VERSION == 1
	.ram.gap BIND(_e_bss_background_container-4) : {
		FILL(4);
	} > NORMAL_RAM
#endif
{%- for item in normal_ram_section %}
	/* normal ram sections {{item.section_name}} */
	.{{item.section_name}}.ram.data ALIGN({{item.alignment}}) : {
		_f_data_{{item.section_name}} = .;
		*(.{{item.section_name}}.data)
		_e_data_{{item.section_name}} = .;
	} > NORMAL_RAM AT > NORMAL_ROM
	.{{item.section_name}}.ram.bss : {
		_f_bss_{{item.section_name}} = .;
		*(.{{item.section_name}}.bss)
		_e_bss_{{item.section_name}} = ALIGN({{item.alignment}});
	} > NORMAL_RAM
	_f_data_load_{{item.section_name}} = LOADADDR(.{{item.section_name}}.ram.data);
{% endfor %}
{%- endif %}

	_f_stack = ADDR(.stack);
	_e_stack = ADDR(.stack) + SIZEOF(.stack);
	_f_heap = ADDR(.heap);
	_e_heap = ADDR(.heap) + SIZEOF(.heap);

	_load_addr_text = LOADADDR(.text);
	_load_addr_rodata = LOADADDR(.rodata);
	_load_addr_data = LOADADDR(.data);
	_f_data_load_background_container = LOADADDR(.data);
}
